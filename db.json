{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/meteor/source/fonts/percolate.eot","path":"fonts/percolate.eot","modified":0,"renderable":1},{"_id":"themes/meteor/source/fonts/percolate.ttf","path":"fonts/percolate.ttf","modified":0,"renderable":1},{"_id":"themes/meteor/source/fonts/percolate.woff","path":"fonts/percolate.woff","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/icon-white.svg","path":"images/icon-white.svg","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/logo-coralspace-left.svg","path":"images/logo-coralspace-left.svg","modified":0,"renderable":1},{"_id":"themes/meteor/source/script/main.js","path":"script/main.js","modified":0,"renderable":1},{"_id":"themes/meteor/source/script/smooth-scroll.min.js","path":"script/smooth-scroll.min.js","modified":0,"renderable":1},{"_id":"themes/meteor/source/style/style.less","path":"style/style.less","modified":0,"renderable":1},{"_id":"themes/meteor/source/fonts/percolate.svg","path":"fonts/percolate.svg","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/OSXsmall.png","path":"images/OSXsmall.png","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/tuxSmall.png","path":"images/tuxSmall.png","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/windowsSmall.png","path":"images/windowsSmall.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/meteor/.git","hash":"049265de896a0397e3c70e6313762e3c26f93523","modified":1474889374000},{"_id":"themes/meteor/_config.yaml","hash":"2bbc5bebc9a3102442c4d4b89d4ae0c829fd4e62","modified":1474889374000},{"_id":"source/index.md","hash":"c3aaa036b4ca79d8f71f27f9cf56e518be4910dd","modified":1535719879866},{"_id":"source/commandline.md","hash":"0b329d957b5386c4280d372fcb876d29015ba01d","modified":1474889325000},{"_id":"themes/meteor/layout/layout.ejs","hash":"9c495eaef6bd651b5112cd99e2d98c1dc4fcf394","modified":1478707506886},{"_id":"themes/meteor/layout/page.ejs","hash":"e63b94be51c6ccd49b302c9c91a27873f73c1779","modified":1478101465155},{"_id":"source/api/accounts-multi.md","hash":"f86155b4d0ff6c8d9c3c5ad883c53eb6625c2b29","modified":1474889325000},{"_id":"source/api/accounts.md","hash":"2e04b2e0b51c4037d77aad2bbf6a5f82d3d922ec","modified":1474889325000},{"_id":"source/api/assets.md","hash":"23d669772ecc4ec8f1bd5d517bcd8a965fa78dbd","modified":1474889325000},{"_id":"source/api/blaze.md","hash":"d75884756afddfd2bc791c3e3384df73e71f70a9","modified":1474889325000},{"_id":"source/api/check.md","hash":"170d63a00796364506ee4397241062d2e276d454","modified":1474889325000},{"_id":"source/api/collections.md","hash":"1d715fc4a18cc8430248757fa37b14ce57b3730c","modified":1474889325000},{"_id":"source/api/connections.md","hash":"dd194f4c3b60bf51779e477580db9325a6dcaafb","modified":1474889325000},{"_id":"source/api/core.md","hash":"07aba32faf25ed16fc6442fa59ebaea2ececb16d","modified":1474889325000},{"_id":"source/api/ejson.md","hash":"626c38a1341ea12a3f957615e5200092b91963bf","modified":1474889325000},{"_id":"source/api/email.md","hash":"97a80f9b11f3c9d6bc7265201527d29bed77083f","modified":1474889325000},{"_id":"source/api/http.md","hash":"eb2a09d9f2d65120d688b47e42e1e06b4e153364","modified":1474889325000},{"_id":"source/api/methods.md","hash":"2a9c64efb7135baf43a9e88bc4fd06aa6040482d","modified":1474889325000},{"_id":"source/api/mobile-config.md","hash":"cc49bf8a8c411d91ca7f584e8761e7e3baeee5c9","modified":1474889325000},{"_id":"source/api/packagejs.md","hash":"2da4cb7c02733ed934172dd0ff6d66aafef79610","modified":1474889325000},{"_id":"source/api/pubsub.md","hash":"ebc3e8107cb22e75191bff600dfd36e43f12eab5","modified":1474889325000},{"_id":"source/api/passwords.md","hash":"d223dbc16d787843fdb10ef421d6f411b5bb1d79","modified":1474889325000},{"_id":"source/api/reactive-var.md","hash":"5eaff15aed6dfcfb87c12b0593a60e760d63e801","modified":1474889325000},{"_id":"source/api/session.md","hash":"de19fade87018a3a20a26d570feb8112d41daabe","modified":1474889325000},{"_id":"source/api/templates.md","hash":"149a1d828bd90b3b0e038d8a41b2ea5491751cb4","modified":1474889325000},{"_id":"source/api/timers.md","hash":"9ce32673bd46b7c61662ce708289a46237e6d4d4","modified":1474889325000},{"_id":"source/api/tracker.md","hash":"62b255f29d1201c116acc196ce6f76fb38abee25","modified":1474889325000},{"_id":"source/packages/accounts-ui.md","hash":"d39b2c6c7c31c45fa3f385d07f28ea9b1cb4431d","modified":1474889325000},{"_id":"source/packages/appcache.md","hash":"88d1f57aeb3c3b7ee3c54bf9a820d05ae644acaa","modified":1474889325000},{"_id":"source/packages/coffeescript.md","hash":"a00aceb918ea7d16331531960168af7795ed90ed","modified":1474889325000},{"_id":"source/packages/audit-argument-checks.md","hash":"14e35b60b49aff6bc6fd398f12e799e834289407","modified":1474889325000},{"_id":"source/packages/jquery.md","hash":"10866aa89a5a93b288342c00539e52922b6b6cc0","modified":1474889325000},{"_id":"source/packages/less.md","hash":"b4d4a20a5a96ffe17b7c5e4a72a1c79960730a2c","modified":1474889325000},{"_id":"source/packages/ecmascript.md","hash":"a000de71dc604eb453363540f8743b56feca7444","modified":1474889325000},{"_id":"source/packages/markdown.md","hash":"029caba5c4b521899f513d6eab2117ee4bbf1071","modified":1474889325000},{"_id":"source/packages/oauth-encryption.md","hash":"96d52e09c837cbb137752de21b749507f25d2820","modified":1474889325000},{"_id":"source/packages/modules.md","hash":"3c169bea0e926cdd28e2d2b040bae07de1d2ae53","modified":1474889325000},{"_id":"source/packages/random.md","hash":"b689a94ec85207d1fa7950a23294298bb0843680","modified":1474889325000},{"_id":"source/packages/spacebars.md","hash":"13454fe7dc69f4f741775fae978307151d8a8c2e","modified":1474889325000},{"_id":"source/packages/underscore.md","hash":"6d3cc369754de4d2b341032cd28bb8523aaebe92","modified":1474889325000},{"_id":"source/packages/webapp.md","hash":"8071b9ee8705fb99a8f236e2de3bf9ac2350d503","modified":1474889325000},{"_id":"themes/meteor/source/fonts/percolate.eot","hash":"9f46f6ed3453808cb206b5b8c7c399f8c7c50b4b","modified":1474889374000},{"_id":"themes/meteor/source/fonts/percolate.ttf","hash":"ae93904a100e0c875bb382cb88709de4cd8b6a37","modified":1474889374000},{"_id":"themes/meteor/source/fonts/percolate.woff","hash":"f475ff4ac3d777c8d56bc7040d6f8576b86398a5","modified":1474889374000},{"_id":"themes/meteor/source/images/favicon.png","hash":"c019ad5135fb00e9d5a8a000a7162f4876cf583b","modified":1474889374000},{"_id":"themes/meteor/source/images/icon-white.svg","hash":"037afdf5842532cdc696bd93541be8a273ddf9dc","modified":1474889374000},{"_id":"themes/meteor/source/images/logo-coralspace-left.svg","hash":"ce3fa809cc5498c23597f68fc7f94d72f0deb453","modified":1474889374000},{"_id":"themes/meteor/source/script/main.js","hash":"aa6f1d81ab38e3d8e0dbdef9a574d2330f8ff5a4","modified":1474889374000},{"_id":"themes/meteor/source/script/smooth-scroll.min.js","hash":"c80cccc6c68f32b348b3d8459eb89686871b2e38","modified":1474889374000},{"_id":"themes/meteor/source/style/style.less","hash":"6517fbcd0c75aeb1bd4fc6f0c9a834fcef9a77e1","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-help.ejs","hash":"03fcaff5811b72920c87fa9154ffc4853b30b8de","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-guide.ejs","hash":"f490bb8fd8e5abd0e71c97c92a335a0802e329e1","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-compass.ejs","hash":"8072852c211ea881b8facccbe00d975b2507d990","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-logs.ejs","hash":"47638a8a92ab5e5a7a143e1588ca9baaec371f9d","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/panel.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-support.ejs","hash":"4ac49bda616e8046bd4175fbb6e891dfcab658c0","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-github.ejs","hash":"ad171cc4d41acf187831c415cb1928d5ef7a1142","modified":1474889374000},{"_id":"themes/meteor/layout/partials/sidebar.ejs","hash":"2a8d739e3b6d6c1f497ae8ffdd3f9dbe0efe38d6","modified":1478707476014},{"_id":"themes/meteor/source/fonts/percolate.svg","hash":"b7c6df677a47fd66316ce90839550bfad6fd462f","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Checkbox.less","hash":"9971b489264f4b37fb901cd8417accba7becf270","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Input.less","hash":"5be8dadb507ff338ae7cea539cae535b7779334c","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Textarea.less","hash":"4c6089bb5f41dde32d1828d6d27a0899f8e3c8cf","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Select.less","hash":"9065734a36e52c8ce2830d403da3852eebe3590c","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Radio.less","hash":"ecc255428e2883b49d074648a290de07b7a9d4d5","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/animation.less","hash":"2c01fa20c282b133dda12a852fb61baba0c0af82","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/base.less","hash":"0fce53b3187d99296dedd0fcd90887a4b336ad83","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/button.less","hash":"d76568349602485c2ec7d0d3380091c4a5e8e2ca","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/form.less","hash":"dcb4320c34011659a1e2974a7ae5b28b444cc519","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/docsearch.less","hash":"26a087b4b6748822b7323584ba8dc375c7462641","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/formatting.less","hash":"7d9dbfc393136e7a28fff7076f74bf5b7f3670cd","modified":1478702733534},{"_id":"themes/meteor/source/style/_global/icon.less","hash":"b6f93082065f57b48185c6fcbffafe5dfc98c86f","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/mobile.less","hash":"d4f28dae69f89ce6e9646774ce6d07d6f677c683","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/link.less","hash":"a80547ffbacd58422e7095aadbbd73ba0c650e31","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/nav.less","hash":"e3eb2ec6e2245f6b4d40589c104618f9ed69f37f","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/syntax.less","hash":"ff408a13d195a50b3310cdbf5ca31961393e7983","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/layout.less","hash":"655fcc41ad239d5a219aabc4c79c0ac970b6c8bd","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/panel.less","hash":"9438a41518ecdaa01d64ae65317ff6e27b03720d","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/nav.less","hash":"a558ca89e296a7e94d3a29e998aa119c877c065e","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/content.less","hash":"c90d7765335d1ee1eca5726ada84d7cb35a61745","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/sidebar.less","hash":"5fe1fb4c64bcf10d8bfe0caf63d2f969ed206a6c","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/clearfix.import.less","hash":"8dd7f85394fc6e232cad232ea54e605a06be002e","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/color.import.less","hash":"5c88b7bc663df13316e3748f8516f4324f603bd2","modified":1477889942561},{"_id":"themes/meteor/source/style/_util/easing.import.less","hash":"69523005d6afbd184cfa91d629cf1a931ebf8fd1","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/helper.import.less","hash":"7baf147d5c4bac8c5ef4b2690af3b185b4df56d2","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/link.import.less","hash":"a6856c0b5017b7bb688d7a2cf2d5f3bd682df6fe","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/normalize.import.less","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/index.import.less","hash":"2a38f287116d66f9848229b59d03464b4f9b18b9","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/scrollbar.import.less","hash":"1a45d8862fafd8d62f4e2562278a88ed3008ac32","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/lesshat.import.less","hash":"491b7bc1426fb35bf17c28418aadab66b480b5e0","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/text.import.less","hash":"3c1b4559dd5cf7b6b37a42ab8b7ebd9e40e2eee9","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/ui.import.less","hash":"b577e1c8092b87f10baef86c0f9d30125b2cdf94","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/typography.import.less","hash":"c8deee0f5ad8b529eeb097d90ef7a3f2f91441f6","modified":1474889374000},{"_id":"source/guide/exposure.md","hash":"6893c7b267318a295ab6b0e9217321b57570cff9","modified":1477242714256},{"_id":"source/guide/links.md","hash":"25c0c110477f71369760a06b5e4e0ced17f884e7","modified":1477238465174},{"_id":"source/guide/query.md","hash":"2778f710129d12fe1fb312bc0a3e4105d5a8e770","modified":1477242714252},{"_id":"source/api/collectionLinks.md","hash":"56d88ef0790046a8072cff0aace7eab16df4057b","modified":1474904935000},{"_id":"source/old_api/accounts-multi.md","hash":"f86155b4d0ff6c8d9c3c5ad883c53eb6625c2b29","modified":1474889325000},{"_id":"source/old_api/accounts.md","hash":"2e04b2e0b51c4037d77aad2bbf6a5f82d3d922ec","modified":1474889325000},{"_id":"source/old_api/assets.md","hash":"23d669772ecc4ec8f1bd5d517bcd8a965fa78dbd","modified":1474889325000},{"_id":"source/old_api/blaze.md","hash":"d75884756afddfd2bc791c3e3384df73e71f70a9","modified":1474889325000},{"_id":"source/old_api/check.md","hash":"170d63a00796364506ee4397241062d2e276d454","modified":1474889325000},{"_id":"source/old_api/collections.md","hash":"1d715fc4a18cc8430248757fa37b14ce57b3730c","modified":1474889325000},{"_id":"source/old_api/connections.md","hash":"dd194f4c3b60bf51779e477580db9325a6dcaafb","modified":1474889325000},{"_id":"source/old_api/core.md","hash":"07aba32faf25ed16fc6442fa59ebaea2ececb16d","modified":1474889325000},{"_id":"source/old_api/ejson.md","hash":"626c38a1341ea12a3f957615e5200092b91963bf","modified":1474889325000},{"_id":"source/old_api/email.md","hash":"97a80f9b11f3c9d6bc7265201527d29bed77083f","modified":1474889325000},{"_id":"source/old_api/http.md","hash":"eb2a09d9f2d65120d688b47e42e1e06b4e153364","modified":1474889325000},{"_id":"source/old_api/methods.md","hash":"2a9c64efb7135baf43a9e88bc4fd06aa6040482d","modified":1474889325000},{"_id":"source/old_api/mobile-config.md","hash":"cc49bf8a8c411d91ca7f584e8761e7e3baeee5c9","modified":1474889325000},{"_id":"source/old_api/packagejs.md","hash":"2da4cb7c02733ed934172dd0ff6d66aafef79610","modified":1474889325000},{"_id":"source/old_api/passwords.md","hash":"d223dbc16d787843fdb10ef421d6f411b5bb1d79","modified":1474889325000},{"_id":"source/old_api/pubsub.md","hash":"ebc3e8107cb22e75191bff600dfd36e43f12eab5","modified":1474889325000},{"_id":"source/old_api/reactive-var.md","hash":"5eaff15aed6dfcfb87c12b0593a60e760d63e801","modified":1474889325000},{"_id":"source/old_api/session.md","hash":"de19fade87018a3a20a26d570feb8112d41daabe","modified":1474889325000},{"_id":"source/old_api/templates.md","hash":"149a1d828bd90b3b0e038d8a41b2ea5491751cb4","modified":1474889325000},{"_id":"source/old_api/timers.md","hash":"9ce32673bd46b7c61662ce708289a46237e6d4d4","modified":1474889325000},{"_id":"source/old_api/tracker.md","hash":"62b255f29d1201c116acc196ce6f76fb38abee25","modified":1474889325000},{"_id":"source/api/collection.md","hash":"56d88ef0790046a8072cff0aace7eab16df4057b","modified":1474904935000},{"_id":"source/links/intro.md","hash":"22563ced472e63aac548720e73c40ab9afdc822b","modified":1474944651000},{"_id":"source/links/addLinks.md","hash":"fb9ff624d61dd6f7c3a801dc9efaafb726e768cf","modified":1474945427000},{"_id":"themes/meteor/source/images/logo.png","hash":"77000ddb64c4ce7c6052165396c095bf56db02df","modified":1477889765000},{"_id":"source/api/reference.md","hash":"c9d62f4f296cda47e8d7fe9c867589cb8db8504d","modified":1476081598852},{"_id":"source/packages/boilerplate.md","hash":"b79d5a279c49629ffec2fae5830d8832e0474061","modified":1476277449040},{"_id":"source/packages/live.md","hash":"1a1e31abcc882e2c4ab4f88051b93828f398da46","modified":1476244662000},{"_id":"source/guide/namedQuery.md","hash":"fb9b64e1178aa6634dd1e1b0fa27367c95a7db64","modified":1476888260769},{"_id":"public/packages/boilerplate.html","hash":"665174f7e1b4feff6855a21d0d55bb44ab33a07a","modified":1476888401514},{"_id":"public/packages/live.html","hash":"0a2e82ff9a2cd1a265b719c224b5d356e8ef51f7","modified":1476888401515},{"_id":"public/index.html","hash":"c2ce0e968ba2673721a92a3e500a0192f8c47443","modified":1522417804583},{"_id":"public/guide/links.html","hash":"c5f969dbf38c8e880c0f298a26d5de4af725a25c","modified":1477242743358},{"_id":"public/guide/query.html","hash":"44cc7663225cd95a1074e35998c6e3f072f7b7a8","modified":1477242743358},{"_id":"public/api/reference.html","hash":"5804cc3431b97d6f22e75bdcaf78a97a7f1ce98c","modified":1476085992422},{"_id":"public/guide/exposure.html","hash":"8b234e6ae9c612847fd356e09c78d9a8a4d44bb8","modified":1477242743358},{"_id":"public/guide/namedQuery.html","hash":"18e7c7262deab6642396e1162075d13afaa43464","modified":1476888401516},{"_id":"source/api/exposure.md","hash":"b5ec5e9db871bb693b9e25ab6cf5d59ad0702b54","modified":1476888279565},{"_id":"source/api/namedQuery.md","hash":"eda9a78bc73477331f156a28948402034f259e07","modified":1476245109000},{"_id":"source/api/links.md","hash":"4933e81d277eb4f400180ee17100d0c1dfd8e5d5","modified":1476245463000},{"_id":"source/api/query.md","hash":"70ad66dd1db063ce9788d30386c00b8618adcb8f","modified":1477238135558},{"_id":"public/api/exposure.html","hash":"7bb3d6eb402621c8175d21560f69fbbfb0b870bf","modified":1476888401516},{"_id":"public/api/namedQuery.html","hash":"307f9da138f1b2e7f72b5bee136e74017b0c3da7","modified":1476888401516},{"_id":"public/api/links.html","hash":"603498b87891bb87385fdd492fee5b189d8d865b","modified":1476888401516},{"_id":"public/api/query.html","hash":"1e98a577a8bc9afb73a3ee2c15e4b359557890d2","modified":1477242743359},{"_id":"source/gettingStarted.md","hash":"7199eaf4f890d3f93a33aa637eb36176d62d7743","modified":1477475995711},{"_id":"source/chapters/1/intro.md","hash":"cb2971a1754a57e54c83a23157aa213bbbd41526","modified":1520594913090},{"_id":"source/chapters/1/collections.md","hash":"cf74c6feffb69bbbc55983924bde1609fd565873","modified":1520524429078},{"_id":"source/chapters/1/methods.md","hash":"11db47129eeda370d9afacfa74bcaa49af3f6ce6","modified":1522417454548},{"_id":"source/chapters/1/pubsub.md","hash":"cf56584b2bc44923b8132199d667875573f56a2a","modified":1520595003064},{"_id":"source/chapters/1/reactivity.md","hash":"52ba34f85e2782568bc760b67303f255c007d08e","modified":1520524429083},{"_id":"source/chapters/1/users.md","hash":"d19779346e35124c76eba98327de154e17d88aa0","modified":1520524429084},{"_id":"source/chapters/1/security.md","hash":"62ed45ca9d6ad9fcc04efd65d9c91dc6021c439a","modified":1520524429084},{"_id":"source/chapters/1/meteorSnacks.md","hash":"a79bdb5d941f78e389069200801cc4537c43bd89","modified":1520524429081},{"_id":"public/chapters/1/reactivity.html","hash":"54970acb3dc4f3627c278c818d94bf8a214256fc","modified":1520595083353},{"_id":"public/chapters/1/intro.html","hash":"e9f572f91560bb203324e270621aa63f098451c7","modified":1520595083353},{"_id":"public/chapters/1/collections.html","hash":"57d2d088ed8413821975c93134d9a1cf2cd13006","modified":1520595083353},{"_id":"public/chapters/1/methods.html","hash":"b598cd826e52eb3fd20b87b34b0b582b37eed326","modified":1522417804583},{"_id":"public/chapters/1/pubsub.html","hash":"37fec96ed2df55a0a9ef92b25d6bd38cb5cb4ee8","modified":1520595083353},{"_id":"public/chapters/1/users.html","hash":"e2b562c6e1995db44012c4d1a478bf0a08bb0e91","modified":1520595083353},{"_id":"public/chapters/1/security.html","hash":"2737ad5a231b3b5aa868805eb72e991753bfd98a","modified":1520595083353},{"_id":"public/chapters/1/meteorSnacks.html","hash":"e36d193ae47415a58998681f69a84aad40ff128c","modified":1520595083353},{"_id":"source/chapters/2/blaze.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478600232572},{"_id":"source/chapters/2/react.md","hash":"c9946991b722c8e858ce1cad425bc72b39ad005c","modified":1496388591575},{"_id":"source/chapters/2/intro.md","hash":"d0f42b6b850ab7dabf7ca79455ac4ad562dca7fc","modified":1510320330252},{"_id":"source/chapters/1/conclusion.md","hash":"9eccbb93600975cd1757971b05f2ab06f1852e44","modified":1520524429079},{"_id":"public/chapters/2/blaze.html","hash":"5fe67948b8d91195c5cb4d2fd8a04960a3d10377","modified":1478606307193},{"_id":"public/chapters/1/conclusion.html","hash":"400cbfdd96b679ebcf727be19f7f65f0e9be5efb","modified":1520595083352},{"_id":"public/chapters/2/react.html","hash":"309d9e152c2761074fb3109dde57101e2aafb280","modified":1520595083354},{"_id":"public/chapters/2/intro.html","hash":"de9e88de4c830d7f06716d94075d2679c0b55985","modified":1520595083353},{"_id":"source/chapters/2/conclusion.md","hash":"79f51574ff02cf98e8cb66e92d4534fc0df22d26","modified":1520282492064},{"_id":"themes/meteor/source/images/OSXsmall.png","hash":"b4bee61cda163ca0df6c258c690e222f3fbebb78","modified":1508484836976},{"_id":"themes/meteor/source/images/tuxSmall.png","hash":"05a369c1b8db9cc8b2d1e35ee3ec814cceaddc21","modified":1508484836976},{"_id":"themes/meteor/source/images/windowsSmall.png","hash":"2c2e638acae06d0c25c0575d1f697a0f8a21a1a0","modified":1508484836976},{"_id":"source/chapters/3/devtools.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508760585205},{"_id":"source/chapters/3/fixtures.md","hash":"dc1e1ef0513c62a4d043265f5bf60ba0e69f746f","modified":1508926625389},{"_id":"source/chapters/3/reusable-modules.md","hash":"2d7cfc86989315c5172e18bfe55021dd772cd65c","modified":1508917989387},{"_id":"source/chapters/3/structure.md","hash":"7a756a3191eb69e172c2a98255a868769524bcae","modified":1508929763021},{"_id":"source/chapters/3/uploads.md","hash":"86e6dd86cec2befeba48524c49a130a693ffa42b","modified":1508922004378},{"_id":"source/chapters/3/emails.md","hash":"116fdedf481cb6a2eaf57736c2478e6991426533","modified":1508930053435},{"_id":"source/chapters/3/events.md","hash":"c3924617f1be95cf1bbaef2e9ef723631e1a7f3c","modified":1508924426387},{"_id":"source/chapters/3/intro.md","hash":"d10d8d0b606a831df5e8a42295bef780276ca8ae","modified":1510317917017},{"_id":"source/chapters/3/linting.md","hash":"513d0a59bc42f4f91f25bb8d79dda2184afdba41","modified":1520282492068},{"_id":"source/chapters/3/methods.md","hash":"e5b3b7cd723f63b3c0a9bb0299705cb1acf50397","modified":1508924890949},{"_id":"source/chapters/3/microservices.md","hash":"2b2f8827964a6f5f0ad7adeb77de86ecf4ddb6ad","modified":1508925651999},{"_id":"source/chapters/3/services.md","hash":"a65fb78269111eb652f080c31a84bdf44c8aca31","modified":1520282492070},{"_id":"source/chapters/3/persistence-layer.md","hash":"3c93d4c402bba22c7c8bcac937990157af9b8515","modified":1508930817604},{"_id":"source/chapters/3/testing.md","hash":"96c85a5da8fac788896193f6f704541dc3acbd69","modified":1508923468963},{"_id":"source/chapters/3/publications.md","hash":"16e3603bc97b064ffa3eae3e046ff2dbc377fa7c","modified":1508924952955},{"_id":"source/chapters/3/conclusion.md","hash":"32e232d95db63356a6af259e7c3e8a4bdab82ece","modified":1510317917013},{"_id":"public/chapters/2/conclusion.html","hash":"c766d6132cfff498c09a0907331c499686e90b5e","modified":1520595083353},{"_id":"public/chapters/3/uploads.html","hash":"4fd659272347953f2658c6e4b74b24825df07a2c","modified":1520595083353},{"_id":"public/chapters/3/conclusion.html","hash":"75297e7a9e2f15989e5db98202283cba70e642de","modified":1520595083352},{"_id":"public/chapters/3/intro.html","hash":"4eb058f128c105a76c0d0cea9d10381e542271ca","modified":1520595083354},{"_id":"public/chapters/3/events.html","hash":"42b7722cead8824fe296f09ac54c3ecfab3cf1b2","modified":1520595083355},{"_id":"public/chapters/3/structure.html","hash":"5521bd59663e20d49961236cfc52726c4fad88f5","modified":1520595083356},{"_id":"public/chapters/3/testing.html","hash":"aa0c89e2d75d04196963790b3842684859b918eb","modified":1520595083356},{"_id":"public/chapters/3/services.html","hash":"ec566820a7b88b7d27beda2b4c30a7b943d8b9e4","modified":1520595083356},{"_id":"public/chapters/3/microservices.html","hash":"82a8037080558323ebc22969361a7420ffac056b","modified":1520595083356},{"_id":"public/chapters/3/emails.html","hash":"92681378d0886ece60603193a979c09290a8f924","modified":1520595083354},{"_id":"public/chapters/3/methods.html","hash":"e3e15e249c24dbe15471a689a4597a68b4cf86e8","modified":1520595083355},{"_id":"public/chapters/3/linting.html","hash":"f9f331a2fe7d763d46d2a6617e17539ce5e5d9f1","modified":1520595083355},{"_id":"public/chapters/3/reusable-modules.html","hash":"9d649a6673142e4ad150db2f491d428a214474f9","modified":1520595083356},{"_id":"public/chapters/3/persistence-layer.html","hash":"7a34b728c4eb1a67db371874aaa89820e3cf5212","modified":1520595083356},{"_id":"public/chapters/3/fixtures.html","hash":"072cc15cf2cddf749beb928543c80de1e7489cbb","modified":1520595083355},{"_id":"public/chapters/3/publications.html","hash":"69c67bc04dfc3f66dfeb0630b3c0e405d222d1eb","modified":1520595083356},{"_id":"public/fonts/percolate.eot","hash":"9f46f6ed3453808cb206b5b8c7c399f8c7c50b4b","modified":1508930984596},{"_id":"public/fonts/percolate.woff","hash":"f475ff4ac3d777c8d56bc7040d6f8576b86398a5","modified":1508930984596},{"_id":"public/fonts/percolate.ttf","hash":"ae93904a100e0c875bb382cb88709de4cd8b6a37","modified":1508930984596},{"_id":"public/images/logo-coralspace-left.svg","hash":"ce3fa809cc5498c23597f68fc7f94d72f0deb453","modified":1508930984596},{"_id":"public/images/favicon.png","hash":"c019ad5135fb00e9d5a8a000a7162f4876cf583b","modified":1508930984596},{"_id":"public/images/icon-white.svg","hash":"037afdf5842532cdc696bd93541be8a273ddf9dc","modified":1508930984597},{"_id":"public/images/OSXsmall.png","hash":"b4bee61cda163ca0df6c258c690e222f3fbebb78","modified":1508930984597},{"_id":"public/images/logo.png","hash":"77000ddb64c4ce7c6052165396c095bf56db02df","modified":1508930984597},{"_id":"public/images/tuxSmall.png","hash":"05a369c1b8db9cc8b2d1e35ee3ec814cceaddc21","modified":1508930984598},{"_id":"public/images/windowsSmall.png","hash":"2c2e638acae06d0c25c0575d1f697a0f8a21a1a0","modified":1508930984598},{"_id":"public/script/main.js","hash":"aa6f1d81ab38e3d8e0dbdef9a574d2330f8ff5a4","modified":1508930984615},{"_id":"public/script/smooth-scroll.min.js","hash":"c80cccc6c68f32b348b3d8459eb89686871b2e38","modified":1508930984615},{"_id":"public/fonts/percolate.svg","hash":"b7c6df677a47fd66316ce90839550bfad6fd462f","modified":1508930984615},{"_id":"public/style/style.css","hash":"8e03b766cac454473fb5f5779a73e34e40669667","modified":1508930984905},{"_id":"source/chapters/2/css.md","hash":"ddaef8a1fb5dd5075073be4b3360ceb5130c439d","modified":1520282492064},{"_id":"source/chapters/4/conclusion.md","hash":"32e232d95db63356a6af259e7c3e8a4bdab82ece","modified":1509703037588},{"_id":"source/chapters/4/emails.md","hash":"116fdedf481cb6a2eaf57736c2478e6991426533","modified":1509703037588},{"_id":"source/chapters/4/events.md","hash":"c3924617f1be95cf1bbaef2e9ef723631e1a7f3c","modified":1509703037596},{"_id":"source/chapters/4/linting.md","hash":"5601084345a3a0a66172706f4ba6ea22491f7954","modified":1509703037604},{"_id":"source/chapters/4/intro.md","hash":"d10d8d0b606a831df5e8a42295bef780276ca8ae","modified":1509705665384},{"_id":"source/chapters/4/methods.md","hash":"e5b3b7cd723f63b3c0a9bb0299705cb1acf50397","modified":1509703037616},{"_id":"source/chapters/4/microservices.md","hash":"2b2f8827964a6f5f0ad7adeb77de86ecf4ddb6ad","modified":1509703037616},{"_id":"source/chapters/4/persistence-layer.md","hash":"3c93d4c402bba22c7c8bcac937990157af9b8515","modified":1509703037616},{"_id":"source/chapters/4/publications.md","hash":"16e3603bc97b064ffa3eae3e046ff2dbc377fa7c","modified":1509703037616},{"_id":"source/chapters/4/reusable-modules.md","hash":"2d7cfc86989315c5172e18bfe55021dd772cd65c","modified":1509703037616},{"_id":"source/chapters/4/services.md","hash":"60bb9191fca8513917d5be4458464ceb5d8abbb7","modified":1509703037616},{"_id":"source/chapters/4/testing.md","hash":"96c85a5da8fac788896193f6f704541dc3acbd69","modified":1509703037624},{"_id":"source/chapters/4/uploads.md","hash":"86e6dd86cec2befeba48524c49a130a693ffa42b","modified":1509703037624},{"_id":"source/chapters/4/fixtures.md","hash":"dc1e1ef0513c62a4d043265f5bf60ba0e69f746f","modified":1509703037604},{"_id":"source/chapters/4/structure.md","hash":"7a756a3191eb69e172c2a98255a868769524bcae","modified":1509703037616},{"_id":"source/chapters/3/react.md","hash":"c9946991b722c8e858ce1cad425bc72b39ad005c","modified":1496388591576},{"_id":"public/sitemap.xml","hash":"d543bfaed1a70db8af5c4c973fa0b038aff8569b","modified":1522417804546},{"_id":"public/chapters/2/css.html","hash":"3d472d470dbfaf4b76d24643a24e2d0130f38356","modified":1520595083356},{"_id":"source/react/forms.md","hash":"c2d50988f6dc1fd46c940852ddca1e5d9978d23f","modified":1535719879866},{"_id":"source/react/setting-up.md","hash":"cffb5d5a6ef90ba4c1d5353cd1609d2fce91a2d5","modified":1535719879867},{"_id":"source/recipes/queries.md","hash":"835f2a9f28e8b3421d3acdce0fed4b7c611e062e","modified":1535719879868},{"_id":"source/react/testing.md","hash":"3aa65338002728218a58408dbe8a25743d2c2848","modified":1535867087506},{"_id":"source/react/styling.md","hash":"fe66232a074c07e05853a13fb2a041892a3f11bf","modified":1535719879867},{"_id":"source/starterpack/deployment.md","hash":"956f6022c882c9fcab095593a2aa5d8cd0860c8e","modified":1546618499786},{"_id":"source/recipes/mutations.md","hash":"3bfea45700ea9ae10b603ecf83da5fba58f87e73","modified":1535719879868},{"_id":"source/recipes/uploads.md","hash":"4082def1d1be24451286b4780f567107a60daa11","modified":1535719879868},{"_id":"source/starterpack/accounts.md","hash":"4f96d7b5a033b5b619df91b4a5e4beb1ce2ae943","modified":1535719879868},{"_id":"source/starterpack/events.md","hash":"09213207f04dafbf3e36e27f72568209ee5b5e78","modified":1535719879877},{"_id":"source/starterpack/morpher.md","hash":"8c3e0c831a58c964c4a11d310238f6e0d0013d2a","modified":1535719879869},{"_id":"source/starterpack/reactivity.md","hash":"c712caf151de18fa71927390ef67382c886dd08a","modified":1535719879869},{"_id":"source/starterpack/relations.md","hash":"90242ab99d717dd0e71f5ecfbc330337189cd701","modified":1535719879869},{"_id":"source/starterpack/security.md","hash":"fef1828e2a5c3b9c7c77f454c5be8a525f6907ca","modified":1535719879870},{"_id":"source/starterpack/setting-up.md","hash":"2a7f3dbfdbd957bc37d4f576419598a81bac0720","modified":1535719879870},{"_id":"source/starterpack/services.md","hash":"ca5ce7b129da8c65c829cd2c146f9709cb4fb2fb","modified":1535719879876},{"_id":"source/starterpack/structure.md","hash":"db5958a5d3f014ccad200ff15e82c6de4b57e40e","modified":1535719879871},{"_id":"source/starterpack/testing.md","hash":"d5ea52fa82ab795853e8bd3bc4d7b7e21abbe888","modified":1535719879871}],"Category":[],"Data":[],"Page":[{"title":"Welcome","description":"Discovering Big Bang","disqusPage":"Welcome","_content":"\n<h1>Hello and Welcome!</h1>\n\nThe BigBang is not a framework, it's mostly a collection of elements put together that work very well, uncovering a full stack GraphQL framework with lots of goodies and fast prototyping abilities.\n\nThe aim is to bring order into the JavaScript world where you are exposed to many options of doing the same things, our solution helps on that regard allowing you to:\n\n- Rapidly create a project using GraphQL API\n- Tight integration with an account system\n- Ability to create APIs for Mobile Web Applications with ease\n- Ability to have reactivity of your data in a scaleable manner\n- Ability to use MongoDB with relations that scale\n\nWe are using the following web-technologies:\n\n- Meteor (Bundler and Packaging system)\n- MongoDB\n- Apollo & GraphQL\n- Grapher (Relational support for MongoDB)\n- React\n\nThe principles it adheres to:\n\n- Ability to rapidly create prototypes\n- Ability to evolve your prototypes into scalable, solid, well-tested products\n- Focus on developer experience rather than implementation details\n- We value simplicity and code elegance over performance\n\nTo get started:\n\n```\nnpm i -g yo generator-bigbang\nyo bang\n```\n\nLet's embark together on an EPIC journey, we promise that you will not be dissapointed!\n","source":"index.md","raw":"---\ntitle: Welcome\ndescription: 'Discovering Big Bang'\ndisqusPage: 'Welcome'\n---\n\n<h1>Hello and Welcome!</h1>\n\nThe BigBang is not a framework, it's mostly a collection of elements put together that work very well, uncovering a full stack GraphQL framework with lots of goodies and fast prototyping abilities.\n\nThe aim is to bring order into the JavaScript world where you are exposed to many options of doing the same things, our solution helps on that regard allowing you to:\n\n- Rapidly create a project using GraphQL API\n- Tight integration with an account system\n- Ability to create APIs for Mobile Web Applications with ease\n- Ability to have reactivity of your data in a scaleable manner\n- Ability to use MongoDB with relations that scale\n\nWe are using the following web-technologies:\n\n- Meteor (Bundler and Packaging system)\n- MongoDB\n- Apollo & GraphQL\n- Grapher (Relational support for MongoDB)\n- React\n\nThe principles it adheres to:\n\n- Ability to rapidly create prototypes\n- Ability to evolve your prototypes into scalable, solid, well-tested products\n- Focus on developer experience rather than implementation details\n- We value simplicity and code elegance over performance\n\nTo get started:\n\n```\nnpm i -g yo generator-bigbang\nyo bang\n```\n\nLet's embark together on an EPIC journey, we promise that you will not be dissapointed!\n","date":"2018-08-31T12:51:19.866Z","updated":"2018-08-31T12:51:19.866Z","path":"index.html","_id":"ciurgklpx0000zwjxxxu58myv","comments":1,"layout":"page","content":"<h1>Hello and Welcome!</h1>\n\n<p>The BigBang is not a framework, it’s mostly a collection of elements put together that work very well, uncovering a full stack GraphQL framework with lots of goodies and fast prototyping abilities.</p>\n<p>The aim is to bring order into the JavaScript world where you are exposed to many options of doing the same things, our solution helps on that regard allowing you to:</p>\n<ul>\n<li>Rapidly create a project using GraphQL API</li>\n<li>Tight integration with an account system</li>\n<li>Ability to create APIs for Mobile Web Applications with ease</li>\n<li>Ability to have reactivity of your data in a scaleable manner</li>\n<li>Ability to use MongoDB with relations that scale</li>\n</ul>\n<p>We are using the following web-technologies:</p>\n<ul>\n<li>Meteor (Bundler and Packaging system)</li>\n<li>MongoDB</li>\n<li>Apollo &amp; GraphQL</li>\n<li>Grapher (Relational support for MongoDB)</li>\n<li>React</li>\n</ul>\n<p>The principles it adheres to:</p>\n<ul>\n<li>Ability to rapidly create prototypes</li>\n<li>Ability to evolve your prototypes into scalable, solid, well-tested products</li>\n<li>Focus on developer experience rather than implementation details</li>\n<li>We value simplicity and code elegance over performance</li>\n</ul>\n<p>To get started:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> -g yo generator-bigbang</span><br><span class=\"line\">yo bang</span><br></pre></td></tr></table></figure>\n<p>Let’s embark together on an EPIC journey, we promise that you will not be dissapointed!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Hello and Welcome!</h1>\n\n<p>The BigBang is not a framework, it’s mostly a collection of elements put together that work very well, uncovering a full stack GraphQL framework with lots of goodies and fast prototyping abilities.</p>\n<p>The aim is to bring order into the JavaScript world where you are exposed to many options of doing the same things, our solution helps on that regard allowing you to:</p>\n<ul>\n<li>Rapidly create a project using GraphQL API</li>\n<li>Tight integration with an account system</li>\n<li>Ability to create APIs for Mobile Web Applications with ease</li>\n<li>Ability to have reactivity of your data in a scaleable manner</li>\n<li>Ability to use MongoDB with relations that scale</li>\n</ul>\n<p>We are using the following web-technologies:</p>\n<ul>\n<li>Meteor (Bundler and Packaging system)</li>\n<li>MongoDB</li>\n<li>Apollo &amp; GraphQL</li>\n<li>Grapher (Relational support for MongoDB)</li>\n<li>React</li>\n</ul>\n<p>The principles it adheres to:</p>\n<ul>\n<li>Ability to rapidly create prototypes</li>\n<li>Ability to evolve your prototypes into scalable, solid, well-tested products</li>\n<li>Focus on developer experience rather than implementation details</li>\n<li>We value simplicity and code elegance over performance</li>\n</ul>\n<p>To get started:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> -g yo generator-bigbang</span><br><span class=\"line\">yo bang</span><br></pre></td></tr></table></figure>\n<p>Let’s embark together on an EPIC journey, we promise that you will not be dissapointed!</p>\n"},{"title":"Forms","description":"Easily create and configure forms","disqusPage":"React:Forms","_content":"\n# Forms\n\nOne of the nicest package out there for forms is `uniforms`.\n\nIn this chapter we'll explore how to use uniforms together with Antd design.\n\n```js\nmeteor npm i -S uniforms uniforms-antd antd simpl-schema\n```\n\nLet's create our first form:\n\n```js\n// src/ui/pages/Login/index.js\nimport React from 'react';\nimport SimpleSchema from 'simpl-schema';\nimport { AutoForm, AutoField, ErrorField } from 'uniforms-antd';\nimport { Button, notification } from 'antd';\n\nclass Login extends React.Component {\n  onSubmit = data => {\n    const { history } = this.props;\n\n    console.log(data);\n\n    notification.open({\n      message: 'Form submitted, check your console!',\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"c-Login\">\n        <AutoForm schema={LoginSchema} onSubmit={this.onSubmit} id=\"login\">\n          <AutoField\n            name=\"email\"\n            placeholder=\"Enter your email address\"\n            label={false}\n          />\n          <ErrorField name=\"email\" />\n\n          <AutoField\n            name=\"password\"\n            placeholder=\"Password\"\n            label={false}\n            type=\"password\"\n          />\n          <ErrorField name=\"password\" />\n\n          <Button type=\"primary\" htmlType=\"submit\">\n            Login\n          </Button>\n        </AutoForm>\n      </div>\n    );\n  }\n}\n\n// This contains the validation logic for the form\n// Refer to https://www.npmjs.com/package/simpl-schema\nconst LoginSchema = new SimpleSchema({\n  email: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n  },\n  password: { type: String },\n});\n\nexport default Login;\n```\n\nDon't forget to add it as a route:\n\n```js\n// src/ui/main/routes.js\nimport Login from '../../pages/Login';\n\nconst routes = [\n  {\n    path: '/login',\n    component: Login,\n  },\n];\n```\n\nNow open up your browser: http://localhost:3000/login and enjoy your first form.\n\nPlease refer to uniforms documentation to find out more:\nhttps://github.com/vazco/uniforms/blob/master/INTRODUCTION.md\n","source":"react/forms.md","raw":"---\ntitle: Forms\ndescription: 'Easily create and configure forms'\ndisqusPage: 'React:Forms'\n---\n\n# Forms\n\nOne of the nicest package out there for forms is `uniforms`.\n\nIn this chapter we'll explore how to use uniforms together with Antd design.\n\n```js\nmeteor npm i -S uniforms uniforms-antd antd simpl-schema\n```\n\nLet's create our first form:\n\n```js\n// src/ui/pages/Login/index.js\nimport React from 'react';\nimport SimpleSchema from 'simpl-schema';\nimport { AutoForm, AutoField, ErrorField } from 'uniforms-antd';\nimport { Button, notification } from 'antd';\n\nclass Login extends React.Component {\n  onSubmit = data => {\n    const { history } = this.props;\n\n    console.log(data);\n\n    notification.open({\n      message: 'Form submitted, check your console!',\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"c-Login\">\n        <AutoForm schema={LoginSchema} onSubmit={this.onSubmit} id=\"login\">\n          <AutoField\n            name=\"email\"\n            placeholder=\"Enter your email address\"\n            label={false}\n          />\n          <ErrorField name=\"email\" />\n\n          <AutoField\n            name=\"password\"\n            placeholder=\"Password\"\n            label={false}\n            type=\"password\"\n          />\n          <ErrorField name=\"password\" />\n\n          <Button type=\"primary\" htmlType=\"submit\">\n            Login\n          </Button>\n        </AutoForm>\n      </div>\n    );\n  }\n}\n\n// This contains the validation logic for the form\n// Refer to https://www.npmjs.com/package/simpl-schema\nconst LoginSchema = new SimpleSchema({\n  email: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n  },\n  password: { type: String },\n});\n\nexport default Login;\n```\n\nDon't forget to add it as a route:\n\n```js\n// src/ui/main/routes.js\nimport Login from '../../pages/Login';\n\nconst routes = [\n  {\n    path: '/login',\n    component: Login,\n  },\n];\n```\n\nNow open up your browser: http://localhost:3000/login and enjoy your first form.\n\nPlease refer to uniforms documentation to find out more:\nhttps://github.com/vazco/uniforms/blob/master/INTRODUCTION.md\n","date":"2018-08-31T12:51:19.866Z","updated":"2018-08-31T12:51:19.866Z","path":"react/forms.html","comments":1,"layout":"page","_id":"cjqqmfrgz0000s9a49xvhpx3b","content":"<h1 id=\"Forms\"><a href=\"#Forms\" class=\"headerlink\" title=\"Forms\"></a>Forms</h1><p>One of the nicest package out there for forms is <code>uniforms</code>.</p>\n<p>In this chapter we’ll explore how to use uniforms together with Antd design.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm i -S uniforms uniforms-antd antd simpl-schema</span><br></pre></td></tr></table></figure>\n<p>Let’s create our first form:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/pages/Login/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleSchema <span class=\"keyword\">from</span> <span class=\"string\">'simpl-schema'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AutoForm, AutoField, ErrorField &#125; <span class=\"keyword\">from</span> <span class=\"string\">'uniforms-antd'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button, notification &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  onSubmit = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; history &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    notification.open(&#123;</span><br><span class=\"line\">      message: <span class=\"string\">'Form submitted, check your console!'</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"c-Login\"</span>&gt;</span><br><span class=\"line\">        &lt;AutoForm schema=&#123;LoginSchema&#125; onSubmit=&#123;<span class=\"keyword\">this</span>.onSubmit&#125; id=<span class=\"string\">\"login\"</span>&gt;</span><br><span class=\"line\">          &lt;AutoField</span><br><span class=\"line\">            name=<span class=\"string\">\"email\"</span></span><br><span class=\"line\">            placeholder=<span class=\"string\">\"Enter your email address\"</span></span><br><span class=\"line\">            label=&#123;<span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">          &lt;ErrorField name=<span class=\"string\">\"email\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;AutoField</span><br><span class=\"line\">            name=<span class=\"string\">\"password\"</span></span><br><span class=\"line\">            placeholder=<span class=\"string\">\"Password\"</span></span><br><span class=\"line\">            label=&#123;<span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">            type=<span class=\"string\">\"password\"</span></span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">          &lt;ErrorField name=<span class=\"string\">\"password\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;Button type=<span class=\"string\">\"primary\"</span> htmlType=<span class=\"string\">\"submit\"</span>&gt;</span><br><span class=\"line\">            Login</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>AutoForm&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ This contains the validation logic for the form</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ Refer to https:/</span><span class=\"regexp\">/www.npmjs.com/</span>package/simpl-schema</span><br><span class=\"line\"><span class=\"keyword\">const</span> LoginSchema = <span class=\"keyword\">new</span> SimpleSchema(&#123;</span><br><span class=\"line\">  email: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    regEx: SimpleSchema.RegEx.Email,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  password: &#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Login;</span><br></pre></td></tr></table></figure>\n<p>Don’t forget to add it as a route:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/main/routes.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">'../../pages/Login'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/login'</span>,</span><br><span class=\"line\">    component: Login,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>Now open up your browser: <a href=\"http://localhost:3000/login\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/login</a> and enjoy your first form.</p>\n<p>Please refer to uniforms documentation to find out more:\n<a href=\"https://github.com/vazco/uniforms/blob/master/INTRODUCTION.md\" target=\"_blank\" rel=\"noopener\">https://github.com/vazco/uniforms/blob/master/INTRODUCTION.md</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Forms\"><a href=\"#Forms\" class=\"headerlink\" title=\"Forms\"></a>Forms</h1><p>One of the nicest package out there for forms is <code>uniforms</code>.</p>\n<p>In this chapter we’ll explore how to use uniforms together with Antd design.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm i -S uniforms uniforms-antd antd simpl-schema</span><br></pre></td></tr></table></figure>\n<p>Let’s create our first form:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/pages/Login/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleSchema <span class=\"keyword\">from</span> <span class=\"string\">'simpl-schema'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AutoForm, AutoField, ErrorField &#125; <span class=\"keyword\">from</span> <span class=\"string\">'uniforms-antd'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button, notification &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  onSubmit = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; history &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    notification.open(&#123;</span><br><span class=\"line\">      message: <span class=\"string\">'Form submitted, check your console!'</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"c-Login\"</span>&gt;</span><br><span class=\"line\">        &lt;AutoForm schema=&#123;LoginSchema&#125; onSubmit=&#123;<span class=\"keyword\">this</span>.onSubmit&#125; id=<span class=\"string\">\"login\"</span>&gt;</span><br><span class=\"line\">          &lt;AutoField</span><br><span class=\"line\">            name=<span class=\"string\">\"email\"</span></span><br><span class=\"line\">            placeholder=<span class=\"string\">\"Enter your email address\"</span></span><br><span class=\"line\">            label=&#123;<span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">          &lt;ErrorField name=<span class=\"string\">\"email\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;AutoField</span><br><span class=\"line\">            name=<span class=\"string\">\"password\"</span></span><br><span class=\"line\">            placeholder=<span class=\"string\">\"Password\"</span></span><br><span class=\"line\">            label=&#123;<span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">            type=<span class=\"string\">\"password\"</span></span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">          &lt;ErrorField name=<span class=\"string\">\"password\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;Button type=<span class=\"string\">\"primary\"</span> htmlType=<span class=\"string\">\"submit\"</span>&gt;</span><br><span class=\"line\">            Login</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>AutoForm&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ This contains the validation logic for the form</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ Refer to https:/</span><span class=\"regexp\">/www.npmjs.com/</span>package/simpl-schema</span><br><span class=\"line\"><span class=\"keyword\">const</span> LoginSchema = <span class=\"keyword\">new</span> SimpleSchema(&#123;</span><br><span class=\"line\">  email: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    regEx: SimpleSchema.RegEx.Email,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  password: &#123; <span class=\"attr\">type</span>: <span class=\"built_in\">String</span> &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Login;</span><br></pre></td></tr></table></figure>\n<p>Don’t forget to add it as a route:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/main/routes.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">'../../pages/Login'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/login'</span>,</span><br><span class=\"line\">    component: Login,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>Now open up your browser: <a href=\"http://localhost:3000/login\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/login</a> and enjoy your first form.</p>\n<p>Please refer to uniforms documentation to find out more:\n<a href=\"https://github.com/vazco/uniforms/blob/master/INTRODUCTION.md\" target=\"_blank\" rel=\"noopener\">https://github.com/vazco/uniforms/blob/master/INTRODUCTION.md</a></p>\n"},{"title":"Setting Up","description":"Setting Up","disqusPage":"Starterpack:Setting Up","_content":"\n# Setting Up\n\nSo, let's get started with React, let's connect to Apollo, add some routing, and see our first query!\n\nFirst things first, let's setup our structure. As you know, our client code will exist in `src/ui`\n\n```\nmeteor npm i -S react react-dom react-router react-router-dom\n```\n\n```js\n// src/ui/main/index.js\nimport React, { Component, Fragment } from 'react';\nimport { Route } from 'react-router';\nimport routes from './routes';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Fragment>\n        {routes.map((route, idx) => (\n          <Route key={idx} exact={true} {...route} />\n        ))}\n      </Fragment>\n    );\n  }\n}\n```\n\nThe routes will look like this:\n\n```js\n// src/ui/main/routes.js\nimport Home from '../pages/Home';\n\n// The properties of this routes can be found here:\n// https://reacttraining.com/react-router/core/api/Route/route-props\nexport default [\n  {\n    path: '/',\n    component: Home,\n  },\n];\n```\n\nLet's create a dummy Home page:\n\n```js\n// src/ui/pages/Home/index.js\nexport default () => {\n  <h1>Home Page</h1>;\n};\n```\n\nNow we need to initialize all of this. And to do so, we go in our `src/ui/startup/client` folder.\n\nFirst let's boot up our Apollo Client:\n\n```js\n// src/startup/client/apollo.js\nimport { initialize } from 'meteor/cultofcoders:apollo';\n\nconst { client } = initialize();\n\nexport default client;\n```\n\nNow let's start rendering!\n\n```js\n// src/ui/startup/client/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from '../../ui/main';\nimport apolloClient from './apollo';\n\nconst ApolloApp = () => (\n  <ApolloProvider client={apolloClient}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </ApolloProvider>\n);\n\n// Note: If you don't want to use SSR, replace `ReactDOM.hydrate` with `ReactDOM.render`.\nReactDOM.hydrate(<ApolloApp />, document.getElementById('react-root'));\n```\n\n## Server Side Rendering\n\nPerfect, now the next step is to enable Server Side Rendering (SSR). Which allows the server to render the application extremely fast.\n\n```\nmeteor add server-render\n```\n\n```js\n// src/startup/server/ssr.js\n\n// And don't forget to import this file from your index.js file\nimport React from 'react';\nimport { StaticRouter } from 'react-router';\n\nimport { getRenderer } from 'meteor/cultofcoders:apollo';\nimport { onPageLoad } from 'meteor/server-render';\n\nimport { server } from './apollo';\nimport App from '../../ui/main';\n\nconst render = getRenderer({\n  app: sink => (\n    <StaticRouter location={sink.request.url} context={{}}>\n      <App />\n    </StaticRouter>\n  ),\n  server,\n});\n\n// hanlde SSR\nonPageLoad(render);\n```\n\nYou're set in place to start rocking your app!\n","source":"react/setting-up.md","raw":"---\ntitle: Setting Up\ndescription: 'Setting Up'\ndisqusPage: 'Starterpack:Setting Up'\n---\n\n# Setting Up\n\nSo, let's get started with React, let's connect to Apollo, add some routing, and see our first query!\n\nFirst things first, let's setup our structure. As you know, our client code will exist in `src/ui`\n\n```\nmeteor npm i -S react react-dom react-router react-router-dom\n```\n\n```js\n// src/ui/main/index.js\nimport React, { Component, Fragment } from 'react';\nimport { Route } from 'react-router';\nimport routes from './routes';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Fragment>\n        {routes.map((route, idx) => (\n          <Route key={idx} exact={true} {...route} />\n        ))}\n      </Fragment>\n    );\n  }\n}\n```\n\nThe routes will look like this:\n\n```js\n// src/ui/main/routes.js\nimport Home from '../pages/Home';\n\n// The properties of this routes can be found here:\n// https://reacttraining.com/react-router/core/api/Route/route-props\nexport default [\n  {\n    path: '/',\n    component: Home,\n  },\n];\n```\n\nLet's create a dummy Home page:\n\n```js\n// src/ui/pages/Home/index.js\nexport default () => {\n  <h1>Home Page</h1>;\n};\n```\n\nNow we need to initialize all of this. And to do so, we go in our `src/ui/startup/client` folder.\n\nFirst let's boot up our Apollo Client:\n\n```js\n// src/startup/client/apollo.js\nimport { initialize } from 'meteor/cultofcoders:apollo';\n\nconst { client } = initialize();\n\nexport default client;\n```\n\nNow let's start rendering!\n\n```js\n// src/ui/startup/client/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from '../../ui/main';\nimport apolloClient from './apollo';\n\nconst ApolloApp = () => (\n  <ApolloProvider client={apolloClient}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </ApolloProvider>\n);\n\n// Note: If you don't want to use SSR, replace `ReactDOM.hydrate` with `ReactDOM.render`.\nReactDOM.hydrate(<ApolloApp />, document.getElementById('react-root'));\n```\n\n## Server Side Rendering\n\nPerfect, now the next step is to enable Server Side Rendering (SSR). Which allows the server to render the application extremely fast.\n\n```\nmeteor add server-render\n```\n\n```js\n// src/startup/server/ssr.js\n\n// And don't forget to import this file from your index.js file\nimport React from 'react';\nimport { StaticRouter } from 'react-router';\n\nimport { getRenderer } from 'meteor/cultofcoders:apollo';\nimport { onPageLoad } from 'meteor/server-render';\n\nimport { server } from './apollo';\nimport App from '../../ui/main';\n\nconst render = getRenderer({\n  app: sink => (\n    <StaticRouter location={sink.request.url} context={{}}>\n      <App />\n    </StaticRouter>\n  ),\n  server,\n});\n\n// hanlde SSR\nonPageLoad(render);\n```\n\nYou're set in place to start rocking your app!\n","date":"2018-08-31T12:51:19.867Z","updated":"2018-08-31T12:51:19.867Z","path":"react/setting-up.html","comments":1,"layout":"page","_id":"cjqqmfrh30001s9a4c7uv763g","content":"<h1 id=\"Setting-Up\"><a href=\"#Setting-Up\" class=\"headerlink\" title=\"Setting Up\"></a>Setting Up</h1><p>So, let’s get started with React, let’s connect to Apollo, add some routing, and see our first query!</p>\n<p>First things first, let’s setup our structure. As you know, our client code will exist in <code>src/ui</code></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm <span class=\"selector-tag\">i</span> -S react react-dom react-router react-router-dom</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/main/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component, Fragment &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> routes <span class=\"keyword\">from</span> <span class=\"string\">'./routes'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Fragment&gt;</span><br><span class=\"line\">        &#123;routes.map(<span class=\"function\">(<span class=\"params\">route, idx</span>) =&gt;</span> (</span><br><span class=\"line\">          &lt;Route key=&#123;idx&#125; exact=&#123;<span class=\"literal\">true</span>&#125; &#123;...route&#125; /&gt;</span><br><span class=\"line\">        ))&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Fragment&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>The routes will look like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/main/routes.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'../pages/Home'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The properties of this routes can be found here:</span></span><br><span class=\"line\"><span class=\"comment\">// https://reacttraining.com/react-router/core/api/Route/route-props</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    component: Home,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>Let’s create a dummy Home page:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/pages/Home/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; &#123;</span><br><span class=\"line\">  &lt;h1&gt;Home Page&lt;<span class=\"regexp\">/h1&gt;;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br></pre></td></tr></table></figure>\n<p>Now we need to initialize all of this. And to do so, we go in our <code>src/ui/startup/client</code> folder.</p>\n<p>First let’s boot up our Apollo Client:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/startup/client/apollo.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initialize &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; client &#125; = initialize();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> client;</span><br></pre></td></tr></table></figure>\n<p>Now let’s start rendering!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/startup/client/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ApolloProvider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'../../ui/main'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> apolloClient <span class=\"keyword\">from</span> <span class=\"string\">'./apollo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ApolloApp = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;ApolloProvider client=&#123;apolloClient&#125;&gt;</span><br><span class=\"line\">    &lt;BrowserRouter&gt;</span><br><span class=\"line\">      &lt;App /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/BrowserRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>ApolloProvider&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Note: If you don't want to use SSR, replace `ReactDOM.hydrate` with `ReactDOM.render`.</span></span><br><span class=\"line\">ReactDOM.hydrate(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ApolloApp</span> /&gt;</span>, document.getElementById('react-root'));</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Server-Side-Rendering\"><a href=\"#Server-Side-Rendering\" class=\"headerlink\" title=\"Server Side Rendering\"></a>Server Side Rendering</h2><p>Perfect, now the next step is to enable Server Side Rendering (SSR). Which allows the server to render the application extremely fast.</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> server-render</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/startup/server/ssr.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// And don't forget to import this file from your index.js file</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StaticRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getRenderer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; onPageLoad &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/server-render'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; server &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'../../ui/main'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> render = getRenderer(&#123;</span><br><span class=\"line\">  app: <span class=\"function\"><span class=\"params\">sink</span> =&gt;</span> (</span><br><span class=\"line\">    &lt;StaticRouter location=&#123;sink.request.url&#125; context=&#123;&#123;&#125;&#125;&gt;</span><br><span class=\"line\">      &lt;App /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  ),</span></span><br><span class=\"line\"><span class=\"regexp\">  server,</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ hanlde SSR</span></span><br><span class=\"line\"><span class=\"regexp\">onPageLoad(render);</span></span><br></pre></td></tr></table></figure>\n<p>You’re set in place to start rocking your app!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Setting-Up\"><a href=\"#Setting-Up\" class=\"headerlink\" title=\"Setting Up\"></a>Setting Up</h1><p>So, let’s get started with React, let’s connect to Apollo, add some routing, and see our first query!</p>\n<p>First things first, let’s setup our structure. As you know, our client code will exist in <code>src/ui</code></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm <span class=\"selector-tag\">i</span> -S react react-dom react-router react-router-dom</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/main/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component, Fragment &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> routes <span class=\"keyword\">from</span> <span class=\"string\">'./routes'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Fragment&gt;</span><br><span class=\"line\">        &#123;routes.map(<span class=\"function\">(<span class=\"params\">route, idx</span>) =&gt;</span> (</span><br><span class=\"line\">          &lt;Route key=&#123;idx&#125; exact=&#123;<span class=\"literal\">true</span>&#125; &#123;...route&#125; /&gt;</span><br><span class=\"line\">        ))&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Fragment&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>The routes will look like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/main/routes.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'../pages/Home'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The properties of this routes can be found here:</span></span><br><span class=\"line\"><span class=\"comment\">// https://reacttraining.com/react-router/core/api/Route/route-props</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    component: Home,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>Let’s create a dummy Home page:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/pages/Home/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; &#123;</span><br><span class=\"line\">  &lt;h1&gt;Home Page&lt;<span class=\"regexp\">/h1&gt;;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br></pre></td></tr></table></figure>\n<p>Now we need to initialize all of this. And to do so, we go in our <code>src/ui/startup/client</code> folder.</p>\n<p>First let’s boot up our Apollo Client:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/startup/client/apollo.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initialize &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; client &#125; = initialize();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> client;</span><br></pre></td></tr></table></figure>\n<p>Now let’s start rendering!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/startup/client/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ApolloProvider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'../../ui/main'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> apolloClient <span class=\"keyword\">from</span> <span class=\"string\">'./apollo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ApolloApp = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;ApolloProvider client=&#123;apolloClient&#125;&gt;</span><br><span class=\"line\">    &lt;BrowserRouter&gt;</span><br><span class=\"line\">      &lt;App /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/BrowserRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>ApolloProvider&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Note: If you don't want to use SSR, replace `ReactDOM.hydrate` with `ReactDOM.render`.</span></span><br><span class=\"line\">ReactDOM.hydrate(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ApolloApp</span> /&gt;</span>, document.getElementById('react-root'));</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Server-Side-Rendering\"><a href=\"#Server-Side-Rendering\" class=\"headerlink\" title=\"Server Side Rendering\"></a>Server Side Rendering</h2><p>Perfect, now the next step is to enable Server Side Rendering (SSR). Which allows the server to render the application extremely fast.</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> server-render</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/startup/server/ssr.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// And don't forget to import this file from your index.js file</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StaticRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getRenderer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; onPageLoad &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/server-render'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; server &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'../../ui/main'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> render = getRenderer(&#123;</span><br><span class=\"line\">  app: <span class=\"function\"><span class=\"params\">sink</span> =&gt;</span> (</span><br><span class=\"line\">    &lt;StaticRouter location=&#123;sink.request.url&#125; context=&#123;&#123;&#125;&#125;&gt;</span><br><span class=\"line\">      &lt;App /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/StaticRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  ),</span></span><br><span class=\"line\"><span class=\"regexp\">  server,</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ hanlde SSR</span></span><br><span class=\"line\"><span class=\"regexp\">onPageLoad(render);</span></span><br></pre></td></tr></table></figure>\n<p>You’re set in place to start rocking your app!</p>\n"},{"title":"Queries","description":"Make your first query run!","disqusPage":"Recipes:Queries","_content":"\n# Queries\n\nLet's create a query server-side and then interogate it on our client.\nFor the sake of simplicity we are not going to store our main types in `entities` folder, this is just for illustration.\n\nFirst, let's define some sample data:\n\n```js\n// src/api/modules/item/items.js\nexport default [\n  {\n    _id: 1,\n    name: 'Big',\n    isAvailable: true,\n  },\n  {\n    _id: 2,\n    name: 'Bang',\n    isAvailable: false,\n  },\n  {\n    _id: 3,\n    name: 'BigBang',\n    isAvailable: true,\n  },\n];\n```\n\nNow let's define our Item type and the Query:\n\n```js\n// src/api/modules/item/index.js\nimport items from './items';\n\nexport default {\n  typeDefs: `\n    type Item {\n      _id: Int!\n      name: String!\n      isAvailable: Boolean\n    }\n\n    type Query {\n      items: [Item]!\n    }\n  `,\n  resolvers: {\n    Query: {\n      items() {\n        return items;\n      },\n    },\n  },\n};\n```\n\nAnd import this file inside your API entry-point in `src/api/index.js`:\n\n```js\nimport { load } from 'graphql-load';\nimport ItemModule from './modules/item';\n\nload([ItemModule]);\n```\n\nNow if you go to http://localhost:3000/graphql, you should be able to run this query:\n\n```gql\nquery {\n  items {\n    _id\n    name\n  }\n}\n```\n\n## React Integration\n\n```jsx\n// src/ui/pages/Items/index.js\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nconst ITEMS_LIST = gql`\n  query {\n    items {\n      _id\n      name\n    }\n  }\n`;\n\nconst Items = ({ items }) => (\n  <ul>\n    {items.map(item => (\n      <li key={item._id}>\n        {item._id} :: {item.name}\n      </li>\n    ))}\n  </ul>\n);\n\nexport default () => (\n  <Query query={ITEMS_LIST}>\n    {({ data, loading }) => {\n      if (loading) {\n        return 'Please wait...';\n      }\n\n      return <Items items={data.items} />;\n    }}\n  </Query>\n);\n```\n\nDon't forget to add the route for this component. Now feel free to test it!\n\n## Arguments\n\nLet's say we would like to receive only the available items and we want to specify this as an argument:\n\nModify your type definition:\n\n```gql\ntype Query {\n  items(showAvailableOnly: Boolean): [Item]!\n}\n```\n\nAnd inside your resolver:\n\n```js\n{\n  Query: {\n    items(_, args) {\n      const { showAvailableOnly}  = args;\n      if (showAvailableOnly) {\n        return items.filter(item => item.isAvailable === true);\n      }\n\n      return items;\n    }\n  }\n}\n```\n\nNow if you go to your [GraphQL Playground](http://localhost:3000/graphql) you can run this:\n\n```\nquery {\n  items(showAvailableOnly:true) {\n    _id\n    name\n    isAvailable\n  }\n}\n```\n\nHowever, if we want to manipulate these values inside the React component, so it can specify what to use, we are going to use the following approach:\n\n```js\nquery items($showAvailableOnly:Boolean) {\n  items(showAvailableOnly:$showAvailableOnly) {\n    _id\n    name\n    isAvailable\n  }\n}\n```\n\nThis may seem a bit confusing at first, you will first notice that after query comes `items` that's just a name we gave to the query that helps Apollo to do a lot of nice things, but that name could have been anything.\n\nNext to it we define the variables, it's like saying, these are the variables that I'm allowing in this query, and this is their type.\n\nAnd next, when we actually make the query, we need to provide the variables that our query really accepts. For example, this would also work:\n\n```js\nquery myItems($available:Boolean) {\n  items(showAvailableOnly:$available) {\n    _id\n    name\n    isAvailable\n  }\n}\n```\n\nNow, let's use the last one we showed (with `myItems`) and replace it inside your React component, then you will be able to specify variables, by making your `Query` like this:\n\n```js\n<Query query={ITEMS_LIST} variables={{ available: true }}>\n  {...}\n</Query>\n```\n\n## Inputs\n\nBut what happens when we want to send more parameters ? For example we have a super complex list, that takes in a lot of arguments ?\n\nThe recommended solution is to create an `input` type like so:\n\n```\ninput ItemListFilters {\n  isAvailable: Boolean\n  startsWith: String\n  numberOfWords: Int!\n}\n\ntype Query {\n  items(filters: ItemListFilters!): [Item]\n}\n```\n\nNote that the `!` means you **must** provide an input.\n\nSo your query can look like this:\n\n```js\nquery myItems($filters:ItemListFilters) {\n  items(filters:$filters) {\n    _id\n    name\n    isAvailable\n  }\n}\n```\n\nAnd ofcourse, your `Query` will look like this:\n\n```js\nconst filters = {\n  isAvailable: false,\n  startsWith: 'Big',\n  numberOfWords: 2\n}\n\nreturn (\n  <Query query={ITEMS_LIST} variables={{ filters }}>\n    {...}\n  </Query>\n)\n```\n\nThis won't really work because you did not add any logic in your resolvers to handle this, but this is to show how to think about multiple arguments.\n\nFeel free to read more about `<Query>` component here:\nhttps://www.apollographql.com/docs/react/essentials/queries.html\n","source":"recipes/queries.md","raw":"---\ntitle: Queries\ndescription: 'Make your first query run!'\ndisqusPage: 'Recipes:Queries'\n---\n\n# Queries\n\nLet's create a query server-side and then interogate it on our client.\nFor the sake of simplicity we are not going to store our main types in `entities` folder, this is just for illustration.\n\nFirst, let's define some sample data:\n\n```js\n// src/api/modules/item/items.js\nexport default [\n  {\n    _id: 1,\n    name: 'Big',\n    isAvailable: true,\n  },\n  {\n    _id: 2,\n    name: 'Bang',\n    isAvailable: false,\n  },\n  {\n    _id: 3,\n    name: 'BigBang',\n    isAvailable: true,\n  },\n];\n```\n\nNow let's define our Item type and the Query:\n\n```js\n// src/api/modules/item/index.js\nimport items from './items';\n\nexport default {\n  typeDefs: `\n    type Item {\n      _id: Int!\n      name: String!\n      isAvailable: Boolean\n    }\n\n    type Query {\n      items: [Item]!\n    }\n  `,\n  resolvers: {\n    Query: {\n      items() {\n        return items;\n      },\n    },\n  },\n};\n```\n\nAnd import this file inside your API entry-point in `src/api/index.js`:\n\n```js\nimport { load } from 'graphql-load';\nimport ItemModule from './modules/item';\n\nload([ItemModule]);\n```\n\nNow if you go to http://localhost:3000/graphql, you should be able to run this query:\n\n```gql\nquery {\n  items {\n    _id\n    name\n  }\n}\n```\n\n## React Integration\n\n```jsx\n// src/ui/pages/Items/index.js\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nconst ITEMS_LIST = gql`\n  query {\n    items {\n      _id\n      name\n    }\n  }\n`;\n\nconst Items = ({ items }) => (\n  <ul>\n    {items.map(item => (\n      <li key={item._id}>\n        {item._id} :: {item.name}\n      </li>\n    ))}\n  </ul>\n);\n\nexport default () => (\n  <Query query={ITEMS_LIST}>\n    {({ data, loading }) => {\n      if (loading) {\n        return 'Please wait...';\n      }\n\n      return <Items items={data.items} />;\n    }}\n  </Query>\n);\n```\n\nDon't forget to add the route for this component. Now feel free to test it!\n\n## Arguments\n\nLet's say we would like to receive only the available items and we want to specify this as an argument:\n\nModify your type definition:\n\n```gql\ntype Query {\n  items(showAvailableOnly: Boolean): [Item]!\n}\n```\n\nAnd inside your resolver:\n\n```js\n{\n  Query: {\n    items(_, args) {\n      const { showAvailableOnly}  = args;\n      if (showAvailableOnly) {\n        return items.filter(item => item.isAvailable === true);\n      }\n\n      return items;\n    }\n  }\n}\n```\n\nNow if you go to your [GraphQL Playground](http://localhost:3000/graphql) you can run this:\n\n```\nquery {\n  items(showAvailableOnly:true) {\n    _id\n    name\n    isAvailable\n  }\n}\n```\n\nHowever, if we want to manipulate these values inside the React component, so it can specify what to use, we are going to use the following approach:\n\n```js\nquery items($showAvailableOnly:Boolean) {\n  items(showAvailableOnly:$showAvailableOnly) {\n    _id\n    name\n    isAvailable\n  }\n}\n```\n\nThis may seem a bit confusing at first, you will first notice that after query comes `items` that's just a name we gave to the query that helps Apollo to do a lot of nice things, but that name could have been anything.\n\nNext to it we define the variables, it's like saying, these are the variables that I'm allowing in this query, and this is their type.\n\nAnd next, when we actually make the query, we need to provide the variables that our query really accepts. For example, this would also work:\n\n```js\nquery myItems($available:Boolean) {\n  items(showAvailableOnly:$available) {\n    _id\n    name\n    isAvailable\n  }\n}\n```\n\nNow, let's use the last one we showed (with `myItems`) and replace it inside your React component, then you will be able to specify variables, by making your `Query` like this:\n\n```js\n<Query query={ITEMS_LIST} variables={{ available: true }}>\n  {...}\n</Query>\n```\n\n## Inputs\n\nBut what happens when we want to send more parameters ? For example we have a super complex list, that takes in a lot of arguments ?\n\nThe recommended solution is to create an `input` type like so:\n\n```\ninput ItemListFilters {\n  isAvailable: Boolean\n  startsWith: String\n  numberOfWords: Int!\n}\n\ntype Query {\n  items(filters: ItemListFilters!): [Item]\n}\n```\n\nNote that the `!` means you **must** provide an input.\n\nSo your query can look like this:\n\n```js\nquery myItems($filters:ItemListFilters) {\n  items(filters:$filters) {\n    _id\n    name\n    isAvailable\n  }\n}\n```\n\nAnd ofcourse, your `Query` will look like this:\n\n```js\nconst filters = {\n  isAvailable: false,\n  startsWith: 'Big',\n  numberOfWords: 2\n}\n\nreturn (\n  <Query query={ITEMS_LIST} variables={{ filters }}>\n    {...}\n  </Query>\n)\n```\n\nThis won't really work because you did not add any logic in your resolvers to handle this, but this is to show how to think about multiple arguments.\n\nFeel free to read more about `<Query>` component here:\nhttps://www.apollographql.com/docs/react/essentials/queries.html\n","date":"2018-08-31T12:51:19.868Z","updated":"2018-08-31T12:51:19.868Z","path":"recipes/queries.html","comments":1,"layout":"page","_id":"cjqqmfrh50002s9a4upsyh5fp","content":"<h1 id=\"Queries\"><a href=\"#Queries\" class=\"headerlink\" title=\"Queries\"></a>Queries</h1><p>Let’s create a query server-side and then interogate it on our client.\nFor the sake of simplicity we are not going to store our main types in <code>entities</code> folder, this is just for illustration.</p>\n<p>First, let’s define some sample data:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/item/items.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'Big'</span>,</span><br><span class=\"line\">    isAvailable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: <span class=\"number\">2</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'Bang'</span>,</span><br><span class=\"line\">    isAvailable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: <span class=\"number\">3</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'BigBang'</span>,</span><br><span class=\"line\">    isAvailable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>Now let’s define our Item type and the Query:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/item/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> items <span class=\"keyword\">from</span> <span class=\"string\">'./items'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    type Item &#123;</span></span><br><span class=\"line\"><span class=\"string\">      _id: Int!</span></span><br><span class=\"line\"><span class=\"string\">      name: String!</span></span><br><span class=\"line\"><span class=\"string\">      isAvailable: Boolean</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">      items: [Item]!</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">      items() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>And import this file inside your API entry-point in <code>src/api/index.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; load &#125; <span class=\"keyword\">from</span> <span class=\"string\">'graphql-load'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ItemModule <span class=\"keyword\">from</span> <span class=\"string\">'./modules/item'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">load([ItemModule]);</span><br></pre></td></tr></table></figure>\n<p>Now if you go to <a href=\"http://localhost:3000/graphql\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/graphql</a>, you should be able to run this query:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query &#123;</span><br><span class=\"line\">  items &#123;</span><br><span class=\"line\">    _id</span><br><span class=\"line\">    name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-Integration\"><a href=\"#React-Integration\" class=\"headerlink\" title=\"React Integration\"></a>React Integration</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/pages/Items/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Query &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gql <span class=\"keyword\">from</span> <span class=\"string\">'graphql-tag'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ITEMS_LIST = gql<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  query &#123;</span></span><br><span class=\"line\"><span class=\"string\">    items &#123;</span></span><br><span class=\"line\"><span class=\"string\">      _id</span></span><br><span class=\"line\"><span class=\"string\">      name</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Items = <span class=\"function\">(<span class=\"params\">&#123; items &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &#123;items.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> (</span><br><span class=\"line\">      &lt;li key=&#123;item._id&#125;&gt;</span><br><span class=\"line\">        &#123;item._id&#125; :: &#123;item.name&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ))&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/u</span>l&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; (</span><br><span class=\"line\">  &lt;Query query=&#123;ITEMS_LIST&#125;&gt;</span><br><span class=\"line\">    &#123;(&#123; data, loading &#125;) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (loading) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Please wait...'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Items</span> <span class=\"attr\">items</span>=<span class=\"string\">&#123;data.items&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">Query</span>&gt;</span></span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Don’t forget to add the route for this component. Now feel free to test it!</p>\n<h2 id=\"Arguments\"><a href=\"#Arguments\" class=\"headerlink\" title=\"Arguments\"></a>Arguments</h2><p>Let’s say we would like to receive only the available items and we want to specify this as an argument:</p>\n<p>Modify your type definition:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Query &#123;</span><br><span class=\"line\">  items(showAvailableOnly: Boolean): [Item]!</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And inside your resolver:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  Query: &#123;</span><br><span class=\"line\">    items(_, args) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; showAvailableOnly&#125;  = args;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (showAvailableOnly) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.isAvailable === <span class=\"literal\">true</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now if you go to your <a href=\"http://localhost:3000/graphql\" target=\"_blank\" rel=\"noopener\">GraphQL Playground</a> you can run this:</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query &#123;</span><br><span class=\"line\">  <span class=\"built_in\">items</span>(showAvailableOnly:<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable\">_id</span></span><br><span class=\"line\">    <span class=\"built_in\">name</span></span><br><span class=\"line\">    isAvailable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>However, if we want to manipulate these values inside the React component, so it can specify what to use, we are going to use the following approach:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query items($showAvailableOnly:<span class=\"built_in\">Boolean</span>) &#123;</span><br><span class=\"line\">  items(showAvailableOnly:$showAvailableOnly) &#123;</span><br><span class=\"line\">    _id</span><br><span class=\"line\">    name</span><br><span class=\"line\">    isAvailable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This may seem a bit confusing at first, you will first notice that after query comes <code>items</code> that’s just a name we gave to the query that helps Apollo to do a lot of nice things, but that name could have been anything.</p>\n<p>Next to it we define the variables, it’s like saying, these are the variables that I’m allowing in this query, and this is their type.</p>\n<p>And next, when we actually make the query, we need to provide the variables that our query really accepts. For example, this would also work:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query myItems($available:<span class=\"built_in\">Boolean</span>) &#123;</span><br><span class=\"line\">  items(showAvailableOnly:$available) &#123;</span><br><span class=\"line\">    _id</span><br><span class=\"line\">    name</span><br><span class=\"line\">    isAvailable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now, let’s use the last one we showed (with <code>myItems</code>) and replace it inside your React component, then you will be able to specify variables, by making your <code>Query</code> like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Query query=&#123;ITEMS_LIST&#125; variables=&#123;&#123; <span class=\"attr\">available</span>: <span class=\"literal\">true</span> &#125;&#125;&gt;</span><br><span class=\"line\">  &#123;...&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Query&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Inputs\"><a href=\"#Inputs\" class=\"headerlink\" title=\"Inputs\"></a>Inputs</h2><p>But what happens when we want to send more parameters ? For example we have a super complex list, that takes in a lot of arguments ?</p>\n<p>The recommended solution is to create an <code>input</code> type like so:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input ItemListFilters &#123;</span><br><span class=\"line\">  isAvailable: Boolean</span><br><span class=\"line\">  startsWith: String</span><br><span class=\"line\">  numberOfWords: Int!</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Query &#123;</span><br><span class=\"line\">  items(filters: ItemListFilters!): [Item]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Note that the <code>!</code> means you <strong>must</strong> provide an input.</p>\n<p>So your query can look like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query myItems($filters:ItemListFilters) &#123;</span><br><span class=\"line\">  items(filters:$filters) &#123;</span><br><span class=\"line\">    _id</span><br><span class=\"line\">    name</span><br><span class=\"line\">    isAvailable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And ofcourse, your <code>Query</code> will look like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> filters = &#123;</span><br><span class=\"line\">  isAvailable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  startsWith: <span class=\"string\">'Big'</span>,</span><br><span class=\"line\">  numberOfWords: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">  &lt;Query query=&#123;ITEMS_LIST&#125; variables=&#123;&#123; filters &#125;&#125;&gt;</span><br><span class=\"line\">    &#123;...&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Query&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br></pre></td></tr></table></figure>\n<p>This won’t really work because you did not add any logic in your resolvers to handle this, but this is to show how to think about multiple arguments.</p>\n<p>Feel free to read more about <code>&lt;Query&gt;</code> component here:\n<a href=\"https://www.apollographql.com/docs/react/essentials/queries.html\" target=\"_blank\" rel=\"noopener\">https://www.apollographql.com/docs/react/essentials/queries.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Queries\"><a href=\"#Queries\" class=\"headerlink\" title=\"Queries\"></a>Queries</h1><p>Let’s create a query server-side and then interogate it on our client.\nFor the sake of simplicity we are not going to store our main types in <code>entities</code> folder, this is just for illustration.</p>\n<p>First, let’s define some sample data:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/item/items.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'Big'</span>,</span><br><span class=\"line\">    isAvailable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: <span class=\"number\">2</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'Bang'</span>,</span><br><span class=\"line\">    isAvailable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: <span class=\"number\">3</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'BigBang'</span>,</span><br><span class=\"line\">    isAvailable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>Now let’s define our Item type and the Query:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/item/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> items <span class=\"keyword\">from</span> <span class=\"string\">'./items'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    type Item &#123;</span></span><br><span class=\"line\"><span class=\"string\">      _id: Int!</span></span><br><span class=\"line\"><span class=\"string\">      name: String!</span></span><br><span class=\"line\"><span class=\"string\">      isAvailable: Boolean</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">      items: [Item]!</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">      items() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>And import this file inside your API entry-point in <code>src/api/index.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; load &#125; <span class=\"keyword\">from</span> <span class=\"string\">'graphql-load'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ItemModule <span class=\"keyword\">from</span> <span class=\"string\">'./modules/item'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">load([ItemModule]);</span><br></pre></td></tr></table></figure>\n<p>Now if you go to <a href=\"http://localhost:3000/graphql\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/graphql</a>, you should be able to run this query:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query &#123;</span><br><span class=\"line\">  items &#123;</span><br><span class=\"line\">    _id</span><br><span class=\"line\">    name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-Integration\"><a href=\"#React-Integration\" class=\"headerlink\" title=\"React Integration\"></a>React Integration</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/pages/Items/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Query &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gql <span class=\"keyword\">from</span> <span class=\"string\">'graphql-tag'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ITEMS_LIST = gql<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  query &#123;</span></span><br><span class=\"line\"><span class=\"string\">    items &#123;</span></span><br><span class=\"line\"><span class=\"string\">      _id</span></span><br><span class=\"line\"><span class=\"string\">      name</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Items = <span class=\"function\">(<span class=\"params\">&#123; items &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &#123;items.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> (</span><br><span class=\"line\">      &lt;li key=&#123;item._id&#125;&gt;</span><br><span class=\"line\">        &#123;item._id&#125; :: &#123;item.name&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ))&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/u</span>l&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; (</span><br><span class=\"line\">  &lt;Query query=&#123;ITEMS_LIST&#125;&gt;</span><br><span class=\"line\">    &#123;(&#123; data, loading &#125;) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (loading) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Please wait...'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Items</span> <span class=\"attr\">items</span>=<span class=\"string\">&#123;data.items&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">Query</span>&gt;</span></span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Don’t forget to add the route for this component. Now feel free to test it!</p>\n<h2 id=\"Arguments\"><a href=\"#Arguments\" class=\"headerlink\" title=\"Arguments\"></a>Arguments</h2><p>Let’s say we would like to receive only the available items and we want to specify this as an argument:</p>\n<p>Modify your type definition:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Query &#123;</span><br><span class=\"line\">  items(showAvailableOnly: Boolean): [Item]!</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And inside your resolver:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  Query: &#123;</span><br><span class=\"line\">    items(_, args) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; showAvailableOnly&#125;  = args;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (showAvailableOnly) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.isAvailable === <span class=\"literal\">true</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now if you go to your <a href=\"http://localhost:3000/graphql\" target=\"_blank\" rel=\"noopener\">GraphQL Playground</a> you can run this:</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query &#123;</span><br><span class=\"line\">  <span class=\"built_in\">items</span>(showAvailableOnly:<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable\">_id</span></span><br><span class=\"line\">    <span class=\"built_in\">name</span></span><br><span class=\"line\">    isAvailable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>However, if we want to manipulate these values inside the React component, so it can specify what to use, we are going to use the following approach:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query items($showAvailableOnly:<span class=\"built_in\">Boolean</span>) &#123;</span><br><span class=\"line\">  items(showAvailableOnly:$showAvailableOnly) &#123;</span><br><span class=\"line\">    _id</span><br><span class=\"line\">    name</span><br><span class=\"line\">    isAvailable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This may seem a bit confusing at first, you will first notice that after query comes <code>items</code> that’s just a name we gave to the query that helps Apollo to do a lot of nice things, but that name could have been anything.</p>\n<p>Next to it we define the variables, it’s like saying, these are the variables that I’m allowing in this query, and this is their type.</p>\n<p>And next, when we actually make the query, we need to provide the variables that our query really accepts. For example, this would also work:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query myItems($available:<span class=\"built_in\">Boolean</span>) &#123;</span><br><span class=\"line\">  items(showAvailableOnly:$available) &#123;</span><br><span class=\"line\">    _id</span><br><span class=\"line\">    name</span><br><span class=\"line\">    isAvailable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now, let’s use the last one we showed (with <code>myItems</code>) and replace it inside your React component, then you will be able to specify variables, by making your <code>Query</code> like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Query query=&#123;ITEMS_LIST&#125; variables=&#123;&#123; <span class=\"attr\">available</span>: <span class=\"literal\">true</span> &#125;&#125;&gt;</span><br><span class=\"line\">  &#123;...&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Query&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Inputs\"><a href=\"#Inputs\" class=\"headerlink\" title=\"Inputs\"></a>Inputs</h2><p>But what happens when we want to send more parameters ? For example we have a super complex list, that takes in a lot of arguments ?</p>\n<p>The recommended solution is to create an <code>input</code> type like so:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input ItemListFilters &#123;</span><br><span class=\"line\">  isAvailable: Boolean</span><br><span class=\"line\">  startsWith: String</span><br><span class=\"line\">  numberOfWords: Int!</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Query &#123;</span><br><span class=\"line\">  items(filters: ItemListFilters!): [Item]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Note that the <code>!</code> means you <strong>must</strong> provide an input.</p>\n<p>So your query can look like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query myItems($filters:ItemListFilters) &#123;</span><br><span class=\"line\">  items(filters:$filters) &#123;</span><br><span class=\"line\">    _id</span><br><span class=\"line\">    name</span><br><span class=\"line\">    isAvailable</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And ofcourse, your <code>Query</code> will look like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> filters = &#123;</span><br><span class=\"line\">  isAvailable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  startsWith: <span class=\"string\">'Big'</span>,</span><br><span class=\"line\">  numberOfWords: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">  &lt;Query query=&#123;ITEMS_LIST&#125; variables=&#123;&#123; filters &#125;&#125;&gt;</span><br><span class=\"line\">    &#123;...&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Query&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br></pre></td></tr></table></figure>\n<p>This won’t really work because you did not add any logic in your resolvers to handle this, but this is to show how to think about multiple arguments.</p>\n<p>Feel free to read more about <code>&lt;Query&gt;</code> component here:\n<a href=\"https://www.apollographql.com/docs/react/essentials/queries.html\" target=\"_blank\" rel=\"noopener\">https://www.apollographql.com/docs/react/essentials/queries.html</a></p>\n"},{"title":"Testing","description":"Start testing your react components","disqusPage":"React:Testing","_content":"\nIn this sample we are going to use [Enzyme](https://airbnb.io/enzyme/docs/api/) to test our react components:\n\n```\nmeteor npm i --save-dev enzyme enzyme-adapter-react-16\n```\n\nYou should already have setup your tests from the [previous chapter](../starterpack/testing.md).\n\n```js\n// src/__tests__/enzyme.js\nimport Enzyme from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nEnzyme.configure({ adapter: new Adapter() });\n```\n\nAnd import this file inside `src/__tests__/client.js`.\n\nNow let's write a test for the previous component we built in the Form.\n\n```js\n// src/ui/components/Login/__tests__/index.js\nimport { expect } from 'chai';\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport { AutoForm } from 'uniforms-antd';\n\nimport LoginPage from '../Login';\n\ndescribe('Login', () => {\n  it('Should render the form', () => {\n    const wrapper = mount(<LoginPage />);\n    expect(wrapper.find(AutoForm)).to.have.lengthOf(1);\n  });\n});\n```\n\nNow if you run `npm test` and open http://localhost:3050 you should see your test running!\n\nPlease refer to [Enzyme](https://airbnb.io/enzyme/docs/api/) documentation for more details about testing your components.\n","source":"react/testing.md","raw":"---\ntitle: Testing\ndescription: 'Start testing your react components'\ndisqusPage: 'React:Testing'\n---\n\nIn this sample we are going to use [Enzyme](https://airbnb.io/enzyme/docs/api/) to test our react components:\n\n```\nmeteor npm i --save-dev enzyme enzyme-adapter-react-16\n```\n\nYou should already have setup your tests from the [previous chapter](../starterpack/testing.md).\n\n```js\n// src/__tests__/enzyme.js\nimport Enzyme from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nEnzyme.configure({ adapter: new Adapter() });\n```\n\nAnd import this file inside `src/__tests__/client.js`.\n\nNow let's write a test for the previous component we built in the Form.\n\n```js\n// src/ui/components/Login/__tests__/index.js\nimport { expect } from 'chai';\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport { AutoForm } from 'uniforms-antd';\n\nimport LoginPage from '../Login';\n\ndescribe('Login', () => {\n  it('Should render the form', () => {\n    const wrapper = mount(<LoginPage />);\n    expect(wrapper.find(AutoForm)).to.have.lengthOf(1);\n  });\n});\n```\n\nNow if you run `npm test` and open http://localhost:3050 you should see your test running!\n\nPlease refer to [Enzyme](https://airbnb.io/enzyme/docs/api/) documentation for more details about testing your components.\n","date":"2018-09-02T05:44:47.506Z","updated":"2018-09-02T05:44:47.506Z","path":"react/testing.html","comments":1,"layout":"page","_id":"cjqqmfrh60003s9a4sklbo7dy","content":"<p>In this sample we are going to use <a href=\"https://airbnb.io/enzyme/docs/api/\" target=\"_blank\" rel=\"noopener\">Enzyme</a> to test our react components:</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm i --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> enzyme enzyme-adapter-react<span class=\"number\">-16</span></span><br></pre></td></tr></table></figure>\n<p>You should already have setup your tests from the <a href=\"../starterpack/testing.md\">previous chapter</a>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/__tests__/enzyme.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Enzyme <span class=\"keyword\">from</span> <span class=\"string\">'enzyme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">'enzyme-adapter-react-16'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Enzyme.configure(&#123; <span class=\"attr\">adapter</span>: <span class=\"keyword\">new</span> Adapter() &#125;);</span><br></pre></td></tr></table></figure>\n<p>And import this file inside <code>src/__tests__/client.js</code>.</p>\n<p>Now let’s write a test for the previous component we built in the Form.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/components/Login/__tests__/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; expect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mount &#125; <span class=\"keyword\">from</span> <span class=\"string\">'enzyme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AutoForm &#125; <span class=\"keyword\">from</span> <span class=\"string\">'uniforms-antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> LoginPage <span class=\"keyword\">from</span> <span class=\"string\">'../Login'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Login'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'Should render the form'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = mount(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LoginPage</span> /&gt;</span>);</span></span><br><span class=\"line\"><span class=\"xml\">    expect(wrapper.find(AutoForm)).to.have.lengthOf(1);</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;);</span></span><br><span class=\"line\"><span class=\"xml\">&#125;);</span></span><br></pre></td></tr></table></figure>\n<p>Now if you run <code>npm test</code> and open <a href=\"http://localhost:3050\" target=\"_blank\" rel=\"noopener\">http://localhost:3050</a> you should see your test running!</p>\n<p>Please refer to <a href=\"https://airbnb.io/enzyme/docs/api/\" target=\"_blank\" rel=\"noopener\">Enzyme</a> documentation for more details about testing your components.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In this sample we are going to use <a href=\"https://airbnb.io/enzyme/docs/api/\" target=\"_blank\" rel=\"noopener\">Enzyme</a> to test our react components:</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm i --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> enzyme enzyme-adapter-react<span class=\"number\">-16</span></span><br></pre></td></tr></table></figure>\n<p>You should already have setup your tests from the <a href=\"../starterpack/testing.md\">previous chapter</a>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/__tests__/enzyme.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Enzyme <span class=\"keyword\">from</span> <span class=\"string\">'enzyme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">'enzyme-adapter-react-16'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Enzyme.configure(&#123; <span class=\"attr\">adapter</span>: <span class=\"keyword\">new</span> Adapter() &#125;);</span><br></pre></td></tr></table></figure>\n<p>And import this file inside <code>src/__tests__/client.js</code>.</p>\n<p>Now let’s write a test for the previous component we built in the Form.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/components/Login/__tests__/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; expect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mount &#125; <span class=\"keyword\">from</span> <span class=\"string\">'enzyme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AutoForm &#125; <span class=\"keyword\">from</span> <span class=\"string\">'uniforms-antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> LoginPage <span class=\"keyword\">from</span> <span class=\"string\">'../Login'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Login'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'Should render the form'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = mount(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LoginPage</span> /&gt;</span>);</span></span><br><span class=\"line\"><span class=\"xml\">    expect(wrapper.find(AutoForm)).to.have.lengthOf(1);</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;);</span></span><br><span class=\"line\"><span class=\"xml\">&#125;);</span></span><br></pre></td></tr></table></figure>\n<p>Now if you run <code>npm test</code> and open <a href=\"http://localhost:3050\" target=\"_blank\" rel=\"noopener\">http://localhost:3050</a> you should see your test running!</p>\n<p>Please refer to <a href=\"https://airbnb.io/enzyme/docs/api/\" target=\"_blank\" rel=\"noopener\">Enzyme</a> documentation for more details about testing your components.</p>\n"},{"title":"Styling","description":"Setup styles in a proper intuitive manner","disqusPage":"Starterpack:Styling","_content":"\n# Styling\n\nOh the many possibilities, the many ways to do this. I agree, there are many ways and the problem is that there are many good ways.\n\nHowever, `BigBang` is opinionated and tries to enforce certain paradigms to simplify the life, so this is our approach:\n\n```\nmeteor add fourseven:scss\nmeteor remove standard-minifier-css\nmeteor add seba:minifiers-autoprefixer\n```\n\nNow, even if we are in `src` all `scss` will get eagerly loaded if we don't provide them with the `_` prefix (`buttons.scss` vs `_buttons_.scss`)\n\nSo, because we don't want any eager loading, we'll have a `main.scss` and the rest will be imported from there.\n\n```\nmkdir -p src/ui/styles\ntouch src/ui/styles/main.scss\n```\n\nWe love and recommend [Ant Design](https://ant.design/docs/react/introduce). Let's see how we can add it quickly:\n\n```\nmeteor npm i -S antd\n```\n\n```js\ncd src/ui/styles\nln -s ../../../node_modules/antd/dist/antd.min.css _antd.scss\n```\n\n```scss\n// src/ui/styles/main.scss\n@import '_antd';\n@import '_variables';\n```\n\nSpin-up some variables:\n\n```scss\n// src/ui/styles/_variables.scss\n$primaryColor: #333;\n```\n\nWe recommend that you only write scss for presentational components which lie in `src/ui/components` something like this:\n\n```js\n// src/ui/components/Button/index.js\nexport default ({ children }) => {\n  return <button className=\"c-Button\">{children}</button>;\n};\n```\n\n```scss\n// src/ui/components/Button/_style.scss\n.c-Button {\n  padding: 15px;\n}\n```\n\n```scss\n// src/ui/components/_style.scss\n@import './Button/_style.scss';\n@import './Input/_style.scss';\n@import './Form/_style.scss';\n```\n\nAnd finally import it in your `main.scss`:\n\n```scss\n@import '_antd';\n@import '_variables';\n@import '../components/_style';\n```\n\nNote: keep all your presentational components unique so you won't have any css class collisions.\n\nIt's important that you follow guidelines and good styling principles: https://sass-guidelin.es/\n\nEnjoy!\n","source":"react/styling.md","raw":"---\ntitle: Styling\ndescription: 'Setup styles in a proper intuitive manner'\ndisqusPage: 'Starterpack:Styling'\n---\n\n# Styling\n\nOh the many possibilities, the many ways to do this. I agree, there are many ways and the problem is that there are many good ways.\n\nHowever, `BigBang` is opinionated and tries to enforce certain paradigms to simplify the life, so this is our approach:\n\n```\nmeteor add fourseven:scss\nmeteor remove standard-minifier-css\nmeteor add seba:minifiers-autoprefixer\n```\n\nNow, even if we are in `src` all `scss` will get eagerly loaded if we don't provide them with the `_` prefix (`buttons.scss` vs `_buttons_.scss`)\n\nSo, because we don't want any eager loading, we'll have a `main.scss` and the rest will be imported from there.\n\n```\nmkdir -p src/ui/styles\ntouch src/ui/styles/main.scss\n```\n\nWe love and recommend [Ant Design](https://ant.design/docs/react/introduce). Let's see how we can add it quickly:\n\n```\nmeteor npm i -S antd\n```\n\n```js\ncd src/ui/styles\nln -s ../../../node_modules/antd/dist/antd.min.css _antd.scss\n```\n\n```scss\n// src/ui/styles/main.scss\n@import '_antd';\n@import '_variables';\n```\n\nSpin-up some variables:\n\n```scss\n// src/ui/styles/_variables.scss\n$primaryColor: #333;\n```\n\nWe recommend that you only write scss for presentational components which lie in `src/ui/components` something like this:\n\n```js\n// src/ui/components/Button/index.js\nexport default ({ children }) => {\n  return <button className=\"c-Button\">{children}</button>;\n};\n```\n\n```scss\n// src/ui/components/Button/_style.scss\n.c-Button {\n  padding: 15px;\n}\n```\n\n```scss\n// src/ui/components/_style.scss\n@import './Button/_style.scss';\n@import './Input/_style.scss';\n@import './Form/_style.scss';\n```\n\nAnd finally import it in your `main.scss`:\n\n```scss\n@import '_antd';\n@import '_variables';\n@import '../components/_style';\n```\n\nNote: keep all your presentational components unique so you won't have any css class collisions.\n\nIt's important that you follow guidelines and good styling principles: https://sass-guidelin.es/\n\nEnjoy!\n","date":"2018-08-31T12:51:19.867Z","updated":"2018-08-31T12:51:19.867Z","path":"react/styling.html","comments":1,"layout":"page","_id":"cjqqmfrh60004s9a4sw4jseck","content":"<h1 id=\"Styling\"><a href=\"#Styling\" class=\"headerlink\" title=\"Styling\"></a>Styling</h1><p>Oh the many possibilities, the many ways to do this. I agree, there are many ways and the problem is that there are many good ways.</p>\n<p>However, <code>BigBang</code> is opinionated and tries to enforce certain paradigms to simplify the life, so this is our approach:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor <span class=\"builtin-name\">add</span> fourseven:scss</span><br><span class=\"line\">meteor <span class=\"builtin-name\">remove</span> standard-minifier-css</span><br><span class=\"line\">meteor <span class=\"builtin-name\">add</span> seba:minifiers-autoprefixer</span><br></pre></td></tr></table></figure>\n<p>Now, even if we are in <code>src</code> all <code>scss</code> will get eagerly loaded if we don’t provide them with the <code>_</code> prefix (<code>buttons.scss</code> vs <code>_buttons_.scss</code>)</p>\n<p>So, because we don’t want any eager loading, we’ll have a <code>main.scss</code> and the rest will be imported from there.</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p src<span class=\"regexp\">/ui/</span>styles</span><br><span class=\"line\">touch src<span class=\"regexp\">/ui/</span>styles<span class=\"regexp\">/main.scss</span></span><br></pre></td></tr></table></figure>\n<p>We love and recommend <a href=\"https://ant.design/docs/react/introduce\" target=\"_blank\" rel=\"noopener\">Ant Design</a>. Let’s see how we can add it quickly:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm <span class=\"selector-tag\">i</span> -S antd</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd src/ui/styles</span><br><span class=\"line\">ln -s ../../../node_modules/antd/dist/antd.min.css _antd.scss</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/styles/main.scss</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'_antd'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'_variables'</span>;</span><br></pre></td></tr></table></figure>\n<p>Spin-up some variables:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/styles/_variables.scss</span></span><br><span class=\"line\"><span class=\"variable\">$primaryColor</span>: <span class=\"number\">#333</span>;</span><br></pre></td></tr></table></figure>\n<p>We recommend that you only write scss for presentational components which lie in <code>src/ui/components</code> something like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/components/Button/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (&#123; children &#125;) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">\"c-Button\"</span>&gt;</span>&#123;children&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/components/Button/_style.scss</span></span><br><span class=\"line\"><span class=\"selector-class\">.c-Button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/components/_style.scss</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'./Button/_style.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'./Input/_style.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'./Form/_style.scss'</span>;</span><br></pre></td></tr></table></figure>\n<p>And finally import it in your <code>main.scss</code>:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'_antd'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'_variables'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'../components/_style'</span>;</span><br></pre></td></tr></table></figure>\n<p>Note: keep all your presentational components unique so you won’t have any css class collisions.</p>\n<p>It’s important that you follow guidelines and good styling principles: <a href=\"https://sass-guidelin.es/\" target=\"_blank\" rel=\"noopener\">https://sass-guidelin.es/</a></p>\n<p>Enjoy!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Styling\"><a href=\"#Styling\" class=\"headerlink\" title=\"Styling\"></a>Styling</h1><p>Oh the many possibilities, the many ways to do this. I agree, there are many ways and the problem is that there are many good ways.</p>\n<p>However, <code>BigBang</code> is opinionated and tries to enforce certain paradigms to simplify the life, so this is our approach:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor <span class=\"builtin-name\">add</span> fourseven:scss</span><br><span class=\"line\">meteor <span class=\"builtin-name\">remove</span> standard-minifier-css</span><br><span class=\"line\">meteor <span class=\"builtin-name\">add</span> seba:minifiers-autoprefixer</span><br></pre></td></tr></table></figure>\n<p>Now, even if we are in <code>src</code> all <code>scss</code> will get eagerly loaded if we don’t provide them with the <code>_</code> prefix (<code>buttons.scss</code> vs <code>_buttons_.scss</code>)</p>\n<p>So, because we don’t want any eager loading, we’ll have a <code>main.scss</code> and the rest will be imported from there.</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p src<span class=\"regexp\">/ui/</span>styles</span><br><span class=\"line\">touch src<span class=\"regexp\">/ui/</span>styles<span class=\"regexp\">/main.scss</span></span><br></pre></td></tr></table></figure>\n<p>We love and recommend <a href=\"https://ant.design/docs/react/introduce\" target=\"_blank\" rel=\"noopener\">Ant Design</a>. Let’s see how we can add it quickly:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm <span class=\"selector-tag\">i</span> -S antd</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd src/ui/styles</span><br><span class=\"line\">ln -s ../../../node_modules/antd/dist/antd.min.css _antd.scss</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/styles/main.scss</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'_antd'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'_variables'</span>;</span><br></pre></td></tr></table></figure>\n<p>Spin-up some variables:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/styles/_variables.scss</span></span><br><span class=\"line\"><span class=\"variable\">$primaryColor</span>: <span class=\"number\">#333</span>;</span><br></pre></td></tr></table></figure>\n<p>We recommend that you only write scss for presentational components which lie in <code>src/ui/components</code> something like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/components/Button/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (&#123; children &#125;) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">\"c-Button\"</span>&gt;</span>&#123;children&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/components/Button/_style.scss</span></span><br><span class=\"line\"><span class=\"selector-class\">.c-Button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/ui/components/_style.scss</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'./Button/_style.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'./Input/_style.scss'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'./Form/_style.scss'</span>;</span><br></pre></td></tr></table></figure>\n<p>And finally import it in your <code>main.scss</code>:</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'_antd'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'_variables'</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'../components/_style'</span>;</span><br></pre></td></tr></table></figure>\n<p>Note: keep all your presentational components unique so you won’t have any css class collisions.</p>\n<p>It’s important that you follow guidelines and good styling principles: <a href=\"https://sass-guidelin.es/\" target=\"_blank\" rel=\"noopener\">https://sass-guidelin.es/</a></p>\n<p>Enjoy!</p>\n"},{"title":"Accounts","description":"Quickly deploy your app","disqusPage":"Starterpack:Deployment","_content":"\n# Deployment\n\n## PM2 Meteor\n\nYou can setup your server on AWS or DigitalOcean. We recommend you use `Ubuntu 16.04` to quickly deploy without hassles.\n\nWe have the ability to quickly deploy our apps. One of the easiest way to do it, is to use `pm2-meteor`:\n\n```\nnpm i -g pm2-meteor\n```\n\nNow go to your project root:\n\n```\nmkdir -p .deploy/qa\ncd .deploy/qa\npm2-meteor init\n```\n\nAnswer all the questions asked by pm2-meteor.\n\n### Setting up the server\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n```\n\nRun a new shell so it can recognise it, sometimes it doesn't:\n\n```\nbash\n```\n\nInstall the node version\n\n```\nnvm i 8.11.4\nnpm i -g pm2\n```\n\nSetup links because `pm2-meteor` might complain:\n\n```\nsudo ln -s `which node` /usr/bin/node\nsudo ln -s `which npm` /usr/bin/npm\nsudo ln -s `which pm2` /usr/bin/pm2\n```\n\nInstall MongoDB:\nhttps://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/\n\nQuicker:\n\n```\necho \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list\nsudo apt-get update\nsudo apt-get install -y mongodb-org --allow-unauthenticated\nsudo service mongod start\n```\n\nDeploy:\n\n```\ncd .deploy/qa\npm2-meteor deploy\n```\n\nIf you have a multi-core server with 4 processors you can quickly scale like this:\n\n```\npm2-meteor scale 4\n```\n\nSetup deployment script:\n\n```\n\"deploy-qa\": \"cd .deploy/qa && pm2-meteor deploy\"\n```\n\n```\nnpm run deploy-qa\n```\n\n## Alternatives\n\nMup, a docker containerised deployment tool: https://github.com/zodern/meteor-up\n\nOr if you want to use AWS Beanstalkd you can use a `mup` extension: https://github.com/zodern/mup-aws-beanstalk\n\nYou can also use `now` if you prefer: https://github.com/jkrup/meteor-now\n\n## GraphQL Playground\n\nIf you are looking to run the playground in your production app, you have to explicitly say so, because it only runs in development mode.\n\n```js\nimport { initialize } from 'meteor/cultofcoders:apollo';\n\ninitialize(\n  {\n    introspection: true,\n  },\n  {\n    gui: true,\n  }\n);\n```\n\nEnjoy!\n","source":"starterpack/deployment.md","raw":"---\ntitle: Accounts\ndescription: 'Quickly deploy your app'\ndisqusPage: 'Starterpack:Deployment'\n---\n\n# Deployment\n\n## PM2 Meteor\n\nYou can setup your server on AWS or DigitalOcean. We recommend you use `Ubuntu 16.04` to quickly deploy without hassles.\n\nWe have the ability to quickly deploy our apps. One of the easiest way to do it, is to use `pm2-meteor`:\n\n```\nnpm i -g pm2-meteor\n```\n\nNow go to your project root:\n\n```\nmkdir -p .deploy/qa\ncd .deploy/qa\npm2-meteor init\n```\n\nAnswer all the questions asked by pm2-meteor.\n\n### Setting up the server\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n```\n\nRun a new shell so it can recognise it, sometimes it doesn't:\n\n```\nbash\n```\n\nInstall the node version\n\n```\nnvm i 8.11.4\nnpm i -g pm2\n```\n\nSetup links because `pm2-meteor` might complain:\n\n```\nsudo ln -s `which node` /usr/bin/node\nsudo ln -s `which npm` /usr/bin/npm\nsudo ln -s `which pm2` /usr/bin/pm2\n```\n\nInstall MongoDB:\nhttps://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/\n\nQuicker:\n\n```\necho \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list\nsudo apt-get update\nsudo apt-get install -y mongodb-org --allow-unauthenticated\nsudo service mongod start\n```\n\nDeploy:\n\n```\ncd .deploy/qa\npm2-meteor deploy\n```\n\nIf you have a multi-core server with 4 processors you can quickly scale like this:\n\n```\npm2-meteor scale 4\n```\n\nSetup deployment script:\n\n```\n\"deploy-qa\": \"cd .deploy/qa && pm2-meteor deploy\"\n```\n\n```\nnpm run deploy-qa\n```\n\n## Alternatives\n\nMup, a docker containerised deployment tool: https://github.com/zodern/meteor-up\n\nOr if you want to use AWS Beanstalkd you can use a `mup` extension: https://github.com/zodern/mup-aws-beanstalk\n\nYou can also use `now` if you prefer: https://github.com/jkrup/meteor-now\n\n## GraphQL Playground\n\nIf you are looking to run the playground in your production app, you have to explicitly say so, because it only runs in development mode.\n\n```js\nimport { initialize } from 'meteor/cultofcoders:apollo';\n\ninitialize(\n  {\n    introspection: true,\n  },\n  {\n    gui: true,\n  }\n);\n```\n\nEnjoy!\n","date":"2019-01-04T16:14:59.786Z","updated":"2019-01-04T16:14:59.786Z","path":"starterpack/deployment.html","comments":1,"layout":"page","_id":"cjqqmfrh70005s9a4cgv026xp","content":"<h1 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h1><h2 id=\"PM2-Meteor\"><a href=\"#PM2-Meteor\" class=\"headerlink\" title=\"PM2 Meteor\"></a>PM2 Meteor</h2><p>You can setup your server on AWS or DigitalOcean. We recommend you use <code>Ubuntu 16.04</code> to quickly deploy without hassles.</p>\n<p>We have the ability to quickly deploy our apps. One of the easiest way to do it, is to use <code>pm2-meteor</code>:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> -g pm2-meteor</span><br></pre></td></tr></table></figure>\n<p>Now go to your project root:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -<span class=\"keyword\">p</span> .deploy/<span class=\"keyword\">qa</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> .deploy/<span class=\"keyword\">qa</span></span><br><span class=\"line\">pm2-meteor init</span><br></pre></td></tr></table></figure>\n<p>Answer all the questions asked by pm2-meteor.</p>\n<h3 id=\"Setting-up-the-server\"><a href=\"#Setting-up-the-server\" class=\"headerlink\" title=\"Setting up the server\"></a>Setting up the server</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/creationix/</span>nvm<span class=\"regexp\">/v0.33.11/i</span>nstall.sh | bash</span><br></pre></td></tr></table></figure>\n<p>Run a new shell so it can recognise it, sometimes it doesn’t:</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">bash</span></span><br></pre></td></tr></table></figure>\n<p>Install the node version</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"selector-tag\">i</span> <span class=\"number\">8.11</span>.<span class=\"number\">4</span></span><br><span class=\"line\">npm <span class=\"selector-tag\">i</span> -g pm2</span><br></pre></td></tr></table></figure>\n<p>Setup links because <code>pm2-meteor</code> might complain:</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s `which <span class=\"keyword\">node</span><span class=\"title\">` /usr</span>/bin/<span class=\"keyword\">node</span><span class=\"title\"></span></span><br><span class=\"line\"><span class=\"title\">sudo</span> ln -s `which npm` /usr/bin/npm</span><br><span class=\"line\">sudo ln -s `which pm2` /usr/bin/pm2</span><br></pre></td></tr></table></figure>\n<p>Install MongoDB:\n<a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/</a></p>\n<p>Quicker:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"string\">\"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse\"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list</span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> update</span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install -y mongodb-org --allow-unauthenticated</span><br><span class=\"line\">sudo<span class=\"built_in\"> service </span>mongod start</span><br></pre></td></tr></table></figure>\n<p>Deploy:</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">.deploy/qa</span></span><br><span class=\"line\">pm2-meteor <span class=\"keyword\">deploy</span></span><br></pre></td></tr></table></figure>\n<p>If you have a multi-core server with 4 processors you can quickly scale like this:</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2-meteor <span class=\"built_in\">scale</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>Setup deployment script:</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"deploy-qa\"</span>: <span class=\"string\">\"cd .deploy/qa &amp;&amp; pm2-meteor deploy\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">run</span><span class=\"bash\"> deploy-qa</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Alternatives\"><a href=\"#Alternatives\" class=\"headerlink\" title=\"Alternatives\"></a>Alternatives</h2><p>Mup, a docker containerised deployment tool: <a href=\"https://github.com/zodern/meteor-up\" target=\"_blank\" rel=\"noopener\">https://github.com/zodern/meteor-up</a></p>\n<p>Or if you want to use AWS Beanstalkd you can use a <code>mup</code> extension: <a href=\"https://github.com/zodern/mup-aws-beanstalk\" target=\"_blank\" rel=\"noopener\">https://github.com/zodern/mup-aws-beanstalk</a></p>\n<p>You can also use <code>now</code> if you prefer: <a href=\"https://github.com/jkrup/meteor-now\" target=\"_blank\" rel=\"noopener\">https://github.com/jkrup/meteor-now</a></p>\n<h2 id=\"GraphQL-Playground\"><a href=\"#GraphQL-Playground\" class=\"headerlink\" title=\"GraphQL Playground\"></a>GraphQL Playground</h2><p>If you are looking to run the playground in your production app, you have to explicitly say so, because it only runs in development mode.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; initialize &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">initialize(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    introspection: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    gui: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Enjoy!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h1><h2 id=\"PM2-Meteor\"><a href=\"#PM2-Meteor\" class=\"headerlink\" title=\"PM2 Meteor\"></a>PM2 Meteor</h2><p>You can setup your server on AWS or DigitalOcean. We recommend you use <code>Ubuntu 16.04</code> to quickly deploy without hassles.</p>\n<p>We have the ability to quickly deploy our apps. One of the easiest way to do it, is to use <code>pm2-meteor</code>:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> -g pm2-meteor</span><br></pre></td></tr></table></figure>\n<p>Now go to your project root:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -<span class=\"keyword\">p</span> .deploy/<span class=\"keyword\">qa</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> .deploy/<span class=\"keyword\">qa</span></span><br><span class=\"line\">pm2-meteor init</span><br></pre></td></tr></table></figure>\n<p>Answer all the questions asked by pm2-meteor.</p>\n<h3 id=\"Setting-up-the-server\"><a href=\"#Setting-up-the-server\" class=\"headerlink\" title=\"Setting up the server\"></a>Setting up the server</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/creationix/</span>nvm<span class=\"regexp\">/v0.33.11/i</span>nstall.sh | bash</span><br></pre></td></tr></table></figure>\n<p>Run a new shell so it can recognise it, sometimes it doesn’t:</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">bash</span></span><br></pre></td></tr></table></figure>\n<p>Install the node version</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"selector-tag\">i</span> <span class=\"number\">8.11</span>.<span class=\"number\">4</span></span><br><span class=\"line\">npm <span class=\"selector-tag\">i</span> -g pm2</span><br></pre></td></tr></table></figure>\n<p>Setup links because <code>pm2-meteor</code> might complain:</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s `which <span class=\"keyword\">node</span><span class=\"title\">` /usr</span>/bin/<span class=\"keyword\">node</span><span class=\"title\"></span></span><br><span class=\"line\"><span class=\"title\">sudo</span> ln -s `which npm` /usr/bin/npm</span><br><span class=\"line\">sudo ln -s `which pm2` /usr/bin/pm2</span><br></pre></td></tr></table></figure>\n<p>Install MongoDB:\n<a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/</a></p>\n<p>Quicker:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"string\">\"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse\"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list</span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> update</span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install -y mongodb-org --allow-unauthenticated</span><br><span class=\"line\">sudo<span class=\"built_in\"> service </span>mongod start</span><br></pre></td></tr></table></figure>\n<p>Deploy:</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">.deploy/qa</span></span><br><span class=\"line\">pm2-meteor <span class=\"keyword\">deploy</span></span><br></pre></td></tr></table></figure>\n<p>If you have a multi-core server with 4 processors you can quickly scale like this:</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2-meteor <span class=\"built_in\">scale</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>Setup deployment script:</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"deploy-qa\"</span>: <span class=\"string\">\"cd .deploy/qa &amp;&amp; pm2-meteor deploy\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">run</span><span class=\"bash\"> deploy-qa</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Alternatives\"><a href=\"#Alternatives\" class=\"headerlink\" title=\"Alternatives\"></a>Alternatives</h2><p>Mup, a docker containerised deployment tool: <a href=\"https://github.com/zodern/meteor-up\" target=\"_blank\" rel=\"noopener\">https://github.com/zodern/meteor-up</a></p>\n<p>Or if you want to use AWS Beanstalkd you can use a <code>mup</code> extension: <a href=\"https://github.com/zodern/mup-aws-beanstalk\" target=\"_blank\" rel=\"noopener\">https://github.com/zodern/mup-aws-beanstalk</a></p>\n<p>You can also use <code>now</code> if you prefer: <a href=\"https://github.com/jkrup/meteor-now\" target=\"_blank\" rel=\"noopener\">https://github.com/jkrup/meteor-now</a></p>\n<h2 id=\"GraphQL-Playground\"><a href=\"#GraphQL-Playground\" class=\"headerlink\" title=\"GraphQL Playground\"></a>GraphQL Playground</h2><p>If you are looking to run the playground in your production app, you have to explicitly say so, because it only runs in development mode.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; initialize &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">initialize(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    introspection: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    gui: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Enjoy!</p>\n"},{"title":"Mutations","description":"Lets create a form and send it to the server!","disqusPage":"Recipes:Mutations","_content":"\n# Mutations\n\nIn this chapter, we're gonna create a Form from scratch, and send the data to the server. We are not going to use the database, this is for showing you the main concepts of how to perform mutations.\n\nThere is really no main difference between `Query` or `Mutation` in the way you use GraphQL API. They are literally the same. The distinction has been introduced to separate operations that modify the state on the servers vs operations that just fetch data without affecting anything.\n\nLet's define our module:\n\n```js\n// src/api/modules/item/index.js\n\nexport default {\n  typeDefs: `\n    type Item {\n      _id: Int!\n      name: String!\n      isAvailable: Boolean\n    }\n\n    input ItemCreateInput {\n      name: String!\n      isAvailable: Boolean!\n    }\n\n    type Mutation {\n      itemsInsert(item: ItemCreateInput!): Item\n    }\n  `,\n  resolvers: {\n    Mutation: {\n      itemsInsert(_, args) {\n        console.log(`I received`, args);\n        const { item } = args;\n\n        // Let's mock a database insertion\n        // We're not really performing anything on the database\n\n        item._id = 10;\n        return item;\n      },\n    },\n  },\n};\n```\n\nBy now you should know what an `input` is and how to create a form.\n\nLet's create the form:\n\n```js\nimport React from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { AutoForm } from 'uniforms-antd';\nimport SimpleSchema from 'simpl-schema';\n\nconst ItemCreateSchema = new SimpleSchema({\n  name: {\n    type: String,\n  },\n  isAvailable: {\n    type: Boolean,\n    optional: true,\n  },\n});\n\nconst ITEMS_INSERT = gql`\n  mutation itemsInsert($item: ItemCreateInput!) {\n    itemsInsert(item: $item) {\n      _id\n    }\n  }\n`;\n\n// AutoForm auto-generates your form based on the schema you provided!\nconst ItemForm = ({ onSubmit }) => (\n  <AutoForm schema={ItemCreateSchema} onSubmit={onSubmit} id=\"item-create\" />\n);\n\nexport default () => (\n  <Mutation mutation={ITEMS_INSERT}>\n    {mutate => {\n      return (\n        <ItemForm\n          onSubmit={item =>\n            mutate({ variables: { item } }).then(response =>\n              console.log(`I received`, response)\n            )\n          }\n        />\n      );\n    }}\n  </Mutation>\n);\n```\n\nNow after you added the route, you will be able to just click **Submit** and see first the logs on the server, and then the response on the client.\n\nFeel free to read more about `<Mutation>` component here:\nhttps://www.apollographql.com/docs/react/essentials/mutations.html\n","source":"recipes/mutations.md","raw":"---\ntitle: Mutations\ndescription: 'Lets create a form and send it to the server!'\ndisqusPage: 'Recipes:Mutations'\n---\n\n# Mutations\n\nIn this chapter, we're gonna create a Form from scratch, and send the data to the server. We are not going to use the database, this is for showing you the main concepts of how to perform mutations.\n\nThere is really no main difference between `Query` or `Mutation` in the way you use GraphQL API. They are literally the same. The distinction has been introduced to separate operations that modify the state on the servers vs operations that just fetch data without affecting anything.\n\nLet's define our module:\n\n```js\n// src/api/modules/item/index.js\n\nexport default {\n  typeDefs: `\n    type Item {\n      _id: Int!\n      name: String!\n      isAvailable: Boolean\n    }\n\n    input ItemCreateInput {\n      name: String!\n      isAvailable: Boolean!\n    }\n\n    type Mutation {\n      itemsInsert(item: ItemCreateInput!): Item\n    }\n  `,\n  resolvers: {\n    Mutation: {\n      itemsInsert(_, args) {\n        console.log(`I received`, args);\n        const { item } = args;\n\n        // Let's mock a database insertion\n        // We're not really performing anything on the database\n\n        item._id = 10;\n        return item;\n      },\n    },\n  },\n};\n```\n\nBy now you should know what an `input` is and how to create a form.\n\nLet's create the form:\n\n```js\nimport React from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { AutoForm } from 'uniforms-antd';\nimport SimpleSchema from 'simpl-schema';\n\nconst ItemCreateSchema = new SimpleSchema({\n  name: {\n    type: String,\n  },\n  isAvailable: {\n    type: Boolean,\n    optional: true,\n  },\n});\n\nconst ITEMS_INSERT = gql`\n  mutation itemsInsert($item: ItemCreateInput!) {\n    itemsInsert(item: $item) {\n      _id\n    }\n  }\n`;\n\n// AutoForm auto-generates your form based on the schema you provided!\nconst ItemForm = ({ onSubmit }) => (\n  <AutoForm schema={ItemCreateSchema} onSubmit={onSubmit} id=\"item-create\" />\n);\n\nexport default () => (\n  <Mutation mutation={ITEMS_INSERT}>\n    {mutate => {\n      return (\n        <ItemForm\n          onSubmit={item =>\n            mutate({ variables: { item } }).then(response =>\n              console.log(`I received`, response)\n            )\n          }\n        />\n      );\n    }}\n  </Mutation>\n);\n```\n\nNow after you added the route, you will be able to just click **Submit** and see first the logs on the server, and then the response on the client.\n\nFeel free to read more about `<Mutation>` component here:\nhttps://www.apollographql.com/docs/react/essentials/mutations.html\n","date":"2018-08-31T12:51:19.868Z","updated":"2018-08-31T12:51:19.868Z","path":"recipes/mutations.html","comments":1,"layout":"page","_id":"cjqqmfrh80006s9a40mz3wgyk","content":"<h1 id=\"Mutations\"><a href=\"#Mutations\" class=\"headerlink\" title=\"Mutations\"></a>Mutations</h1><p>In this chapter, we’re gonna create a Form from scratch, and send the data to the server. We are not going to use the database, this is for showing you the main concepts of how to perform mutations.</p>\n<p>There is really no main difference between <code>Query</code> or <code>Mutation</code> in the way you use GraphQL API. They are literally the same. The distinction has been introduced to separate operations that modify the state on the servers vs operations that just fetch data without affecting anything.</p>\n<p>Let’s define our module:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/item/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    type Item &#123;</span></span><br><span class=\"line\"><span class=\"string\">      _id: Int!</span></span><br><span class=\"line\"><span class=\"string\">      name: String!</span></span><br><span class=\"line\"><span class=\"string\">      isAvailable: Boolean</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    input ItemCreateInput &#123;</span></span><br><span class=\"line\"><span class=\"string\">      name: String!</span></span><br><span class=\"line\"><span class=\"string\">      isAvailable: Boolean!</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    type Mutation &#123;</span></span><br><span class=\"line\"><span class=\"string\">      itemsInsert(item: ItemCreateInput!): Item</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Mutation: &#123;</span><br><span class=\"line\">      itemsInsert(_, args) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`I received`</span>, args);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; item &#125; = args;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Let's mock a database insertion</span></span><br><span class=\"line\">        <span class=\"comment\">// We're not really performing anything on the database</span></span><br><span class=\"line\"></span><br><span class=\"line\">        item._id = <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>By now you should know what an <code>input</code> is and how to create a form.</p>\n<p>Let’s create the form:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Mutation &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gql <span class=\"keyword\">from</span> <span class=\"string\">'graphql-tag'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AutoForm &#125; <span class=\"keyword\">from</span> <span class=\"string\">'uniforms-antd'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleSchema <span class=\"keyword\">from</span> <span class=\"string\">'simpl-schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ItemCreateSchema = <span class=\"keyword\">new</span> SimpleSchema(&#123;</span><br><span class=\"line\">  name: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  isAvailable: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">    optional: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ITEMS_INSERT = gql<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  mutation itemsInsert($item: ItemCreateInput!) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    itemsInsert(item: $item) &#123;</span></span><br><span class=\"line\"><span class=\"string\">      _id</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AutoForm auto-generates your form based on the schema you provided!</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ItemForm = <span class=\"function\">(<span class=\"params\">&#123; onSubmit &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">  &lt;AutoForm schema=&#123;ItemCreateSchema&#125; onSubmit=&#123;onSubmit&#125; id=<span class=\"string\">\"item-create\"</span> /&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; (</span><br><span class=\"line\">  &lt;Mutation mutation=&#123;ITEMS_INSERT&#125;&gt;</span><br><span class=\"line\">    &#123;mutate =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;ItemForm</span><br><span class=\"line\">          onSubmit=&#123;item =&gt;</span><br><span class=\"line\">            mutate(&#123; <span class=\"attr\">variables</span>: &#123; item &#125; &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span></span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">`I received`</span>, response)</span><br><span class=\"line\">            )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Mutation&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>Now after you added the route, you will be able to just click <strong>Submit</strong> and see first the logs on the server, and then the response on the client.</p>\n<p>Feel free to read more about <code>&lt;Mutation&gt;</code> component here:\n<a href=\"https://www.apollographql.com/docs/react/essentials/mutations.html\" target=\"_blank\" rel=\"noopener\">https://www.apollographql.com/docs/react/essentials/mutations.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mutations\"><a href=\"#Mutations\" class=\"headerlink\" title=\"Mutations\"></a>Mutations</h1><p>In this chapter, we’re gonna create a Form from scratch, and send the data to the server. We are not going to use the database, this is for showing you the main concepts of how to perform mutations.</p>\n<p>There is really no main difference between <code>Query</code> or <code>Mutation</code> in the way you use GraphQL API. They are literally the same. The distinction has been introduced to separate operations that modify the state on the servers vs operations that just fetch data without affecting anything.</p>\n<p>Let’s define our module:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/item/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    type Item &#123;</span></span><br><span class=\"line\"><span class=\"string\">      _id: Int!</span></span><br><span class=\"line\"><span class=\"string\">      name: String!</span></span><br><span class=\"line\"><span class=\"string\">      isAvailable: Boolean</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    input ItemCreateInput &#123;</span></span><br><span class=\"line\"><span class=\"string\">      name: String!</span></span><br><span class=\"line\"><span class=\"string\">      isAvailable: Boolean!</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    type Mutation &#123;</span></span><br><span class=\"line\"><span class=\"string\">      itemsInsert(item: ItemCreateInput!): Item</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Mutation: &#123;</span><br><span class=\"line\">      itemsInsert(_, args) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`I received`</span>, args);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; item &#125; = args;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Let's mock a database insertion</span></span><br><span class=\"line\">        <span class=\"comment\">// We're not really performing anything on the database</span></span><br><span class=\"line\"></span><br><span class=\"line\">        item._id = <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>By now you should know what an <code>input</code> is and how to create a form.</p>\n<p>Let’s create the form:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Mutation &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> gql <span class=\"keyword\">from</span> <span class=\"string\">'graphql-tag'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AutoForm &#125; <span class=\"keyword\">from</span> <span class=\"string\">'uniforms-antd'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleSchema <span class=\"keyword\">from</span> <span class=\"string\">'simpl-schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ItemCreateSchema = <span class=\"keyword\">new</span> SimpleSchema(&#123;</span><br><span class=\"line\">  name: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  isAvailable: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">    optional: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ITEMS_INSERT = gql<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  mutation itemsInsert($item: ItemCreateInput!) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    itemsInsert(item: $item) &#123;</span></span><br><span class=\"line\"><span class=\"string\">      _id</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AutoForm auto-generates your form based on the schema you provided!</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ItemForm = <span class=\"function\">(<span class=\"params\">&#123; onSubmit &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">  &lt;AutoForm schema=&#123;ItemCreateSchema&#125; onSubmit=&#123;onSubmit&#125; id=<span class=\"string\">\"item-create\"</span> /&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; (</span><br><span class=\"line\">  &lt;Mutation mutation=&#123;ITEMS_INSERT&#125;&gt;</span><br><span class=\"line\">    &#123;mutate =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;ItemForm</span><br><span class=\"line\">          onSubmit=&#123;item =&gt;</span><br><span class=\"line\">            mutate(&#123; <span class=\"attr\">variables</span>: &#123; item &#125; &#125;).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span></span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">`I received`</span>, response)</span><br><span class=\"line\">            )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Mutation&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>Now after you added the route, you will be able to just click <strong>Submit</strong> and see first the logs on the server, and then the response on the client.</p>\n<p>Feel free to read more about <code>&lt;Mutation&gt;</code> component here:\n<a href=\"https://www.apollographql.com/docs/react/essentials/mutations.html\" target=\"_blank\" rel=\"noopener\">https://www.apollographql.com/docs/react/essentials/mutations.html</a></p>\n"},{"title":"Accounts","description":"Quickly integrate a stable and secure user system","disqusPage":"Starterpack:Accounts","_content":"\n# Meteor Accounts\n\n## Install\n\n```\nmeteor add accounts-password\nmeteor npm i -S bcrypt meteor-apollo-accounts\nmeteor add cultofcoders:apollo-accounts\n```\n\nMake sure you have a type called `User` already defined and loaded, otherwise it will throw an exception.\n\n```js\n// file: src/api/modules/accounts.js\nimport { initAccounts } from 'meteor/cultofcoders:apollo-accounts';\nimport { load } from 'graphql-load';\n\n// Load all accounts related resolvers and type definitions into graphql-loader\nconst AccountsModule = initAccounts({\n  loginWithFacebook: false,\n  loginWithGoogle: false,\n  loginWithLinkedIn: false,\n  loginWithPassword: true,\n}); // returns { typeDefs, resolvers }\n\nexport default AccountsModule;\n```\n\nIn Apollo your resolver receives `root`, `args` and `context`. Inside `context` we store the current `userId` and `user`:\n\nThe data we fetch for user can be customised via config:\n\n```js\n// file: server/\nexport default {\n  Query: {\n    invoices(root, args, { user, userId }) {\n      return Invoices.find({\n        userId,\n      }).fetch();\n    },\n  },\n};\n```\n\n```js\nimport { initialize } from 'meteor/cultofcoders:apollo';\n\ninitialize({}, {\n  // You can configure your default fields to fetch on each GraphQL request\n  // This works with Subscriptions as well\n  userFields: {\n    _id: 1,\n    roles: 1,\n  }\n}),\n```\n\nIf you want to test authentication live and you don't yet have a client-side setup. Just create a user:\n\n```js\nmutation {\n  createUser(\n    username: \"cultofcoders\",\n    plainPassword: \"12345\",\n  ) {\n    token\n  }\n}\n```\n\nCreate a quick `me` query:\n\n```js\nimport { load } from 'meteor/cultofcoders:apollo';\n\nconst typeDefs = `\n  type Query {\n    me: User\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    me(_, args, context) {\n      return Meteor.users.findOne(context.userId);\n    },\n  },\n};\n\nload({\n  typeDefs,\n  resolvers,\n});\n```\n\nAnd try it out:\n\n```js\nquery {\n  me {\n    _id\n  }\n}\n```\n\nAnd also register the proper clear-outs for live subscription authentication:\n\n```js\n// file: client/main.js\nimport { initialize } from 'meteor/cultofcoders:apollo';\nimport { onTokenChange } from 'meteor-apollo-accounts';\n\n// Preferably you instantiate it in a different place\nconst { client, wsLink } = initialize();\n\nonTokenChange(function() {\n  client.resetStore();\n  wsLink.subscriptionClient.close(true); // it will restart the websocket connection\n});\n```\n\nTo use them nicely inside your client:\n\n```\nmeteor npm i -S bcrypt meteor-apollo-accounts\n```\n\nRead here: https://github.com/cult-of-coders/meteor-apollo-accounts#methods\n\nIf you are using SSR and want to benefit from authentication for server-renders, check out this comment https://github.com/apollographql/meteor-integration/issues/116#issuecomment-370923220\n\nIf you wish to customize the mutations or resolvers exposed you can load different ones, after you loaded the ones from the package:\n\n```js\nload({\n  typeDefs: `\n    createUser(): String\n  `,\n  resolvers: {\n    Mutation: {\n      createUser() { ... }\n    }\n  }\n})\n```\n\n---\n\n### [Table of Contents](index.md)\n","source":"starterpack/accounts.md","raw":"---\ntitle: Accounts\ndescription: 'Quickly integrate a stable and secure user system'\ndisqusPage: 'Starterpack:Accounts'\n---\n\n# Meteor Accounts\n\n## Install\n\n```\nmeteor add accounts-password\nmeteor npm i -S bcrypt meteor-apollo-accounts\nmeteor add cultofcoders:apollo-accounts\n```\n\nMake sure you have a type called `User` already defined and loaded, otherwise it will throw an exception.\n\n```js\n// file: src/api/modules/accounts.js\nimport { initAccounts } from 'meteor/cultofcoders:apollo-accounts';\nimport { load } from 'graphql-load';\n\n// Load all accounts related resolvers and type definitions into graphql-loader\nconst AccountsModule = initAccounts({\n  loginWithFacebook: false,\n  loginWithGoogle: false,\n  loginWithLinkedIn: false,\n  loginWithPassword: true,\n}); // returns { typeDefs, resolvers }\n\nexport default AccountsModule;\n```\n\nIn Apollo your resolver receives `root`, `args` and `context`. Inside `context` we store the current `userId` and `user`:\n\nThe data we fetch for user can be customised via config:\n\n```js\n// file: server/\nexport default {\n  Query: {\n    invoices(root, args, { user, userId }) {\n      return Invoices.find({\n        userId,\n      }).fetch();\n    },\n  },\n};\n```\n\n```js\nimport { initialize } from 'meteor/cultofcoders:apollo';\n\ninitialize({}, {\n  // You can configure your default fields to fetch on each GraphQL request\n  // This works with Subscriptions as well\n  userFields: {\n    _id: 1,\n    roles: 1,\n  }\n}),\n```\n\nIf you want to test authentication live and you don't yet have a client-side setup. Just create a user:\n\n```js\nmutation {\n  createUser(\n    username: \"cultofcoders\",\n    plainPassword: \"12345\",\n  ) {\n    token\n  }\n}\n```\n\nCreate a quick `me` query:\n\n```js\nimport { load } from 'meteor/cultofcoders:apollo';\n\nconst typeDefs = `\n  type Query {\n    me: User\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    me(_, args, context) {\n      return Meteor.users.findOne(context.userId);\n    },\n  },\n};\n\nload({\n  typeDefs,\n  resolvers,\n});\n```\n\nAnd try it out:\n\n```js\nquery {\n  me {\n    _id\n  }\n}\n```\n\nAnd also register the proper clear-outs for live subscription authentication:\n\n```js\n// file: client/main.js\nimport { initialize } from 'meteor/cultofcoders:apollo';\nimport { onTokenChange } from 'meteor-apollo-accounts';\n\n// Preferably you instantiate it in a different place\nconst { client, wsLink } = initialize();\n\nonTokenChange(function() {\n  client.resetStore();\n  wsLink.subscriptionClient.close(true); // it will restart the websocket connection\n});\n```\n\nTo use them nicely inside your client:\n\n```\nmeteor npm i -S bcrypt meteor-apollo-accounts\n```\n\nRead here: https://github.com/cult-of-coders/meteor-apollo-accounts#methods\n\nIf you are using SSR and want to benefit from authentication for server-renders, check out this comment https://github.com/apollographql/meteor-integration/issues/116#issuecomment-370923220\n\nIf you wish to customize the mutations or resolvers exposed you can load different ones, after you loaded the ones from the package:\n\n```js\nload({\n  typeDefs: `\n    createUser(): String\n  `,\n  resolvers: {\n    Mutation: {\n      createUser() { ... }\n    }\n  }\n})\n```\n\n---\n\n### [Table of Contents](index.md)\n","date":"2018-08-31T12:51:19.868Z","updated":"2018-08-31T12:51:19.868Z","path":"starterpack/accounts.html","comments":1,"layout":"page","_id":"cjqqmfrhb0007s9a4a43ust0w","content":"<h1 id=\"Meteor-Accounts\"><a href=\"#Meteor-Accounts\" class=\"headerlink\" title=\"Meteor Accounts\"></a>Meteor Accounts</h1><h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> accounts-password</span></span><br><span class=\"line\"><span class=\"bash\">meteor npm i -S bcrypt meteor-apollo-accounts</span></span><br><span class=\"line\"><span class=\"bash\">meteor add cultofcoders:apollo-accounts</span></span><br></pre></td></tr></table></figure>\n<p>Make sure you have a type called <code>User</code> already defined and loaded, otherwise it will throw an exception.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: src/api/modules/accounts.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initAccounts &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo-accounts'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; load &#125; <span class=\"keyword\">from</span> <span class=\"string\">'graphql-load'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Load all accounts related resolvers and type definitions into graphql-loader</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> AccountsModule = initAccounts(&#123;</span><br><span class=\"line\">  loginWithFacebook: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  loginWithGoogle: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  loginWithLinkedIn: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  loginWithPassword: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;); <span class=\"comment\">// returns &#123; typeDefs, resolvers &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> AccountsModule;</span><br></pre></td></tr></table></figure>\n<p>In Apollo your resolver receives <code>root</code>, <code>args</code> and <code>context</code>. Inside <code>context</code> we store the current <code>userId</code> and <code>user</code>:</p>\n<p>The data we fetch for user can be customised via config:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: server/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  Query: &#123;</span><br><span class=\"line\">    invoices(root, args, &#123; user, userId &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Invoices.find(&#123;</span><br><span class=\"line\">        userId,</span><br><span class=\"line\">      &#125;).fetch();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; initialize &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">initialize(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// You can configure your default fields to fetch on each GraphQL request</span></span><br><span class=\"line\">  <span class=\"comment\">// This works with Subscriptions as well</span></span><br><span class=\"line\">  userFields: &#123;</span><br><span class=\"line\">    _id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    roles: <span class=\"number\">1</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<p>If you want to test authentication live and you don’t yet have a client-side setup. Just create a user:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutation &#123;</span><br><span class=\"line\">  createUser(</span><br><span class=\"line\">    username: <span class=\"string\">\"cultofcoders\"</span>,</span><br><span class=\"line\">    plainPassword: <span class=\"string\">\"12345\"</span>,</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Create a quick <code>me</code> query:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; load &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> typeDefs = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">    me: User</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> resolvers = &#123;</span><br><span class=\"line\">  Query: &#123;</span><br><span class=\"line\">    me(_, args, context) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Meteor.users.findOne(context.userId);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">load(&#123;</span><br><span class=\"line\">  typeDefs,</span><br><span class=\"line\">  resolvers,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>And try it out:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query &#123;</span><br><span class=\"line\">  me &#123;</span><br><span class=\"line\">    _id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And also register the proper clear-outs for live subscription authentication:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: client/main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initialize &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; onTokenChange &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor-apollo-accounts'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Preferably you instantiate it in a different place</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; client, wsLink &#125; = initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">onTokenChange(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  client.resetStore();</span><br><span class=\"line\">  wsLink.subscriptionClient.close(<span class=\"literal\">true</span>); <span class=\"comment\">// it will restart the websocket connection</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>To use them nicely inside your client:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm <span class=\"selector-tag\">i</span> -S bcrypt meteor-apollo-accounts</span><br></pre></td></tr></table></figure>\n<p>Read here: <a href=\"https://github.com/cult-of-coders/meteor-apollo-accounts#methods\" target=\"_blank\" rel=\"noopener\">https://github.com/cult-of-coders/meteor-apollo-accounts#methods</a></p>\n<p>If you are using SSR and want to benefit from authentication for server-renders, check out this comment <a href=\"https://github.com/apollographql/meteor-integration/issues/116#issuecomment-370923220\" target=\"_blank\" rel=\"noopener\">https://github.com/apollographql/meteor-integration/issues/116#issuecomment-370923220</a></p>\n<p>If you wish to customize the mutations or resolvers exposed you can load different ones, after you loaded the ones from the package:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">load(&#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    createUser(): String</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Mutation: &#123;</span><br><span class=\"line\">      createUser() &#123; ... &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a><a href=\"index.md\">Table of Contents</a></h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Meteor-Accounts\"><a href=\"#Meteor-Accounts\" class=\"headerlink\" title=\"Meteor Accounts\"></a>Meteor Accounts</h1><h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> accounts-password</span></span><br><span class=\"line\"><span class=\"bash\">meteor npm i -S bcrypt meteor-apollo-accounts</span></span><br><span class=\"line\"><span class=\"bash\">meteor add cultofcoders:apollo-accounts</span></span><br></pre></td></tr></table></figure>\n<p>Make sure you have a type called <code>User</code> already defined and loaded, otherwise it will throw an exception.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: src/api/modules/accounts.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initAccounts &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo-accounts'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; load &#125; <span class=\"keyword\">from</span> <span class=\"string\">'graphql-load'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Load all accounts related resolvers and type definitions into graphql-loader</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> AccountsModule = initAccounts(&#123;</span><br><span class=\"line\">  loginWithFacebook: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  loginWithGoogle: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  loginWithLinkedIn: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  loginWithPassword: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;); <span class=\"comment\">// returns &#123; typeDefs, resolvers &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> AccountsModule;</span><br></pre></td></tr></table></figure>\n<p>In Apollo your resolver receives <code>root</code>, <code>args</code> and <code>context</code>. Inside <code>context</code> we store the current <code>userId</code> and <code>user</code>:</p>\n<p>The data we fetch for user can be customised via config:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: server/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  Query: &#123;</span><br><span class=\"line\">    invoices(root, args, &#123; user, userId &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Invoices.find(&#123;</span><br><span class=\"line\">        userId,</span><br><span class=\"line\">      &#125;).fetch();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; initialize &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">initialize(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// You can configure your default fields to fetch on each GraphQL request</span></span><br><span class=\"line\">  <span class=\"comment\">// This works with Subscriptions as well</span></span><br><span class=\"line\">  userFields: &#123;</span><br><span class=\"line\">    _id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    roles: <span class=\"number\">1</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n<p>If you want to test authentication live and you don’t yet have a client-side setup. Just create a user:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutation &#123;</span><br><span class=\"line\">  createUser(</span><br><span class=\"line\">    username: <span class=\"string\">\"cultofcoders\"</span>,</span><br><span class=\"line\">    plainPassword: <span class=\"string\">\"12345\"</span>,</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Create a quick <code>me</code> query:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; load &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> typeDefs = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">    me: User</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> resolvers = &#123;</span><br><span class=\"line\">  Query: &#123;</span><br><span class=\"line\">    me(_, args, context) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Meteor.users.findOne(context.userId);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">load(&#123;</span><br><span class=\"line\">  typeDefs,</span><br><span class=\"line\">  resolvers,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>And try it out:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query &#123;</span><br><span class=\"line\">  me &#123;</span><br><span class=\"line\">    _id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And also register the proper clear-outs for live subscription authentication:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: client/main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initialize &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; onTokenChange &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor-apollo-accounts'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Preferably you instantiate it in a different place</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; client, wsLink &#125; = initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">onTokenChange(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  client.resetStore();</span><br><span class=\"line\">  wsLink.subscriptionClient.close(<span class=\"literal\">true</span>); <span class=\"comment\">// it will restart the websocket connection</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>To use them nicely inside your client:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm <span class=\"selector-tag\">i</span> -S bcrypt meteor-apollo-accounts</span><br></pre></td></tr></table></figure>\n<p>Read here: <a href=\"https://github.com/cult-of-coders/meteor-apollo-accounts#methods\" target=\"_blank\" rel=\"noopener\">https://github.com/cult-of-coders/meteor-apollo-accounts#methods</a></p>\n<p>If you are using SSR and want to benefit from authentication for server-renders, check out this comment <a href=\"https://github.com/apollographql/meteor-integration/issues/116#issuecomment-370923220\" target=\"_blank\" rel=\"noopener\">https://github.com/apollographql/meteor-integration/issues/116#issuecomment-370923220</a></p>\n<p>If you wish to customize the mutations or resolvers exposed you can load different ones, after you loaded the ones from the package:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">load(&#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    createUser(): String</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Mutation: &#123;</span><br><span class=\"line\">      createUser() &#123; ... &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a><a href=\"index.md\">Table of Contents</a></h3>"},{"title":"Events","description":"Observe and react to changes in a decoupled manner","disqusPage":"Starterpack:Events","_content":"\n## The Problem\n\nLet's start with the problem. Something happens in your system, like: you add a new item for sale.\n\nWhen this happens you need to do:\n\n- Notify people that may be interested in your sale\n- Send an email to the Admin\n- Charge the person 0.02$ for the fact he posted a new item for sale on your platform\n\nSo far so good, you know that you need to have units of logic (services) for this, so after some coding hours (or minutes!) you come up with these functions:\n\n```js\nnotifyInterestedPeopleInSale(itemId);\nnotifyAdmins(itemId);\nprocessCharging(itemId);\n```\n\nNow you go to your `ItemService` and have something like:\n\n```js\nstatic createItem(data) {\n    const itemId = Items.insert(data);\n\n    notifyInterestedPeopleInSale(itemId);\n    notifyAdmins(itemId);\n    processCharging(itemId);\n}\n```\n\nAnd it seems that you are happy with this. It looks modular and decoupled. However it's not ok because:\n\n- **It knows too much** about other services\n- **It does too much**, it's purpose is to merely create an item, that's it.\n- **It depends on too many modules**, if by any chance you decide to remove admin notifications you need to see wherever you use it and remove it.\n\nBesides that, the name we have is not very verbose, what if we change it?\n\n```js\ncreatePostAndNotifyAdminsAndInterestedPeopleInSaleThenProcessCharging(data);\n```\n\n## The Solution\n\nOk we can't work with something like that, name too long, and we break the single responsability principle.\nIs there any hope for us ?\nCan we have good code when we have a lot of functionality ?\n\nOfcourse, let's rock and roll with the Observer pattern. The observer pattern is so simple to understand:\n\n- When X happens I want to do Y\n- Ability to say X happens\n- Ability to do Y when X happens\n\nIn code translation:\n\n```\nmeteor npm i -S event-emitter\n```\n\n```js\n// file: /src/api/events.js\nimport EventEmitter from 'event-emitter';\n\nconst Emitter = new EventEmitter();\n\nconst Events = {\n  ITEM_CREATED: 'item_created',\n};\n\nexport { Emitter, Events };\n```\n\nNow we need to say to the system that an item has been created:\n\n```js\nimport { Emitter, Events } from '/src/api/events';\n\nfunction createItem(userId, data) {\n  const itemId = Items.insert(data);\n\n  Emitter.emit(Events.ITEM_CREATED, { itemId, userId });\n}\n```\n\nNow, notifications and payment are two modules that aren't necessarily related, they don't really need to know about each other.\nThis is why our listeners, should be close to their code:\n\n```js\n// file: /src/api/notifications/listeners.js\nimport { Emitter, Events } from '/src/api/events';\n\nEmitter.on(Events.ITEM_CREATED, function({ itemId }) {\n  notifyInterestedPeopleInSale(itemId);\n  notifyAdmins(itemId);\n});\n```\n\n```js\n// file: /src/api/payments/listeners.js\nimport { Emitter, Events } from '/src/api/events';\n\nEmitter.on(Events.ITEM_CREATED, function({ itemId }) {\n  processCharging(itemId);\n});\n```\n\nWhat do we exactly gain by using this strategy ?\n\n- You can plug-in additional functionality by listening to events\n- If item creation is done from multiple places, if you want to remove/add functionality you do it in one place\n- It's easy to find what listeners you have if you respect the pattern, simply searching for `Events.ITEM_CREATED` in your project finds you everything you need (listeners, emitters)\n- The code is independent and doesn't know about other functionality, which is the way it should be\n\nWatch the pattern: `MODEL_ACTION: 'model_action'`. Begin all your event names with the subject of interest, and if the event name\nalso needs to contain the one who did an action, like the admin for example: `MODEL_ACTION_BY_ADMIN`\n\nBe very careful with verb tenses, if it's present, then it's before the item creation, if it's past-tense it's after that action has been made:\n\n```js\nEmitter.emit(Events.ITEM_CREATE, { item });\nconst _id = Items.insert(item);\nEmitter.emit(Events.ITEM_CREATED, { _id, item });\n```\n\n**Bottom line**\nWhen we are doing non-related logic inside the service, just dispatch an event and hook in a listener. You are doing yourself a big favor!\n\n## Event Params\n\nWhen you emit an event, send an object as a single parameter, instead of multiple parameters or other types.\nThis gives verbosity to the code.\n\nA common mistake is the fact that when you dispatch an event, you tend to send data,\nwhich would help the listener, especially if it's your first one.\n\nFor example, you dispatch something like:\n\n```js\nEmitter.emit(Events.ITEM_CREATED, {\n  itemPrice: X,\n});\n```\n\nBecause you want this data to be used in the payment processor. However, this is a bad way of sending events, events should be dispatched with object or objectId of their interest and other data related to the Event itself.\n\nBasically the rule is: when you dispatch events, imagine that you don't know about who is going to use them. There aren't any strict rules here.\n\nWhen item is created I want to send:\n\n- Item identification\n- Who added this item\n\nIt's not bad to send the full item, it's up to you, my personal preference is to send ids as much as I can, but there\nare ofcourse scenarios where I'd rather send the full `item` object, because I know a lot of listeners will need it.\n\nDoesn't matter if you do 3 additional finds in your listeners. Most of the times when you do the finds, you will use [Grapher](http://grapher.cultofcoders.com), and fetch only the fields you need.\n\nAren't Events just great ?\n\n## When to use\n\nYou can use them in most situations but I strongly recommend using them when:\n\n- You have to create notifications of any kind (push, app, emails)\n- You have a service that knows too much\n- You want to have something easily pluggable and upluggable in your system\n\n## Testing\n\nEvent listeners **must** delegate their job to services directly, they are proxies. Event Listeners should not contain any logic. Create unit-tests for services, and then you can run an integration test easily.\n","source":"starterpack/events.md","raw":"---\ntitle: 'Events'\ndescription: Observe and react to changes in a decoupled manner\ndisqusPage: 'Starterpack:Events'\n---\n\n## The Problem\n\nLet's start with the problem. Something happens in your system, like: you add a new item for sale.\n\nWhen this happens you need to do:\n\n- Notify people that may be interested in your sale\n- Send an email to the Admin\n- Charge the person 0.02$ for the fact he posted a new item for sale on your platform\n\nSo far so good, you know that you need to have units of logic (services) for this, so after some coding hours (or minutes!) you come up with these functions:\n\n```js\nnotifyInterestedPeopleInSale(itemId);\nnotifyAdmins(itemId);\nprocessCharging(itemId);\n```\n\nNow you go to your `ItemService` and have something like:\n\n```js\nstatic createItem(data) {\n    const itemId = Items.insert(data);\n\n    notifyInterestedPeopleInSale(itemId);\n    notifyAdmins(itemId);\n    processCharging(itemId);\n}\n```\n\nAnd it seems that you are happy with this. It looks modular and decoupled. However it's not ok because:\n\n- **It knows too much** about other services\n- **It does too much**, it's purpose is to merely create an item, that's it.\n- **It depends on too many modules**, if by any chance you decide to remove admin notifications you need to see wherever you use it and remove it.\n\nBesides that, the name we have is not very verbose, what if we change it?\n\n```js\ncreatePostAndNotifyAdminsAndInterestedPeopleInSaleThenProcessCharging(data);\n```\n\n## The Solution\n\nOk we can't work with something like that, name too long, and we break the single responsability principle.\nIs there any hope for us ?\nCan we have good code when we have a lot of functionality ?\n\nOfcourse, let's rock and roll with the Observer pattern. The observer pattern is so simple to understand:\n\n- When X happens I want to do Y\n- Ability to say X happens\n- Ability to do Y when X happens\n\nIn code translation:\n\n```\nmeteor npm i -S event-emitter\n```\n\n```js\n// file: /src/api/events.js\nimport EventEmitter from 'event-emitter';\n\nconst Emitter = new EventEmitter();\n\nconst Events = {\n  ITEM_CREATED: 'item_created',\n};\n\nexport { Emitter, Events };\n```\n\nNow we need to say to the system that an item has been created:\n\n```js\nimport { Emitter, Events } from '/src/api/events';\n\nfunction createItem(userId, data) {\n  const itemId = Items.insert(data);\n\n  Emitter.emit(Events.ITEM_CREATED, { itemId, userId });\n}\n```\n\nNow, notifications and payment are two modules that aren't necessarily related, they don't really need to know about each other.\nThis is why our listeners, should be close to their code:\n\n```js\n// file: /src/api/notifications/listeners.js\nimport { Emitter, Events } from '/src/api/events';\n\nEmitter.on(Events.ITEM_CREATED, function({ itemId }) {\n  notifyInterestedPeopleInSale(itemId);\n  notifyAdmins(itemId);\n});\n```\n\n```js\n// file: /src/api/payments/listeners.js\nimport { Emitter, Events } from '/src/api/events';\n\nEmitter.on(Events.ITEM_CREATED, function({ itemId }) {\n  processCharging(itemId);\n});\n```\n\nWhat do we exactly gain by using this strategy ?\n\n- You can plug-in additional functionality by listening to events\n- If item creation is done from multiple places, if you want to remove/add functionality you do it in one place\n- It's easy to find what listeners you have if you respect the pattern, simply searching for `Events.ITEM_CREATED` in your project finds you everything you need (listeners, emitters)\n- The code is independent and doesn't know about other functionality, which is the way it should be\n\nWatch the pattern: `MODEL_ACTION: 'model_action'`. Begin all your event names with the subject of interest, and if the event name\nalso needs to contain the one who did an action, like the admin for example: `MODEL_ACTION_BY_ADMIN`\n\nBe very careful with verb tenses, if it's present, then it's before the item creation, if it's past-tense it's after that action has been made:\n\n```js\nEmitter.emit(Events.ITEM_CREATE, { item });\nconst _id = Items.insert(item);\nEmitter.emit(Events.ITEM_CREATED, { _id, item });\n```\n\n**Bottom line**\nWhen we are doing non-related logic inside the service, just dispatch an event and hook in a listener. You are doing yourself a big favor!\n\n## Event Params\n\nWhen you emit an event, send an object as a single parameter, instead of multiple parameters or other types.\nThis gives verbosity to the code.\n\nA common mistake is the fact that when you dispatch an event, you tend to send data,\nwhich would help the listener, especially if it's your first one.\n\nFor example, you dispatch something like:\n\n```js\nEmitter.emit(Events.ITEM_CREATED, {\n  itemPrice: X,\n});\n```\n\nBecause you want this data to be used in the payment processor. However, this is a bad way of sending events, events should be dispatched with object or objectId of their interest and other data related to the Event itself.\n\nBasically the rule is: when you dispatch events, imagine that you don't know about who is going to use them. There aren't any strict rules here.\n\nWhen item is created I want to send:\n\n- Item identification\n- Who added this item\n\nIt's not bad to send the full item, it's up to you, my personal preference is to send ids as much as I can, but there\nare ofcourse scenarios where I'd rather send the full `item` object, because I know a lot of listeners will need it.\n\nDoesn't matter if you do 3 additional finds in your listeners. Most of the times when you do the finds, you will use [Grapher](http://grapher.cultofcoders.com), and fetch only the fields you need.\n\nAren't Events just great ?\n\n## When to use\n\nYou can use them in most situations but I strongly recommend using them when:\n\n- You have to create notifications of any kind (push, app, emails)\n- You have a service that knows too much\n- You want to have something easily pluggable and upluggable in your system\n\n## Testing\n\nEvent listeners **must** delegate their job to services directly, they are proxies. Event Listeners should not contain any logic. Create unit-tests for services, and then you can run an integration test easily.\n","date":"2018-08-31T12:51:19.877Z","updated":"2018-08-31T12:51:19.877Z","path":"starterpack/events.html","comments":1,"layout":"page","_id":"cjqqmfrhb0008s9a4miyi0y6v","content":"<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Let’s start with the problem. Something happens in your system, like: you add a new item for sale.</p>\n<p>When this happens you need to do:</p>\n<ul>\n<li>Notify people that may be interested in your sale</li>\n<li>Send an email to the Admin</li>\n<li>Charge the person 0.02$ for the fact he posted a new item for sale on your platform</li>\n</ul>\n<p>So far so good, you know that you need to have units of logic (services) for this, so after some coding hours (or minutes!) you come up with these functions:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">notifyInterestedPeopleInSale(itemId);</span><br><span class=\"line\">notifyAdmins(itemId);</span><br><span class=\"line\">processCharging(itemId);</span><br></pre></td></tr></table></figure>\n<p>Now you go to your <code>ItemService</code> and have something like:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> createItem(data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> itemId = Items.insert(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    notifyInterestedPeopleInSale(itemId);</span><br><span class=\"line\">    notifyAdmins(itemId);</span><br><span class=\"line\">    processCharging(itemId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And it seems that you are happy with this. It looks modular and decoupled. However it’s not ok because:</p>\n<ul>\n<li><strong>It knows too much</strong> about other services</li>\n<li><strong>It does too much</strong>, it’s purpose is to merely create an item, that’s it.</li>\n<li><strong>It depends on too many modules</strong>, if by any chance you decide to remove admin notifications you need to see wherever you use it and remove it.</li>\n</ul>\n<p>Besides that, the name we have is not very verbose, what if we change it?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createPostAndNotifyAdminsAndInterestedPeopleInSaleThenProcessCharging(data);</span><br></pre></td></tr></table></figure>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>Ok we can’t work with something like that, name too long, and we break the single responsability principle.\nIs there any hope for us ?\nCan we have good code when we have a lot of functionality ?</p>\n<p>Ofcourse, let’s rock and roll with the Observer pattern. The observer pattern is so simple to understand:</p>\n<ul>\n<li>When X happens I want to do Y</li>\n<li>Ability to say X happens</li>\n<li>Ability to do Y when X happens</li>\n</ul>\n<p>In code translation:</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm i -S <span class=\"keyword\">event</span>-<span class=\"keyword\">emitter</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /src/api/events.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> EventEmitter <span class=\"keyword\">from</span> <span class=\"string\">'event-emitter'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Emitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Events = &#123;</span><br><span class=\"line\">  ITEM_CREATED: <span class=\"string\">'item_created'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; Emitter, Events &#125;;</span><br></pre></td></tr></table></figure>\n<p>Now we need to say to the system that an item has been created:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Emitter, Events &#125; <span class=\"keyword\">from</span> <span class=\"string\">'/src/api/events'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createItem</span>(<span class=\"params\">userId, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> itemId = Items.insert(data);</span><br><span class=\"line\"></span><br><span class=\"line\">  Emitter.emit(Events.ITEM_CREATED, &#123; itemId, userId &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now, notifications and payment are two modules that aren’t necessarily related, they don’t really need to know about each other.\nThis is why our listeners, should be close to their code:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /src/api/notifications/listeners.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Emitter, Events &#125; <span class=\"keyword\">from</span> <span class=\"string\">'/src/api/events'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Emitter.on(Events.ITEM_CREATED, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; itemId &#125;</span>) </span>&#123;</span><br><span class=\"line\">  notifyInterestedPeopleInSale(itemId);</span><br><span class=\"line\">  notifyAdmins(itemId);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /src/api/payments/listeners.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Emitter, Events &#125; <span class=\"keyword\">from</span> <span class=\"string\">'/src/api/events'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Emitter.on(Events.ITEM_CREATED, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; itemId &#125;</span>) </span>&#123;</span><br><span class=\"line\">  processCharging(itemId);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>What do we exactly gain by using this strategy ?</p>\n<ul>\n<li>You can plug-in additional functionality by listening to events</li>\n<li>If item creation is done from multiple places, if you want to remove/add functionality you do it in one place</li>\n<li>It’s easy to find what listeners you have if you respect the pattern, simply searching for <code>Events.ITEM_CREATED</code> in your project finds you everything you need (listeners, emitters)</li>\n<li>The code is independent and doesn’t know about other functionality, which is the way it should be</li>\n</ul>\n<p>Watch the pattern: <code>MODEL_ACTION: &#39;model_action&#39;</code>. Begin all your event names with the subject of interest, and if the event name\nalso needs to contain the one who did an action, like the admin for example: <code>MODEL_ACTION_BY_ADMIN</code></p>\n<p>Be very careful with verb tenses, if it’s present, then it’s before the item creation, if it’s past-tense it’s after that action has been made:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Emitter.emit(Events.ITEM_CREATE, &#123; item &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> _id = Items.insert(item);</span><br><span class=\"line\">Emitter.emit(Events.ITEM_CREATED, &#123; _id, item &#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>Bottom line</strong>\nWhen we are doing non-related logic inside the service, just dispatch an event and hook in a listener. You are doing yourself a big favor!</p>\n<h2 id=\"Event-Params\"><a href=\"#Event-Params\" class=\"headerlink\" title=\"Event Params\"></a>Event Params</h2><p>When you emit an event, send an object as a single parameter, instead of multiple parameters or other types.\nThis gives verbosity to the code.</p>\n<p>A common mistake is the fact that when you dispatch an event, you tend to send data,\nwhich would help the listener, especially if it’s your first one.</p>\n<p>For example, you dispatch something like:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Emitter.emit(Events.ITEM_CREATED, &#123;</span><br><span class=\"line\">  itemPrice: X,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Because you want this data to be used in the payment processor. However, this is a bad way of sending events, events should be dispatched with object or objectId of their interest and other data related to the Event itself.</p>\n<p>Basically the rule is: when you dispatch events, imagine that you don’t know about who is going to use them. There aren’t any strict rules here.</p>\n<p>When item is created I want to send:</p>\n<ul>\n<li>Item identification</li>\n<li>Who added this item</li>\n</ul>\n<p>It’s not bad to send the full item, it’s up to you, my personal preference is to send ids as much as I can, but there\nare ofcourse scenarios where I’d rather send the full <code>item</code> object, because I know a lot of listeners will need it.</p>\n<p>Doesn’t matter if you do 3 additional finds in your listeners. Most of the times when you do the finds, you will use <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Grapher</a>, and fetch only the fields you need.</p>\n<p>Aren’t Events just great ?</p>\n<h2 id=\"When-to-use\"><a href=\"#When-to-use\" class=\"headerlink\" title=\"When to use\"></a>When to use</h2><p>You can use them in most situations but I strongly recommend using them when:</p>\n<ul>\n<li>You have to create notifications of any kind (push, app, emails)</li>\n<li>You have a service that knows too much</li>\n<li>You want to have something easily pluggable and upluggable in your system</li>\n</ul>\n<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h2><p>Event listeners <strong>must</strong> delegate their job to services directly, they are proxies. Event Listeners should not contain any logic. Create unit-tests for services, and then you can run an integration test easily.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Let’s start with the problem. Something happens in your system, like: you add a new item for sale.</p>\n<p>When this happens you need to do:</p>\n<ul>\n<li>Notify people that may be interested in your sale</li>\n<li>Send an email to the Admin</li>\n<li>Charge the person 0.02$ for the fact he posted a new item for sale on your platform</li>\n</ul>\n<p>So far so good, you know that you need to have units of logic (services) for this, so after some coding hours (or minutes!) you come up with these functions:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">notifyInterestedPeopleInSale(itemId);</span><br><span class=\"line\">notifyAdmins(itemId);</span><br><span class=\"line\">processCharging(itemId);</span><br></pre></td></tr></table></figure>\n<p>Now you go to your <code>ItemService</code> and have something like:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> createItem(data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> itemId = Items.insert(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    notifyInterestedPeopleInSale(itemId);</span><br><span class=\"line\">    notifyAdmins(itemId);</span><br><span class=\"line\">    processCharging(itemId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And it seems that you are happy with this. It looks modular and decoupled. However it’s not ok because:</p>\n<ul>\n<li><strong>It knows too much</strong> about other services</li>\n<li><strong>It does too much</strong>, it’s purpose is to merely create an item, that’s it.</li>\n<li><strong>It depends on too many modules</strong>, if by any chance you decide to remove admin notifications you need to see wherever you use it and remove it.</li>\n</ul>\n<p>Besides that, the name we have is not very verbose, what if we change it?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createPostAndNotifyAdminsAndInterestedPeopleInSaleThenProcessCharging(data);</span><br></pre></td></tr></table></figure>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>Ok we can’t work with something like that, name too long, and we break the single responsability principle.\nIs there any hope for us ?\nCan we have good code when we have a lot of functionality ?</p>\n<p>Ofcourse, let’s rock and roll with the Observer pattern. The observer pattern is so simple to understand:</p>\n<ul>\n<li>When X happens I want to do Y</li>\n<li>Ability to say X happens</li>\n<li>Ability to do Y when X happens</li>\n</ul>\n<p>In code translation:</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm i -S <span class=\"keyword\">event</span>-<span class=\"keyword\">emitter</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /src/api/events.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> EventEmitter <span class=\"keyword\">from</span> <span class=\"string\">'event-emitter'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Emitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Events = &#123;</span><br><span class=\"line\">  ITEM_CREATED: <span class=\"string\">'item_created'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; Emitter, Events &#125;;</span><br></pre></td></tr></table></figure>\n<p>Now we need to say to the system that an item has been created:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Emitter, Events &#125; <span class=\"keyword\">from</span> <span class=\"string\">'/src/api/events'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createItem</span>(<span class=\"params\">userId, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> itemId = Items.insert(data);</span><br><span class=\"line\"></span><br><span class=\"line\">  Emitter.emit(Events.ITEM_CREATED, &#123; itemId, userId &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now, notifications and payment are two modules that aren’t necessarily related, they don’t really need to know about each other.\nThis is why our listeners, should be close to their code:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /src/api/notifications/listeners.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Emitter, Events &#125; <span class=\"keyword\">from</span> <span class=\"string\">'/src/api/events'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Emitter.on(Events.ITEM_CREATED, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; itemId &#125;</span>) </span>&#123;</span><br><span class=\"line\">  notifyInterestedPeopleInSale(itemId);</span><br><span class=\"line\">  notifyAdmins(itemId);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /src/api/payments/listeners.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Emitter, Events &#125; <span class=\"keyword\">from</span> <span class=\"string\">'/src/api/events'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Emitter.on(Events.ITEM_CREATED, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123; itemId &#125;</span>) </span>&#123;</span><br><span class=\"line\">  processCharging(itemId);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>What do we exactly gain by using this strategy ?</p>\n<ul>\n<li>You can plug-in additional functionality by listening to events</li>\n<li>If item creation is done from multiple places, if you want to remove/add functionality you do it in one place</li>\n<li>It’s easy to find what listeners you have if you respect the pattern, simply searching for <code>Events.ITEM_CREATED</code> in your project finds you everything you need (listeners, emitters)</li>\n<li>The code is independent and doesn’t know about other functionality, which is the way it should be</li>\n</ul>\n<p>Watch the pattern: <code>MODEL_ACTION: &#39;model_action&#39;</code>. Begin all your event names with the subject of interest, and if the event name\nalso needs to contain the one who did an action, like the admin for example: <code>MODEL_ACTION_BY_ADMIN</code></p>\n<p>Be very careful with verb tenses, if it’s present, then it’s before the item creation, if it’s past-tense it’s after that action has been made:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Emitter.emit(Events.ITEM_CREATE, &#123; item &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> _id = Items.insert(item);</span><br><span class=\"line\">Emitter.emit(Events.ITEM_CREATED, &#123; _id, item &#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>Bottom line</strong>\nWhen we are doing non-related logic inside the service, just dispatch an event and hook in a listener. You are doing yourself a big favor!</p>\n<h2 id=\"Event-Params\"><a href=\"#Event-Params\" class=\"headerlink\" title=\"Event Params\"></a>Event Params</h2><p>When you emit an event, send an object as a single parameter, instead of multiple parameters or other types.\nThis gives verbosity to the code.</p>\n<p>A common mistake is the fact that when you dispatch an event, you tend to send data,\nwhich would help the listener, especially if it’s your first one.</p>\n<p>For example, you dispatch something like:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Emitter.emit(Events.ITEM_CREATED, &#123;</span><br><span class=\"line\">  itemPrice: X,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Because you want this data to be used in the payment processor. However, this is a bad way of sending events, events should be dispatched with object or objectId of their interest and other data related to the Event itself.</p>\n<p>Basically the rule is: when you dispatch events, imagine that you don’t know about who is going to use them. There aren’t any strict rules here.</p>\n<p>When item is created I want to send:</p>\n<ul>\n<li>Item identification</li>\n<li>Who added this item</li>\n</ul>\n<p>It’s not bad to send the full item, it’s up to you, my personal preference is to send ids as much as I can, but there\nare ofcourse scenarios where I’d rather send the full <code>item</code> object, because I know a lot of listeners will need it.</p>\n<p>Doesn’t matter if you do 3 additional finds in your listeners. Most of the times when you do the finds, you will use <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Grapher</a>, and fetch only the fields you need.</p>\n<p>Aren’t Events just great ?</p>\n<h2 id=\"When-to-use\"><a href=\"#When-to-use\" class=\"headerlink\" title=\"When to use\"></a>When to use</h2><p>You can use them in most situations but I strongly recommend using them when:</p>\n<ul>\n<li>You have to create notifications of any kind (push, app, emails)</li>\n<li>You have a service that knows too much</li>\n<li>You want to have something easily pluggable and upluggable in your system</li>\n</ul>\n<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h2><p>Event listeners <strong>must</strong> delegate their job to services directly, they are proxies. Event Listeners should not contain any logic. Create unit-tests for services, and then you can run an integration test easily.</p>\n"},{"title":"Morpher","description":"Prototype fast and make the client-server abstraction vanish","disqusPage":"Starterpack:Morpher","_content":"\n# Morpher\n\nGives you a way to quickly prototype and make the client-server abstraction disappear. To allow this easy prototyping it communicates with the server through EJSON sending the payload data as a `String` which is deserialised on the server.\n\nThis may be a bit confusing, when you want to use morpher without the npm library `apollo-morpher`, but there shouldn't be scenarios for that.\n\n## Install\n\n```\nmeteor npm i -S apollo-morpher\n```\n\n### Server Usage\n\n```js\n// src/api/modules/user/expose.js\nimport { expose, db } from 'meteor/cultofcoders:apollo';\n\nexpose({\n  users: {\n    type: 'User'\n    collection: () => db.users,\n    // In the mutation methods you can perform propper checks, you get access to the context\n    // You have ability to extract user from ctx `ctx.userId` or `ctx.user`\n    update: (ctx, {selector, modifier, modifiedFields, modifiedTopLevelFields}) => true,\n    insert: (ctx, {document}) => true,\n    remove: (ctx, {selector}) => true,\n    find(ctx, params) {\n      // params is an object\n      // by default filters, options are always empty objects, if they were not passed\n      // if you pass other params filters and options will still be empty objects\n\n      // You have two options here:\n      // 1. Modify params.filters and params.options and don't return anything\n      params.filters.userId = ctx.userId\n\n      // 2. Modify filters options based on other parameters sent out\n      if (params.accepted) {\n        params.filters.accepted = true;\n      }\n\n      // 3. Return astToQueryOptions from Grapher for custom query support\n      // https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md\n      return {\n        $filters: params.filters,\n        $options: params.options\n      }\n    }\n  }\n})\n```\n\nCreate a `exposures.js` inside `src/startup/server` in which you import all exposures before running `initialize()` on the GraphQL server.\n\n### Client Usage\n\n```js\n// Then on the client\nimport db, { setClient } from 'apollo-morpher';\n\n// Set your instantiated Apollo Client\nsetClient(apolloClient);\n\n// Built-in mutations\ndb.users.insert(document).then(({ _id }) => {});\ndb.users.update(selector, modifier).then(response => {});\ndb.users.remove(selector).then(response => {});\n\n// Or define the in object style:\nconst fields = {\n  firstName: 1,\n  lastName: 1,\n  // You can also query the defined links!\n  lastInvoices: {\n    total: 1,\n  },\n};\n\n// Or you could also define the fields in GraphQL style `firstName`\n\ndb.users\n  .find(fields, {\n    filters: {},\n    options: {},\n  })\n  .then(users => {});\n\n// find equivallent .findOne()\ndb.users\n  .findOne(fields, {\n    filters: { _id: 'XXX' },\n  })\n  .then(user => {});\n\n// and for pagination purposes to retrieve the count\ndb.users\n  .count({\n    filters,\n    options,\n  })\n  .then(count => {});\n```\n","source":"starterpack/morpher.md","raw":"---\ntitle: Morpher\ndescription: 'Prototype fast and make the client-server abstraction vanish'\ndisqusPage: 'Starterpack:Morpher'\n---\n\n# Morpher\n\nGives you a way to quickly prototype and make the client-server abstraction disappear. To allow this easy prototyping it communicates with the server through EJSON sending the payload data as a `String` which is deserialised on the server.\n\nThis may be a bit confusing, when you want to use morpher without the npm library `apollo-morpher`, but there shouldn't be scenarios for that.\n\n## Install\n\n```\nmeteor npm i -S apollo-morpher\n```\n\n### Server Usage\n\n```js\n// src/api/modules/user/expose.js\nimport { expose, db } from 'meteor/cultofcoders:apollo';\n\nexpose({\n  users: {\n    type: 'User'\n    collection: () => db.users,\n    // In the mutation methods you can perform propper checks, you get access to the context\n    // You have ability to extract user from ctx `ctx.userId` or `ctx.user`\n    update: (ctx, {selector, modifier, modifiedFields, modifiedTopLevelFields}) => true,\n    insert: (ctx, {document}) => true,\n    remove: (ctx, {selector}) => true,\n    find(ctx, params) {\n      // params is an object\n      // by default filters, options are always empty objects, if they were not passed\n      // if you pass other params filters and options will still be empty objects\n\n      // You have two options here:\n      // 1. Modify params.filters and params.options and don't return anything\n      params.filters.userId = ctx.userId\n\n      // 2. Modify filters options based on other parameters sent out\n      if (params.accepted) {\n        params.filters.accepted = true;\n      }\n\n      // 3. Return astToQueryOptions from Grapher for custom query support\n      // https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md\n      return {\n        $filters: params.filters,\n        $options: params.options\n      }\n    }\n  }\n})\n```\n\nCreate a `exposures.js` inside `src/startup/server` in which you import all exposures before running `initialize()` on the GraphQL server.\n\n### Client Usage\n\n```js\n// Then on the client\nimport db, { setClient } from 'apollo-morpher';\n\n// Set your instantiated Apollo Client\nsetClient(apolloClient);\n\n// Built-in mutations\ndb.users.insert(document).then(({ _id }) => {});\ndb.users.update(selector, modifier).then(response => {});\ndb.users.remove(selector).then(response => {});\n\n// Or define the in object style:\nconst fields = {\n  firstName: 1,\n  lastName: 1,\n  // You can also query the defined links!\n  lastInvoices: {\n    total: 1,\n  },\n};\n\n// Or you could also define the fields in GraphQL style `firstName`\n\ndb.users\n  .find(fields, {\n    filters: {},\n    options: {},\n  })\n  .then(users => {});\n\n// find equivallent .findOne()\ndb.users\n  .findOne(fields, {\n    filters: { _id: 'XXX' },\n  })\n  .then(user => {});\n\n// and for pagination purposes to retrieve the count\ndb.users\n  .count({\n    filters,\n    options,\n  })\n  .then(count => {});\n```\n","date":"2018-08-31T12:51:19.869Z","updated":"2018-08-31T12:51:19.869Z","path":"starterpack/morpher.html","comments":1,"layout":"page","_id":"cjqqmfrhc0009s9a41mam5gzp","content":"<h1 id=\"Morpher\"><a href=\"#Morpher\" class=\"headerlink\" title=\"Morpher\"></a>Morpher</h1><p>Gives you a way to quickly prototype and make the client-server abstraction disappear. To allow this easy prototyping it communicates with the server through EJSON sending the payload data as a <code>String</code> which is deserialised on the server.</p>\n<p>This may be a bit confusing, when you want to use morpher without the npm library <code>apollo-morpher</code>, but there shouldn’t be scenarios for that.</p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm <span class=\"selector-tag\">i</span> -S apollo-morpher</span><br></pre></td></tr></table></figure>\n<h3 id=\"Server-Usage\"><a href=\"#Server-Usage\" class=\"headerlink\" title=\"Server Usage\"></a>Server Usage</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/user/expose.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; expose, db &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">expose(&#123;</span><br><span class=\"line\">  users: &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'User'</span></span><br><span class=\"line\">    collection: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> db.users,</span><br><span class=\"line\">    <span class=\"comment\">// In the mutation methods you can perform propper checks, you get access to the context</span></span><br><span class=\"line\">    <span class=\"comment\">// You have ability to extract user from ctx `ctx.userId` or `ctx.user`</span></span><br><span class=\"line\">    update: <span class=\"function\">(<span class=\"params\">ctx, &#123;selector, modifier, modifiedFields, modifiedTopLevelFields&#125;</span>) =&gt;</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">    insert: <span class=\"function\">(<span class=\"params\">ctx, &#123;<span class=\"built_in\">document</span>&#125;</span>) =&gt;</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">    remove: <span class=\"function\">(<span class=\"params\">ctx, &#123;selector&#125;</span>) =&gt;</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">    find(ctx, params) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// params is an object</span></span><br><span class=\"line\">      <span class=\"comment\">// by default filters, options are always empty objects, if they were not passed</span></span><br><span class=\"line\">      <span class=\"comment\">// if you pass other params filters and options will still be empty objects</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// You have two options here:</span></span><br><span class=\"line\">      <span class=\"comment\">// 1. Modify params.filters and params.options and don't return anything</span></span><br><span class=\"line\">      params.filters.userId = ctx.userId</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Modify filters options based on other parameters sent out</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (params.accepted) &#123;</span><br><span class=\"line\">        params.filters.accepted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 3. Return astToQueryOptions from Grapher for custom query support</span></span><br><span class=\"line\">      <span class=\"comment\">// https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        $filters: params.filters,</span><br><span class=\"line\">        $options: params.options</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Create a <code>exposures.js</code> inside <code>src/startup/server</code> in which you import all exposures before running <code>initialize()</code> on the GraphQL server.</p>\n<h3 id=\"Client-Usage\"><a href=\"#Client-Usage\" class=\"headerlink\" title=\"Client Usage\"></a>Client Usage</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Then on the client</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> db, &#123; setClient &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-morpher'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set your instantiated Apollo Client</span></span><br><span class=\"line\">setClient(apolloClient);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Built-in mutations</span></span><br><span class=\"line\">db.users.insert(<span class=\"built_in\">document</span>).then(<span class=\"function\">(<span class=\"params\">&#123; _id &#125;</span>) =&gt;</span> &#123;&#125;);</span><br><span class=\"line\">db.users.update(selector, modifier).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\">db.users.remove(selector).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or define the in object style:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fields = &#123;</span><br><span class=\"line\">  firstName: <span class=\"number\">1</span>,</span><br><span class=\"line\">  lastName: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"comment\">// You can also query the defined links!</span></span><br><span class=\"line\">  lastInvoices: &#123;</span><br><span class=\"line\">    total: <span class=\"number\">1</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or you could also define the fields in GraphQL style `firstName`</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.users</span><br><span class=\"line\">  .find(fields, &#123;</span><br><span class=\"line\">    filters: &#123;&#125;,</span><br><span class=\"line\">    options: &#123;&#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">users</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// find equivallent .findOne()</span></span><br><span class=\"line\">db.users</span><br><span class=\"line\">  .findOne(fields, &#123;</span><br><span class=\"line\">    filters: &#123; <span class=\"attr\">_id</span>: <span class=\"string\">'XXX'</span> &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// and for pagination purposes to retrieve the count</span></span><br><span class=\"line\">db.users</span><br><span class=\"line\">  .count(&#123;</span><br><span class=\"line\">    filters,</span><br><span class=\"line\">    options,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Morpher\"><a href=\"#Morpher\" class=\"headerlink\" title=\"Morpher\"></a>Morpher</h1><p>Gives you a way to quickly prototype and make the client-server abstraction disappear. To allow this easy prototyping it communicates with the server through EJSON sending the payload data as a <code>String</code> which is deserialised on the server.</p>\n<p>This may be a bit confusing, when you want to use morpher without the npm library <code>apollo-morpher</code>, but there shouldn’t be scenarios for that.</p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm <span class=\"selector-tag\">i</span> -S apollo-morpher</span><br></pre></td></tr></table></figure>\n<h3 id=\"Server-Usage\"><a href=\"#Server-Usage\" class=\"headerlink\" title=\"Server Usage\"></a>Server Usage</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/user/expose.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; expose, db &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">expose(&#123;</span><br><span class=\"line\">  users: &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'User'</span></span><br><span class=\"line\">    collection: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> db.users,</span><br><span class=\"line\">    <span class=\"comment\">// In the mutation methods you can perform propper checks, you get access to the context</span></span><br><span class=\"line\">    <span class=\"comment\">// You have ability to extract user from ctx `ctx.userId` or `ctx.user`</span></span><br><span class=\"line\">    update: <span class=\"function\">(<span class=\"params\">ctx, &#123;selector, modifier, modifiedFields, modifiedTopLevelFields&#125;</span>) =&gt;</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">    insert: <span class=\"function\">(<span class=\"params\">ctx, &#123;<span class=\"built_in\">document</span>&#125;</span>) =&gt;</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">    remove: <span class=\"function\">(<span class=\"params\">ctx, &#123;selector&#125;</span>) =&gt;</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">    find(ctx, params) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// params is an object</span></span><br><span class=\"line\">      <span class=\"comment\">// by default filters, options are always empty objects, if they were not passed</span></span><br><span class=\"line\">      <span class=\"comment\">// if you pass other params filters and options will still be empty objects</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// You have two options here:</span></span><br><span class=\"line\">      <span class=\"comment\">// 1. Modify params.filters and params.options and don't return anything</span></span><br><span class=\"line\">      params.filters.userId = ctx.userId</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Modify filters options based on other parameters sent out</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (params.accepted) &#123;</span><br><span class=\"line\">        params.filters.accepted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 3. Return astToQueryOptions from Grapher for custom query support</span></span><br><span class=\"line\">      <span class=\"comment\">// https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        $filters: params.filters,</span><br><span class=\"line\">        $options: params.options</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Create a <code>exposures.js</code> inside <code>src/startup/server</code> in which you import all exposures before running <code>initialize()</code> on the GraphQL server.</p>\n<h3 id=\"Client-Usage\"><a href=\"#Client-Usage\" class=\"headerlink\" title=\"Client Usage\"></a>Client Usage</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Then on the client</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> db, &#123; setClient &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-morpher'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set your instantiated Apollo Client</span></span><br><span class=\"line\">setClient(apolloClient);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Built-in mutations</span></span><br><span class=\"line\">db.users.insert(<span class=\"built_in\">document</span>).then(<span class=\"function\">(<span class=\"params\">&#123; _id &#125;</span>) =&gt;</span> &#123;&#125;);</span><br><span class=\"line\">db.users.update(selector, modifier).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\">db.users.remove(selector).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or define the in object style:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fields = &#123;</span><br><span class=\"line\">  firstName: <span class=\"number\">1</span>,</span><br><span class=\"line\">  lastName: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"comment\">// You can also query the defined links!</span></span><br><span class=\"line\">  lastInvoices: &#123;</span><br><span class=\"line\">    total: <span class=\"number\">1</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or you could also define the fields in GraphQL style `firstName`</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.users</span><br><span class=\"line\">  .find(fields, &#123;</span><br><span class=\"line\">    filters: &#123;&#125;,</span><br><span class=\"line\">    options: &#123;&#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">users</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// find equivallent .findOne()</span></span><br><span class=\"line\">db.users</span><br><span class=\"line\">  .findOne(fields, &#123;</span><br><span class=\"line\">    filters: &#123; <span class=\"attr\">_id</span>: <span class=\"string\">'XXX'</span> &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// and for pagination purposes to retrieve the count</span></span><br><span class=\"line\">db.users</span><br><span class=\"line\">  .count(&#123;</span><br><span class=\"line\">    filters,</span><br><span class=\"line\">    options,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"Live Queries","description":"How to have reactive/live queries with ease","disqusPage":"Starterpack:Reactivity","_content":"\n```js\nmeteor npm i -S apollo-live-client apollo-live-server\n```\n\nThis package comes already with the [apollo-live-server](https://www.npmjs.com/package/apollo-live-server) npm package already set-up, but for client you will also need: [apollo-live-client](https://www.npmjs.com/package/apollo-live-client), so make sure it is installed.\n\n```js\n```\n\n```js\n// our Subscription resolver\nimport { asyncIterator } from 'apollo-live-server';\n\nexport default {\n  typeDefs: `\n    type Subscription {\n      users: SubscriptionEvent\n    }\n  `\n  resolvers: {\n    Subscription: {\n      users: {\n        resolve: payload => payload,\n        subscribe(_, args, { db }) {\n          const observer = db.users.find();\n\n          return asyncIterator(observer);\n        }\n      }\n    }\n  }\n}\n```\n\nFind out more: https://www.npmjs.com/package/apollo-live-server\n\n## Client usage with React\n\nPlease refer to the documentation here: https://github.com/cult-of-coders/apollo-live-client\n\n## Simulate reactivity\n\n```js\n// Meteor.users acts as any other Mongo.Collection you may have\n// Simulate some reactivity ...\nimport { Accounts } from 'meteor/accounts-base';\n\nMeteor.setInterval(function() {\n  const userId = Accounts.createUser({\n    username: 'Apollo is Live!',\n  });\n\n  Meteor.setTimeout(function() {\n    Meteor.users.remove({ _id: userId });\n  }, 500);\n}, 2000);\n```\n\nYou can now test your query inside GraphQL Playground, to see how easily it reacts to changes:\n\n```js\nsubscription {\n  users {\n    event\n    doc\n  }\n}\n```\n\n---\n\n### [Table of Contents](index.md)\n","source":"starterpack/reactivity.md","raw":"---\ntitle: Live Queries\ndescription: How to have reactive/live queries with ease\ndisqusPage: 'Starterpack:Reactivity'\n---\n\n```js\nmeteor npm i -S apollo-live-client apollo-live-server\n```\n\nThis package comes already with the [apollo-live-server](https://www.npmjs.com/package/apollo-live-server) npm package already set-up, but for client you will also need: [apollo-live-client](https://www.npmjs.com/package/apollo-live-client), so make sure it is installed.\n\n```js\n```\n\n```js\n// our Subscription resolver\nimport { asyncIterator } from 'apollo-live-server';\n\nexport default {\n  typeDefs: `\n    type Subscription {\n      users: SubscriptionEvent\n    }\n  `\n  resolvers: {\n    Subscription: {\n      users: {\n        resolve: payload => payload,\n        subscribe(_, args, { db }) {\n          const observer = db.users.find();\n\n          return asyncIterator(observer);\n        }\n      }\n    }\n  }\n}\n```\n\nFind out more: https://www.npmjs.com/package/apollo-live-server\n\n## Client usage with React\n\nPlease refer to the documentation here: https://github.com/cult-of-coders/apollo-live-client\n\n## Simulate reactivity\n\n```js\n// Meteor.users acts as any other Mongo.Collection you may have\n// Simulate some reactivity ...\nimport { Accounts } from 'meteor/accounts-base';\n\nMeteor.setInterval(function() {\n  const userId = Accounts.createUser({\n    username: 'Apollo is Live!',\n  });\n\n  Meteor.setTimeout(function() {\n    Meteor.users.remove({ _id: userId });\n  }, 500);\n}, 2000);\n```\n\nYou can now test your query inside GraphQL Playground, to see how easily it reacts to changes:\n\n```js\nsubscription {\n  users {\n    event\n    doc\n  }\n}\n```\n\n---\n\n### [Table of Contents](index.md)\n","date":"2018-08-31T12:51:19.869Z","updated":"2018-08-31T12:51:19.869Z","path":"starterpack/reactivity.html","comments":1,"layout":"page","_id":"cjqqmfrhd000as9a4hhoov1as","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm i -S apollo-live-client apollo-live-server</span><br></pre></td></tr></table></figure>\n<p>This package comes already with the <a href=\"https://www.npmjs.com/package/apollo-live-server\" target=\"_blank\" rel=\"noopener\">apollo-live-server</a> npm package already set-up, but for client you will also need: <a href=\"https://www.npmjs.com/package/apollo-live-client\" target=\"_blank\" rel=\"noopener\">apollo-live-client</a>, so make sure it is installed.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"comment\">// our Subscription resolver</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; asyncIterator &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-live-server'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    type Subscription &#123;</span></span><br><span class=\"line\"><span class=\"string\">      users: SubscriptionEvent</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Subscription: &#123;</span><br><span class=\"line\">      users: &#123;</span><br><span class=\"line\">        resolve: <span class=\"function\"><span class=\"params\">payload</span> =&gt;</span> payload,</span><br><span class=\"line\">        subscribe(_, args, &#123; db &#125;) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> observer = db.users.find();</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">return</span> asyncIterator(observer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Find out more: <a href=\"https://www.npmjs.com/package/apollo-live-server\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/apollo-live-server</a></p>\n<h2 id=\"Client-usage-with-React\"><a href=\"#Client-usage-with-React\" class=\"headerlink\" title=\"Client usage with React\"></a>Client usage with React</h2><p>Please refer to the documentation here: <a href=\"https://github.com/cult-of-coders/apollo-live-client\" target=\"_blank\" rel=\"noopener\">https://github.com/cult-of-coders/apollo-live-client</a></p>\n<h2 id=\"Simulate-reactivity\"><a href=\"#Simulate-reactivity\" class=\"headerlink\" title=\"Simulate reactivity\"></a>Simulate reactivity</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Meteor.users acts as any other Mongo.Collection you may have</span></span><br><span class=\"line\"><span class=\"comment\">// Simulate some reactivity ...</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Accounts &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/accounts-base'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Meteor.setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> userId = Accounts.createUser(&#123;</span><br><span class=\"line\">    username: <span class=\"string\">'Apollo is Live!'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  Meteor.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Meteor.users.remove(&#123; <span class=\"attr\">_id</span>: userId &#125;);</span><br><span class=\"line\">  &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>);</span><br></pre></td></tr></table></figure>\n<p>You can now test your query inside GraphQL Playground, to see how easily it reacts to changes:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subscription &#123;</span><br><span class=\"line\">  users &#123;</span><br><span class=\"line\">    event</span><br><span class=\"line\">    doc</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a><a href=\"index.md\">Table of Contents</a></h3>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm i -S apollo-live-client apollo-live-server</span><br></pre></td></tr></table></figure>\n<p>This package comes already with the <a href=\"https://www.npmjs.com/package/apollo-live-server\" target=\"_blank\" rel=\"noopener\">apollo-live-server</a> npm package already set-up, but for client you will also need: <a href=\"https://www.npmjs.com/package/apollo-live-client\" target=\"_blank\" rel=\"noopener\">apollo-live-client</a>, so make sure it is installed.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"comment\">// our Subscription resolver</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; asyncIterator &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-live-server'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    type Subscription &#123;</span></span><br><span class=\"line\"><span class=\"string\">      users: SubscriptionEvent</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Subscription: &#123;</span><br><span class=\"line\">      users: &#123;</span><br><span class=\"line\">        resolve: <span class=\"function\"><span class=\"params\">payload</span> =&gt;</span> payload,</span><br><span class=\"line\">        subscribe(_, args, &#123; db &#125;) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> observer = db.users.find();</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">return</span> asyncIterator(observer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Find out more: <a href=\"https://www.npmjs.com/package/apollo-live-server\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/apollo-live-server</a></p>\n<h2 id=\"Client-usage-with-React\"><a href=\"#Client-usage-with-React\" class=\"headerlink\" title=\"Client usage with React\"></a>Client usage with React</h2><p>Please refer to the documentation here: <a href=\"https://github.com/cult-of-coders/apollo-live-client\" target=\"_blank\" rel=\"noopener\">https://github.com/cult-of-coders/apollo-live-client</a></p>\n<h2 id=\"Simulate-reactivity\"><a href=\"#Simulate-reactivity\" class=\"headerlink\" title=\"Simulate reactivity\"></a>Simulate reactivity</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Meteor.users acts as any other Mongo.Collection you may have</span></span><br><span class=\"line\"><span class=\"comment\">// Simulate some reactivity ...</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Accounts &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/accounts-base'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Meteor.setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> userId = Accounts.createUser(&#123;</span><br><span class=\"line\">    username: <span class=\"string\">'Apollo is Live!'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  Meteor.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Meteor.users.remove(&#123; <span class=\"attr\">_id</span>: userId &#125;);</span><br><span class=\"line\">  &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>);</span><br></pre></td></tr></table></figure>\n<p>You can now test your query inside GraphQL Playground, to see how easily it reacts to changes:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subscription &#123;</span><br><span class=\"line\">  users &#123;</span><br><span class=\"line\">    event</span><br><span class=\"line\">    doc</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a><a href=\"index.md\">Table of Contents</a></h3>"},{"title":"Database Relations","description":"How to define relationships between collections","disqusPage":"Starterpack:Database-Relations","_content":"\nRelations are very important when you deal with your database. MongoDB has many advantages but it does not have full support\nfor relational data, however there is an extremely performant way of handling those relations leveraging the power of [Grapher](https://github.com/cult-of-coders/grapher)\n\nWe recommend you read the package documentation to fully understand what is going on and skip the following chapters:\n\n- Named Queries\n- Global Exposure\n\nGrapher is meant to work with pure Meteor even without Apollo, thus having some additional functionalities we will not use in here, but the rest of the functionalities are a must to understand, especially [GraphQL Bridge](https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md)\n\nWe have 2 ways of defining relationships, first we'll explore the prototipish way of doing it via Schema Directives:\n\n`@mongo` - Creates or re-uses an already existing `Mongo.Collection`\n`@link` - Defines the links with other types\n`@map` - Maps a value to the database value so Grapher can interogate properly\n\nLet's say we have a Post and a Comment and each post and comment has an `userId` that refers to a certain User:\n\n```gql\ntype Comment @mongo(name: \"comments\") {\n  _id: ID!\n  text: String!\n\n  userId: String!\n  user: User @link(field: \"userId\")\n\n  postId: String!\n  post: Post @link(field: \"commentId\")\n}\n\ntype Post @mongo(name: \"posts\") {\n  _id: ID!\n  title: String!\n  isPublished: Boolean!\n  createdAt: Date\n\n  authorId: String\n  author: User @link(field: \"authorId\")\n\n  comments: [Comment] @link(to=\"post\")\n}\n\ntype User @mongo(name: \"users\") {\n  _id: ID!\n  name: String\n  comments: [Comment] @link(to: \"user\")\n  posts: [Post] @link(to: \"author\")\n}\n```\n\nGiven this configuration, you can then define the following GraphQL Module:\n\n```js\nexport default {\n  typeDefs: `\n    type Query {\n      posts(filters: JSON, options: JSON): [Post]\n    }\n  `,\n  resolvers: {\n    Query: {\n      posts(_, { filters, options }, { db }, ast) {\n        const query = db.posts.astToQuery(ast, {\n          $filters: filters\n          $options: options\n        })\n\n        return query.fetch()\n      }\n    }\n  }\n}\n```\n\nNow if you go to your GraphQL playground you can do something like:\n\n```\nquery {\n  posts {\n    title\n    author {\n      name\n    }\n    comment {\n      text\n      user {\n        name\n      }\n    }\n  }\n}\n```\n\nAnd relations not only are done automatically, [they are extremely performant](https://github.com/cult-of-coders/grapher/blob/master/docs/hypernova.md), and it will only interogate the database for the fields you need, not all fields.\n\nAnd for example you can even add extra logic via parameters, for example, you only want the published posts sorted by createdAt descending, and only want the first page, paginated by 20, you would use the following parameters:\n\n```\n{\n  \"filters\": {\n    \"isPublished\": true\n  },\n  \"options\": {\n    \"sort\": {\n      \"createdAt\": -1\n    },\n    \"limit\": 20,\n    \"skip\": 0,\n  }\n}\n```\n\nWith few lines of code you have an imense amount of power. However, as your app grows, and you need database consistency and maybe other extensions. It's a good idea to move the database definitions and links outside the types (No more schema directives)\n\nTo do so you define a collection as it was explained in structure and you create the equivallent of the above like this:\n\n```js\n// src/db/posts/links.js\n\nimport { Posts, Comments, Users } from '../db';\n\nPosts.addLinks({\n  author: {\n    type: 'one',\n    field: 'authorId',\n    collection: Users,\n    index: true,\n  },\n  comments: {\n    collection: Comments,\n    inversedBy: 'post',\n  },\n});\n```\n\n```js\n// src/db/comments/links.js\n\nimport { Posts, Comments, Users } from '../db';\n\nComments.addLinks({\n  user: {\n    type: 'one',\n    field: 'userId',\n    collection: Users,\n    index: true,\n  },\n  post: {\n    type: 'one',\n    index: true,\n    field: 'postId',\n    collection: Posts,\n  },\n});\n```\n\n```js\n// src/db/users/links.js\nimport { Posts, Comments, Users } from '../db';\n\nUsers.addLinks({\n  comments: {\n    collection: Comments,\n    inversedBy: 'user',\n  },\n  posts: {\n    collection: Posts,\n    inversedBy: 'author',\n  },\n});\n```\n\n```js\n// src/db/links.js\nimport './posts/links';\nimport './users/links';\nimport './comments/links';\n```\n\nAnd don't forget to import `src/db/links.js` in your `src/startup/server/index.js`.\n\nRead more about Grapher & GraphQL here:\nhttps://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md\n","source":"starterpack/relations.md","raw":"---\ntitle: Database Relations\ndescription: 'How to define relationships between collections'\ndisqusPage: 'Starterpack:Database-Relations'\n---\n\nRelations are very important when you deal with your database. MongoDB has many advantages but it does not have full support\nfor relational data, however there is an extremely performant way of handling those relations leveraging the power of [Grapher](https://github.com/cult-of-coders/grapher)\n\nWe recommend you read the package documentation to fully understand what is going on and skip the following chapters:\n\n- Named Queries\n- Global Exposure\n\nGrapher is meant to work with pure Meteor even without Apollo, thus having some additional functionalities we will not use in here, but the rest of the functionalities are a must to understand, especially [GraphQL Bridge](https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md)\n\nWe have 2 ways of defining relationships, first we'll explore the prototipish way of doing it via Schema Directives:\n\n`@mongo` - Creates or re-uses an already existing `Mongo.Collection`\n`@link` - Defines the links with other types\n`@map` - Maps a value to the database value so Grapher can interogate properly\n\nLet's say we have a Post and a Comment and each post and comment has an `userId` that refers to a certain User:\n\n```gql\ntype Comment @mongo(name: \"comments\") {\n  _id: ID!\n  text: String!\n\n  userId: String!\n  user: User @link(field: \"userId\")\n\n  postId: String!\n  post: Post @link(field: \"commentId\")\n}\n\ntype Post @mongo(name: \"posts\") {\n  _id: ID!\n  title: String!\n  isPublished: Boolean!\n  createdAt: Date\n\n  authorId: String\n  author: User @link(field: \"authorId\")\n\n  comments: [Comment] @link(to=\"post\")\n}\n\ntype User @mongo(name: \"users\") {\n  _id: ID!\n  name: String\n  comments: [Comment] @link(to: \"user\")\n  posts: [Post] @link(to: \"author\")\n}\n```\n\nGiven this configuration, you can then define the following GraphQL Module:\n\n```js\nexport default {\n  typeDefs: `\n    type Query {\n      posts(filters: JSON, options: JSON): [Post]\n    }\n  `,\n  resolvers: {\n    Query: {\n      posts(_, { filters, options }, { db }, ast) {\n        const query = db.posts.astToQuery(ast, {\n          $filters: filters\n          $options: options\n        })\n\n        return query.fetch()\n      }\n    }\n  }\n}\n```\n\nNow if you go to your GraphQL playground you can do something like:\n\n```\nquery {\n  posts {\n    title\n    author {\n      name\n    }\n    comment {\n      text\n      user {\n        name\n      }\n    }\n  }\n}\n```\n\nAnd relations not only are done automatically, [they are extremely performant](https://github.com/cult-of-coders/grapher/blob/master/docs/hypernova.md), and it will only interogate the database for the fields you need, not all fields.\n\nAnd for example you can even add extra logic via parameters, for example, you only want the published posts sorted by createdAt descending, and only want the first page, paginated by 20, you would use the following parameters:\n\n```\n{\n  \"filters\": {\n    \"isPublished\": true\n  },\n  \"options\": {\n    \"sort\": {\n      \"createdAt\": -1\n    },\n    \"limit\": 20,\n    \"skip\": 0,\n  }\n}\n```\n\nWith few lines of code you have an imense amount of power. However, as your app grows, and you need database consistency and maybe other extensions. It's a good idea to move the database definitions and links outside the types (No more schema directives)\n\nTo do so you define a collection as it was explained in structure and you create the equivallent of the above like this:\n\n```js\n// src/db/posts/links.js\n\nimport { Posts, Comments, Users } from '../db';\n\nPosts.addLinks({\n  author: {\n    type: 'one',\n    field: 'authorId',\n    collection: Users,\n    index: true,\n  },\n  comments: {\n    collection: Comments,\n    inversedBy: 'post',\n  },\n});\n```\n\n```js\n// src/db/comments/links.js\n\nimport { Posts, Comments, Users } from '../db';\n\nComments.addLinks({\n  user: {\n    type: 'one',\n    field: 'userId',\n    collection: Users,\n    index: true,\n  },\n  post: {\n    type: 'one',\n    index: true,\n    field: 'postId',\n    collection: Posts,\n  },\n});\n```\n\n```js\n// src/db/users/links.js\nimport { Posts, Comments, Users } from '../db';\n\nUsers.addLinks({\n  comments: {\n    collection: Comments,\n    inversedBy: 'user',\n  },\n  posts: {\n    collection: Posts,\n    inversedBy: 'author',\n  },\n});\n```\n\n```js\n// src/db/links.js\nimport './posts/links';\nimport './users/links';\nimport './comments/links';\n```\n\nAnd don't forget to import `src/db/links.js` in your `src/startup/server/index.js`.\n\nRead more about Grapher & GraphQL here:\nhttps://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md\n","date":"2018-08-31T12:51:19.869Z","updated":"2018-08-31T12:51:19.869Z","path":"starterpack/relations.html","comments":1,"layout":"page","_id":"cjqqmfrhe000bs9a4xwi60rqn","content":"<p>Relations are very important when you deal with your database. MongoDB has many advantages but it does not have full support\nfor relational data, however there is an extremely performant way of handling those relations leveraging the power of <a href=\"https://github.com/cult-of-coders/grapher\" target=\"_blank\" rel=\"noopener\">Grapher</a></p>\n<p>We recommend you read the package documentation to fully understand what is going on and skip the following chapters:</p>\n<ul>\n<li>Named Queries</li>\n<li>Global Exposure</li>\n</ul>\n<p>Grapher is meant to work with pure Meteor even without Apollo, thus having some additional functionalities we will not use in here, but the rest of the functionalities are a must to understand, especially <a href=\"https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md\" target=\"_blank\" rel=\"noopener\">GraphQL Bridge</a></p>\n<p>We have 2 ways of defining relationships, first we’ll explore the prototipish way of doing it via Schema Directives:</p>\n<p><code>@mongo</code> - Creates or re-uses an already existing <code>Mongo.Collection</code>\n<code>@link</code> - Defines the links with other types\n<code>@map</code> - Maps a value to the database value so Grapher can interogate properly</p>\n<p>Let’s say we have a Post and a Comment and each post and comment has an <code>userId</code> that refers to a certain User:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Comment @mongo(name: &quot;comments&quot;) &#123;</span><br><span class=\"line\">  _id: ID!</span><br><span class=\"line\">  text: String!</span><br><span class=\"line\"></span><br><span class=\"line\">  userId: String!</span><br><span class=\"line\">  user: User @link(field: &quot;userId&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">  postId: String!</span><br><span class=\"line\">  post: Post @link(field: &quot;commentId&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Post @mongo(name: &quot;posts&quot;) &#123;</span><br><span class=\"line\">  _id: ID!</span><br><span class=\"line\">  title: String!</span><br><span class=\"line\">  isPublished: Boolean!</span><br><span class=\"line\">  createdAt: Date</span><br><span class=\"line\"></span><br><span class=\"line\">  authorId: String</span><br><span class=\"line\">  author: User @link(field: &quot;authorId&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">  comments: [Comment] @link(to=&quot;post&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type User @mongo(name: &quot;users&quot;) &#123;</span><br><span class=\"line\">  _id: ID!</span><br><span class=\"line\">  name: String</span><br><span class=\"line\">  comments: [Comment] @link(to: &quot;user&quot;)</span><br><span class=\"line\">  posts: [Post] @link(to: &quot;author&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Given this configuration, you can then define the following GraphQL Module:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">      posts(filters: JSON, options: JSON): [Post]</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">      posts(_, &#123; filters, options &#125;, &#123; db &#125;, ast) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> query = db.posts.astToQuery(ast, &#123;</span><br><span class=\"line\">          $filters: filters</span><br><span class=\"line\">          $options: options</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> query.fetch()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now if you go to your GraphQL playground you can do something like:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query &#123;</span><br><span class=\"line\">  posts &#123;</span><br><span class=\"line\">    title</span><br><span class=\"line\">    author &#123;</span><br><span class=\"line\">      name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    comment &#123;</span><br><span class=\"line\">      text</span><br><span class=\"line\">     <span class=\"built_in\"> user </span>&#123;</span><br><span class=\"line\">        name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And relations not only are done automatically, <a href=\"https://github.com/cult-of-coders/grapher/blob/master/docs/hypernova.md\" target=\"_blank\" rel=\"noopener\">they are extremely performant</a>, and it will only interogate the database for the fields you need, not all fields.</p>\n<p>And for example you can even add extra logic via parameters, for example, you only want the published posts sorted by createdAt descending, and only want the first page, paginated by 20, you would use the following parameters:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"filters\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"isPublished\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"sort\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"createdAt\"</span>: <span class=\"number\">-1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"limit\"</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"skip\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>With few lines of code you have an imense amount of power. However, as your app grows, and you need database consistency and maybe other extensions. It’s a good idea to move the database definitions and links outside the types (No more schema directives)</p>\n<p>To do so you define a collection as it was explained in structure and you create the equivallent of the above like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/posts/links.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Posts, Comments, Users &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../db'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Posts.addLinks(&#123;</span><br><span class=\"line\">  author: &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'one'</span>,</span><br><span class=\"line\">    field: <span class=\"string\">'authorId'</span>,</span><br><span class=\"line\">    collection: Users,</span><br><span class=\"line\">    index: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  comments: &#123;</span><br><span class=\"line\">    collection: Comments,</span><br><span class=\"line\">    inversedBy: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/comments/links.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Posts, Comments, Users &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../db'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Comments.addLinks(&#123;</span><br><span class=\"line\">  user: &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'one'</span>,</span><br><span class=\"line\">    field: <span class=\"string\">'userId'</span>,</span><br><span class=\"line\">    collection: Users,</span><br><span class=\"line\">    index: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  post: &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'one'</span>,</span><br><span class=\"line\">    index: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    field: <span class=\"string\">'postId'</span>,</span><br><span class=\"line\">    collection: Posts,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/users/links.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Posts, Comments, Users &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../db'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Users.addLinks(&#123;</span><br><span class=\"line\">  comments: &#123;</span><br><span class=\"line\">    collection: Comments,</span><br><span class=\"line\">    inversedBy: <span class=\"string\">'user'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  posts: &#123;</span><br><span class=\"line\">    collection: Posts,</span><br><span class=\"line\">    inversedBy: <span class=\"string\">'author'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/links.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./posts/links'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./users/links'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./comments/links'</span>;</span><br></pre></td></tr></table></figure>\n<p>And don’t forget to import <code>src/db/links.js</code> in your <code>src/startup/server/index.js</code>.</p>\n<p>Read more about Grapher &amp; GraphQL here:\n<a href=\"https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md\" target=\"_blank\" rel=\"noopener\">https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Relations are very important when you deal with your database. MongoDB has many advantages but it does not have full support\nfor relational data, however there is an extremely performant way of handling those relations leveraging the power of <a href=\"https://github.com/cult-of-coders/grapher\" target=\"_blank\" rel=\"noopener\">Grapher</a></p>\n<p>We recommend you read the package documentation to fully understand what is going on and skip the following chapters:</p>\n<ul>\n<li>Named Queries</li>\n<li>Global Exposure</li>\n</ul>\n<p>Grapher is meant to work with pure Meteor even without Apollo, thus having some additional functionalities we will not use in here, but the rest of the functionalities are a must to understand, especially <a href=\"https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md\" target=\"_blank\" rel=\"noopener\">GraphQL Bridge</a></p>\n<p>We have 2 ways of defining relationships, first we’ll explore the prototipish way of doing it via Schema Directives:</p>\n<p><code>@mongo</code> - Creates or re-uses an already existing <code>Mongo.Collection</code>\n<code>@link</code> - Defines the links with other types\n<code>@map</code> - Maps a value to the database value so Grapher can interogate properly</p>\n<p>Let’s say we have a Post and a Comment and each post and comment has an <code>userId</code> that refers to a certain User:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Comment @mongo(name: &quot;comments&quot;) &#123;</span><br><span class=\"line\">  _id: ID!</span><br><span class=\"line\">  text: String!</span><br><span class=\"line\"></span><br><span class=\"line\">  userId: String!</span><br><span class=\"line\">  user: User @link(field: &quot;userId&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">  postId: String!</span><br><span class=\"line\">  post: Post @link(field: &quot;commentId&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Post @mongo(name: &quot;posts&quot;) &#123;</span><br><span class=\"line\">  _id: ID!</span><br><span class=\"line\">  title: String!</span><br><span class=\"line\">  isPublished: Boolean!</span><br><span class=\"line\">  createdAt: Date</span><br><span class=\"line\"></span><br><span class=\"line\">  authorId: String</span><br><span class=\"line\">  author: User @link(field: &quot;authorId&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">  comments: [Comment] @link(to=&quot;post&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type User @mongo(name: &quot;users&quot;) &#123;</span><br><span class=\"line\">  _id: ID!</span><br><span class=\"line\">  name: String</span><br><span class=\"line\">  comments: [Comment] @link(to: &quot;user&quot;)</span><br><span class=\"line\">  posts: [Post] @link(to: &quot;author&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Given this configuration, you can then define the following GraphQL Module:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">      posts(filters: JSON, options: JSON): [Post]</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">      posts(_, &#123; filters, options &#125;, &#123; db &#125;, ast) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> query = db.posts.astToQuery(ast, &#123;</span><br><span class=\"line\">          $filters: filters</span><br><span class=\"line\">          $options: options</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> query.fetch()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now if you go to your GraphQL playground you can do something like:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query &#123;</span><br><span class=\"line\">  posts &#123;</span><br><span class=\"line\">    title</span><br><span class=\"line\">    author &#123;</span><br><span class=\"line\">      name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    comment &#123;</span><br><span class=\"line\">      text</span><br><span class=\"line\">     <span class=\"built_in\"> user </span>&#123;</span><br><span class=\"line\">        name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And relations not only are done automatically, <a href=\"https://github.com/cult-of-coders/grapher/blob/master/docs/hypernova.md\" target=\"_blank\" rel=\"noopener\">they are extremely performant</a>, and it will only interogate the database for the fields you need, not all fields.</p>\n<p>And for example you can even add extra logic via parameters, for example, you only want the published posts sorted by createdAt descending, and only want the first page, paginated by 20, you would use the following parameters:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"filters\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"isPublished\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"sort\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"createdAt\"</span>: <span class=\"number\">-1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"limit\"</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"skip\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>With few lines of code you have an imense amount of power. However, as your app grows, and you need database consistency and maybe other extensions. It’s a good idea to move the database definitions and links outside the types (No more schema directives)</p>\n<p>To do so you define a collection as it was explained in structure and you create the equivallent of the above like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/posts/links.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Posts, Comments, Users &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../db'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Posts.addLinks(&#123;</span><br><span class=\"line\">  author: &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'one'</span>,</span><br><span class=\"line\">    field: <span class=\"string\">'authorId'</span>,</span><br><span class=\"line\">    collection: Users,</span><br><span class=\"line\">    index: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  comments: &#123;</span><br><span class=\"line\">    collection: Comments,</span><br><span class=\"line\">    inversedBy: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/comments/links.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Posts, Comments, Users &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../db'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Comments.addLinks(&#123;</span><br><span class=\"line\">  user: &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'one'</span>,</span><br><span class=\"line\">    field: <span class=\"string\">'userId'</span>,</span><br><span class=\"line\">    collection: Users,</span><br><span class=\"line\">    index: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  post: &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'one'</span>,</span><br><span class=\"line\">    index: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    field: <span class=\"string\">'postId'</span>,</span><br><span class=\"line\">    collection: Posts,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/users/links.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Posts, Comments, Users &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../db'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Users.addLinks(&#123;</span><br><span class=\"line\">  comments: &#123;</span><br><span class=\"line\">    collection: Comments,</span><br><span class=\"line\">    inversedBy: <span class=\"string\">'user'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  posts: &#123;</span><br><span class=\"line\">    collection: Posts,</span><br><span class=\"line\">    inversedBy: <span class=\"string\">'author'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/links.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./posts/links'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./users/links'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./comments/links'</span>;</span><br></pre></td></tr></table></figure>\n<p>And don’t forget to import <code>src/db/links.js</code> in your <code>src/startup/server/index.js</code>.</p>\n<p>Read more about Grapher &amp; GraphQL here:\n<a href=\"https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md\" target=\"_blank\" rel=\"noopener\">https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md</a></p>\n"},{"title":"Security","description":"How to secure your Queries and Mutation resolvers","disqusPage":"Starterpack:Security","_content":"\nSecurity is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We'll first show how we can\nsecure our `Query` and `Mutation` resolvers, then we will get into some tips and tricks meant to teach you how to handle\nthe security for an evergrowing code base.\n\n## Securing Methods & Publicaions\n\nLet's see a sample:\n\n```js\n// src/api/modules/post/index.js\nexport default {\n  typeDefs: `\n    type Query {\n      posts: [Post]\n    }\n\n    type Mutation {\n      postCreate(title: String!): Post\n    }\n  `,\n  resolvers: {\n    Query: {\n      posts: (_, args, context) => {\n        if (!context.userId) {\n          throw new Error(`Unauthorized`);\n        }\n\n        return Posts.find().fetch();\n      },\n    },\n    Mutation: {\n      postCreate: (_, args, context) => {\n        if (!context.userId) {\n          throw new Error(`Unauthorized`);\n        }\n        // Logic to create the Post and you have to return the Post\n      },\n    },\n  },\n};\n```\n\n## Managing Roles\n\nBased on the userId you have the ability to check if the user is logged in, maybe you have multiple roles in the system,\n\nWe recommend installing the infamous package, [alanning:roles](https://atmospherejs.com/alanning/roles):\n\n```\nmeteor add alanning:roles\n```\n\n## Security Service\n\nCentralize security in a module:\n\n```js\n// file: /src/api/security/index.js\n// example of a module for security\nimport { Roles } from 'meteor/alanning:roles';\n\nexport default class Security {\n  static checkRole(userId, role) {\n    if (!this.hasRole(userId, role)) {\n      throw new Error('not-authorized');\n    }\n  }\n\n  static hasRole(userId, role) {\n    return Roles.userIsInRole(userId, role);\n  }\n\n  static checkLoggedIn(userId) {\n    if (!userId) {\n      throw new Error('not-authorized', 'You are not authorized');\n    }\n  }\n\n  // add other business logic checks here that you use throughout the app\n  // something like: isUserAllowedToSeeDocument()\n  // always keep decoupling your code if this class gets huge.\n}\n```\n\n```js\nimport Security from '/src/api/security';\n\nexport default {\n  typeDefs: `...`\n  resolvers: {\n    Query: {\n      posts: (_, args, { userId }) => {\n        Security.checkLoggedIn(userId);\n\n        return Posts.find().fetch();\n      },\n    },\n    Mutation: {\n      postCreate: (_, args, context) => {\n        Security.checkLoggedIn(userId);\n        // Logic to create the Post and you have to return the Post\n      },\n    },\n  },\n};\n```\n\nPretty straight forward right ? The reason we do it like this, by centralizing security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong way to do it,\ndepends on your use-case, but we believe that it is easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!\n\nThat's it. With this knowledge you can build more secured apps!\n","source":"starterpack/security.md","raw":"---\ntitle: Security\ndescription: How to secure your Queries and Mutation resolvers\ndisqusPage: 'Starterpack:Security'\n---\n\nSecurity is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We'll first show how we can\nsecure our `Query` and `Mutation` resolvers, then we will get into some tips and tricks meant to teach you how to handle\nthe security for an evergrowing code base.\n\n## Securing Methods & Publicaions\n\nLet's see a sample:\n\n```js\n// src/api/modules/post/index.js\nexport default {\n  typeDefs: `\n    type Query {\n      posts: [Post]\n    }\n\n    type Mutation {\n      postCreate(title: String!): Post\n    }\n  `,\n  resolvers: {\n    Query: {\n      posts: (_, args, context) => {\n        if (!context.userId) {\n          throw new Error(`Unauthorized`);\n        }\n\n        return Posts.find().fetch();\n      },\n    },\n    Mutation: {\n      postCreate: (_, args, context) => {\n        if (!context.userId) {\n          throw new Error(`Unauthorized`);\n        }\n        // Logic to create the Post and you have to return the Post\n      },\n    },\n  },\n};\n```\n\n## Managing Roles\n\nBased on the userId you have the ability to check if the user is logged in, maybe you have multiple roles in the system,\n\nWe recommend installing the infamous package, [alanning:roles](https://atmospherejs.com/alanning/roles):\n\n```\nmeteor add alanning:roles\n```\n\n## Security Service\n\nCentralize security in a module:\n\n```js\n// file: /src/api/security/index.js\n// example of a module for security\nimport { Roles } from 'meteor/alanning:roles';\n\nexport default class Security {\n  static checkRole(userId, role) {\n    if (!this.hasRole(userId, role)) {\n      throw new Error('not-authorized');\n    }\n  }\n\n  static hasRole(userId, role) {\n    return Roles.userIsInRole(userId, role);\n  }\n\n  static checkLoggedIn(userId) {\n    if (!userId) {\n      throw new Error('not-authorized', 'You are not authorized');\n    }\n  }\n\n  // add other business logic checks here that you use throughout the app\n  // something like: isUserAllowedToSeeDocument()\n  // always keep decoupling your code if this class gets huge.\n}\n```\n\n```js\nimport Security from '/src/api/security';\n\nexport default {\n  typeDefs: `...`\n  resolvers: {\n    Query: {\n      posts: (_, args, { userId }) => {\n        Security.checkLoggedIn(userId);\n\n        return Posts.find().fetch();\n      },\n    },\n    Mutation: {\n      postCreate: (_, args, context) => {\n        Security.checkLoggedIn(userId);\n        // Logic to create the Post and you have to return the Post\n      },\n    },\n  },\n};\n```\n\nPretty straight forward right ? The reason we do it like this, by centralizing security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong way to do it,\ndepends on your use-case, but we believe that it is easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!\n\nThat's it. With this knowledge you can build more secured apps!\n","date":"2018-08-31T12:51:19.870Z","updated":"2018-08-31T12:51:19.870Z","path":"starterpack/security.html","comments":1,"layout":"page","_id":"cjqqmfrhf000cs9a4i4jg08ob","content":"<p>Security is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We’ll first show how we can\nsecure our <code>Query</code> and <code>Mutation</code> resolvers, then we will get into some tips and tricks meant to teach you how to handle\nthe security for an evergrowing code base.</p>\n<h2 id=\"Securing-Methods-amp-Publicaions\"><a href=\"#Securing-Methods-amp-Publicaions\" class=\"headerlink\" title=\"Securing Methods &amp; Publicaions\"></a>Securing Methods &amp; Publicaions</h2><p>Let’s see a sample:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/post/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">      posts: [Post]</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    type Mutation &#123;</span></span><br><span class=\"line\"><span class=\"string\">      postCreate(title: String!): Post</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">      posts: <span class=\"function\">(<span class=\"params\">_, args, context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!context.userId) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Unauthorized`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Posts.find().fetch();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Mutation: &#123;</span><br><span class=\"line\">      postCreate: <span class=\"function\">(<span class=\"params\">_, args, context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!context.userId) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Unauthorized`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Logic to create the Post and you have to return the Post</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Managing-Roles\"><a href=\"#Managing-Roles\" class=\"headerlink\" title=\"Managing Roles\"></a>Managing Roles</h2><p>Based on the userId you have the ability to check if the user is logged in, maybe you have multiple roles in the system,</p>\n<p>We recommend installing the infamous package, <a href=\"https://atmospherejs.com/alanning/roles\" target=\"_blank\" rel=\"noopener\">alanning:roles</a>:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> alanning:roles</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Security-Service\"><a href=\"#Security-Service\" class=\"headerlink\" title=\"Security Service\"></a>Security Service</h2><p>Centralize security in a module:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /src/api/security/index.js</span></span><br><span class=\"line\"><span class=\"comment\">// example of a module for security</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Roles &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/alanning:roles'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Security</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> checkRole(userId, role) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasRole(userId, role)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'not-authorized'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> hasRole(userId, role) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Roles.userIsInRole(userId, role);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> checkLoggedIn(userId) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!userId) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'not-authorized'</span>, <span class=\"string\">'You are not authorized'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// add other business logic checks here that you use throughout the app</span></span><br><span class=\"line\">  <span class=\"comment\">// something like: isUserAllowedToSeeDocument()</span></span><br><span class=\"line\">  <span class=\"comment\">// always keep decoupling your code if this class gets huge.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/src/api/security'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`...`</span></span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">      posts: <span class=\"function\">(<span class=\"params\">_, args, &#123; userId &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        Security.checkLoggedIn(userId);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Posts.find().fetch();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Mutation: &#123;</span><br><span class=\"line\">      postCreate: <span class=\"function\">(<span class=\"params\">_, args, context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        Security.checkLoggedIn(userId);</span><br><span class=\"line\">        <span class=\"comment\">// Logic to create the Post and you have to return the Post</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Pretty straight forward right ? The reason we do it like this, by centralizing security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong way to do it,\ndepends on your use-case, but we believe that it is easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!</p>\n<p>That’s it. With this knowledge you can build more secured apps!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Security is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We’ll first show how we can\nsecure our <code>Query</code> and <code>Mutation</code> resolvers, then we will get into some tips and tricks meant to teach you how to handle\nthe security for an evergrowing code base.</p>\n<h2 id=\"Securing-Methods-amp-Publicaions\"><a href=\"#Securing-Methods-amp-Publicaions\" class=\"headerlink\" title=\"Securing Methods &amp; Publicaions\"></a>Securing Methods &amp; Publicaions</h2><p>Let’s see a sample:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/post/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">      posts: [Post]</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    type Mutation &#123;</span></span><br><span class=\"line\"><span class=\"string\">      postCreate(title: String!): Post</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">      posts: <span class=\"function\">(<span class=\"params\">_, args, context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!context.userId) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Unauthorized`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Posts.find().fetch();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Mutation: &#123;</span><br><span class=\"line\">      postCreate: <span class=\"function\">(<span class=\"params\">_, args, context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!context.userId) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Unauthorized`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Logic to create the Post and you have to return the Post</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Managing-Roles\"><a href=\"#Managing-Roles\" class=\"headerlink\" title=\"Managing Roles\"></a>Managing Roles</h2><p>Based on the userId you have the ability to check if the user is logged in, maybe you have multiple roles in the system,</p>\n<p>We recommend installing the infamous package, <a href=\"https://atmospherejs.com/alanning/roles\" target=\"_blank\" rel=\"noopener\">alanning:roles</a>:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> alanning:roles</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Security-Service\"><a href=\"#Security-Service\" class=\"headerlink\" title=\"Security Service\"></a>Security Service</h2><p>Centralize security in a module:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /src/api/security/index.js</span></span><br><span class=\"line\"><span class=\"comment\">// example of a module for security</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Roles &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/alanning:roles'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Security</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> checkRole(userId, role) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasRole(userId, role)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'not-authorized'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> hasRole(userId, role) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Roles.userIsInRole(userId, role);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> checkLoggedIn(userId) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!userId) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'not-authorized'</span>, <span class=\"string\">'You are not authorized'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// add other business logic checks here that you use throughout the app</span></span><br><span class=\"line\">  <span class=\"comment\">// something like: isUserAllowedToSeeDocument()</span></span><br><span class=\"line\">  <span class=\"comment\">// always keep decoupling your code if this class gets huge.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/src/api/security'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`...`</span></span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">      posts: <span class=\"function\">(<span class=\"params\">_, args, &#123; userId &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        Security.checkLoggedIn(userId);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Posts.find().fetch();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Mutation: &#123;</span><br><span class=\"line\">      postCreate: <span class=\"function\">(<span class=\"params\">_, args, context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        Security.checkLoggedIn(userId);</span><br><span class=\"line\">        <span class=\"comment\">// Logic to create the Post and you have to return the Post</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Pretty straight forward right ? The reason we do it like this, by centralizing security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong way to do it,\ndepends on your use-case, but we believe that it is easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!</p>\n<p>That’s it. With this knowledge you can build more secured apps!</p>\n"},{"title":"Setting Up","description":"Run a GraphQL end-point in minutes","disqusPage":"Starterpack:Setting-Up","_content":"\nMake sure you have Meteor installed: https://www.meteor.com/install\n\n# Create a fresh project\n\nIf you are in a terminal you can just copy/paste all at once. We start with an empty application.\n\n```\nmeteor create --bare my-app\ncd my-app\n\n# Dependencies for the server\nmeteor npm i -S graphql graphql-load apollo-server-express uuid graphql-tools graphql-type-json apollo-live-server\n\n# Dependencies for the client\nmeteor npm i -S react-apollo apollo-live-client apollo-client apollo-cache-inmemory apollo-link apollo-link-http apollo-link-ws apollo-morpher subscriptions-transport-ws apollo-upload-client\n\n# If you're looking into Server Side Rendering with React\nmeteor npm i -S react-dom react-router apollo-link-schema\n\n# Now we add the package\nmeteor add cultofcoders:apollo\n\n# Optional but highly recommended (so you can import .gql/.graphql files)\nmeteor add swydo:graphql\n```\n\nNow let's initialize our GraphQL server:\n\nAdd the following to `package.json`, it will allow us to specify the entry points for our app:\n\n```\n  \"meteor\": {\n    \"mainModule\": {\n      \"client\": \"src/startup/client/index.js\",\n      \"server\": \"src/startup/server/index.js\"\n    },\n    \"testModule\": \"tests/main.js\"\n  }\n```\n\n```\nmkdir -p src/startup/client src/startup/server src/api\ntouch src/startup/client/index.js src/startup/server/index.js src/api/index.js\n```\n\nNow go to `src/startup/server/index.js` and add this:\n\n```js\n// src/startup/server/apollo.js\nimport { initialize } from 'meteor/cultofcoders:apollo';\n\nconst { server } = initialize();\n\nexport { server };\n```\n\n```js\n// src/api/index.js\nimport { load } from 'graphql-load';\n\nload({\n  typeDefs: `\n    type Query {\n      sayHello: String\n    }\n  `,\n  resolvers: {\n    Query: {\n      sayHello: () => 'Hello world!',\n    },\n  },\n});\n```\n\n```js\nimport '../../api';\nimport './apollo';\n```\n\nNote: the initialize() function needs to run after everything has been loaded, loading anything after `initialize()` will have no effect on your Schema.\n\nNow you can start Meteor via:\n\n```\nmeteor npm start\n```\n\nNow get on your browser and go to: http://localhost:3000/graphql and give your first query a spin:\n\n```gql\nquery {\n  sayHello\n}\n```\n\n## Module Aliases\n\nIn addition to what we just described, you can also create module aliases so:\n\n`npm i --save-dev babel-plugin-module-resolver`\n\nIn `.babelrc`\n\n```\n{\n  \"presets\": [\"meteor\"],\n  \"plugins\": [\n    [\n      \"module-resolver\",\n      {\n        \"root\": [\".\"],\n        \"alias\": {\n          \"api\": \"./src/api\",\n          \"ui\": \"./src/ui\",\n          \"db\": \"./src/db\"\n        }\n      }\n    ]\n  ]\n}\n```\n\nThis allows you to do nice things such as `import Page from 'ui/pages/Page';`, for example in the `startup/server` you could have done `import 'api'` instead of `import '../../api` or worse `import '/src/api`\n\nCongratulations, you have succesfully setup a GraphQL Server that is extremely powerful and feature-rich.\n","source":"starterpack/setting-up.md","raw":"---\ntitle: Setting Up\ndescription: 'Run a GraphQL end-point in minutes'\ndisqusPage: 'Starterpack:Setting-Up'\n---\n\nMake sure you have Meteor installed: https://www.meteor.com/install\n\n# Create a fresh project\n\nIf you are in a terminal you can just copy/paste all at once. We start with an empty application.\n\n```\nmeteor create --bare my-app\ncd my-app\n\n# Dependencies for the server\nmeteor npm i -S graphql graphql-load apollo-server-express uuid graphql-tools graphql-type-json apollo-live-server\n\n# Dependencies for the client\nmeteor npm i -S react-apollo apollo-live-client apollo-client apollo-cache-inmemory apollo-link apollo-link-http apollo-link-ws apollo-morpher subscriptions-transport-ws apollo-upload-client\n\n# If you're looking into Server Side Rendering with React\nmeteor npm i -S react-dom react-router apollo-link-schema\n\n# Now we add the package\nmeteor add cultofcoders:apollo\n\n# Optional but highly recommended (so you can import .gql/.graphql files)\nmeteor add swydo:graphql\n```\n\nNow let's initialize our GraphQL server:\n\nAdd the following to `package.json`, it will allow us to specify the entry points for our app:\n\n```\n  \"meteor\": {\n    \"mainModule\": {\n      \"client\": \"src/startup/client/index.js\",\n      \"server\": \"src/startup/server/index.js\"\n    },\n    \"testModule\": \"tests/main.js\"\n  }\n```\n\n```\nmkdir -p src/startup/client src/startup/server src/api\ntouch src/startup/client/index.js src/startup/server/index.js src/api/index.js\n```\n\nNow go to `src/startup/server/index.js` and add this:\n\n```js\n// src/startup/server/apollo.js\nimport { initialize } from 'meteor/cultofcoders:apollo';\n\nconst { server } = initialize();\n\nexport { server };\n```\n\n```js\n// src/api/index.js\nimport { load } from 'graphql-load';\n\nload({\n  typeDefs: `\n    type Query {\n      sayHello: String\n    }\n  `,\n  resolvers: {\n    Query: {\n      sayHello: () => 'Hello world!',\n    },\n  },\n});\n```\n\n```js\nimport '../../api';\nimport './apollo';\n```\n\nNote: the initialize() function needs to run after everything has been loaded, loading anything after `initialize()` will have no effect on your Schema.\n\nNow you can start Meteor via:\n\n```\nmeteor npm start\n```\n\nNow get on your browser and go to: http://localhost:3000/graphql and give your first query a spin:\n\n```gql\nquery {\n  sayHello\n}\n```\n\n## Module Aliases\n\nIn addition to what we just described, you can also create module aliases so:\n\n`npm i --save-dev babel-plugin-module-resolver`\n\nIn `.babelrc`\n\n```\n{\n  \"presets\": [\"meteor\"],\n  \"plugins\": [\n    [\n      \"module-resolver\",\n      {\n        \"root\": [\".\"],\n        \"alias\": {\n          \"api\": \"./src/api\",\n          \"ui\": \"./src/ui\",\n          \"db\": \"./src/db\"\n        }\n      }\n    ]\n  ]\n}\n```\n\nThis allows you to do nice things such as `import Page from 'ui/pages/Page';`, for example in the `startup/server` you could have done `import 'api'` instead of `import '../../api` or worse `import '/src/api`\n\nCongratulations, you have succesfully setup a GraphQL Server that is extremely powerful and feature-rich.\n","date":"2018-08-31T12:51:19.870Z","updated":"2018-08-31T12:51:19.870Z","path":"starterpack/setting-up.html","comments":1,"layout":"page","_id":"cjqqmfrhh000ds9a4mf1nzn75","content":"<p>Make sure you have Meteor installed: <a href=\"https://www.meteor.com/install\" target=\"_blank\" rel=\"noopener\">https://www.meteor.com/install</a></p>\n<h1 id=\"Create-a-fresh-project\"><a href=\"#Create-a-fresh-project\" class=\"headerlink\" title=\"Create a fresh project\"></a>Create a fresh project</h1><p>If you are in a terminal you can just copy/paste all at once. We start with an empty application.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor <span class=\"keyword\">create</span> <span class=\"comment\">--bare my-app</span></span><br><span class=\"line\">cd my-app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Dependencies for the server</span></span><br><span class=\"line\">meteor npm i -S graphql graphql-<span class=\"keyword\">load</span> apollo-<span class=\"keyword\">server</span>-express <span class=\"keyword\">uuid</span> graphql-tools graphql-<span class=\"keyword\">type</span>-<span class=\"keyword\">json</span> apollo-live-<span class=\"keyword\">server</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Dependencies for the client</span></span><br><span class=\"line\">meteor npm i -S react-apollo apollo-live-<span class=\"keyword\">client</span> apollo-<span class=\"keyword\">client</span> apollo-<span class=\"keyword\">cache</span>-<span class=\"keyword\">inmemory</span> apollo-<span class=\"keyword\">link</span> apollo-<span class=\"keyword\">link</span>-<span class=\"keyword\">http</span> apollo-<span class=\"keyword\">link</span>-ws apollo-morpher subscriptions-transport-ws apollo-upload-<span class=\"keyword\">client</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you're looking into Server Side Rendering with React</span></span><br><span class=\"line\">meteor npm i -S react-dom react-router apollo-<span class=\"keyword\">link</span>-<span class=\"keyword\">schema</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Now we add the package</span></span><br><span class=\"line\">meteor <span class=\"keyword\">add</span> cultofcoders:apollo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optional but highly recommended (so you can import .gql/.graphql files)</span></span><br><span class=\"line\">meteor <span class=\"keyword\">add</span> swydo:graphql</span><br></pre></td></tr></table></figure>\n<p>Now let’s initialize our GraphQL server:</p>\n<p>Add the following to <code>package.json</code>, it will allow us to specify the entry points for our app:</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"meteor\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"mainModule\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"client\"</span>: <span class=\"string\">\"src/startup/client/index.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>: <span class=\"string\">\"src/startup/server/index.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"testModule\"</span>: <span class=\"string\">\"tests/main.js\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p src/startup<span class=\"built_in\">/client </span>src/startup<span class=\"built_in\">/server </span>src/api</span><br><span class=\"line\">touch src/startup/client/index.js src/startup/server/index.js src/api/index.js</span><br></pre></td></tr></table></figure>\n<p>Now go to <code>src/startup/server/index.js</code> and add this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/startup/server/apollo.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initialize &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; server &#125; = initialize();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; server &#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; load &#125; <span class=\"keyword\">from</span> <span class=\"string\">'graphql-load'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">load(&#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">      sayHello: String</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">      sayHello: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">'Hello world!'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../../api'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./apollo'</span>;</span><br></pre></td></tr></table></figure>\n<p>Note: the initialize() function needs to run after everything has been loaded, loading anything after <code>initialize()</code> will have no effect on your Schema.</p>\n<p>Now you can start Meteor via:</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor <span class=\"built_in\">npm</span> start</span><br></pre></td></tr></table></figure>\n<p>Now get on your browser and go to: <a href=\"http://localhost:3000/graphql\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/graphql</a> and give your first query a spin:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query &#123;</span><br><span class=\"line\">  sayHello</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Module-Aliases\"><a href=\"#Module-Aliases\" class=\"headerlink\" title=\"Module Aliases\"></a>Module Aliases</h2><p>In addition to what we just described, you can also create module aliases so:</p>\n<p><code>npm i --save-dev babel-plugin-module-resolver</code></p>\n<p>In <code>.babelrc</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"meteor\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"module-resolver\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"root\"</span>: [<span class=\"string\">\".\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"alias\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"api\"</span>: <span class=\"string\">\"./src/api\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"ui\"</span>: <span class=\"string\">\"./src/ui\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"db\"</span>: <span class=\"string\">\"./src/db\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This allows you to do nice things such as <code>import Page from &#39;ui/pages/Page&#39;;</code>, for example in the <code>startup/server</code> you could have done <code>import &#39;api&#39;</code> instead of <code>import &#39;../../api</code> or worse <code>import &#39;/src/api</code></p>\n<p>Congratulations, you have succesfully setup a GraphQL Server that is extremely powerful and feature-rich.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Make sure you have Meteor installed: <a href=\"https://www.meteor.com/install\" target=\"_blank\" rel=\"noopener\">https://www.meteor.com/install</a></p>\n<h1 id=\"Create-a-fresh-project\"><a href=\"#Create-a-fresh-project\" class=\"headerlink\" title=\"Create a fresh project\"></a>Create a fresh project</h1><p>If you are in a terminal you can just copy/paste all at once. We start with an empty application.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor <span class=\"keyword\">create</span> <span class=\"comment\">--bare my-app</span></span><br><span class=\"line\">cd my-app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Dependencies for the server</span></span><br><span class=\"line\">meteor npm i -S graphql graphql-<span class=\"keyword\">load</span> apollo-<span class=\"keyword\">server</span>-express <span class=\"keyword\">uuid</span> graphql-tools graphql-<span class=\"keyword\">type</span>-<span class=\"keyword\">json</span> apollo-live-<span class=\"keyword\">server</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Dependencies for the client</span></span><br><span class=\"line\">meteor npm i -S react-apollo apollo-live-<span class=\"keyword\">client</span> apollo-<span class=\"keyword\">client</span> apollo-<span class=\"keyword\">cache</span>-<span class=\"keyword\">inmemory</span> apollo-<span class=\"keyword\">link</span> apollo-<span class=\"keyword\">link</span>-<span class=\"keyword\">http</span> apollo-<span class=\"keyword\">link</span>-ws apollo-morpher subscriptions-transport-ws apollo-upload-<span class=\"keyword\">client</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you're looking into Server Side Rendering with React</span></span><br><span class=\"line\">meteor npm i -S react-dom react-router apollo-<span class=\"keyword\">link</span>-<span class=\"keyword\">schema</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Now we add the package</span></span><br><span class=\"line\">meteor <span class=\"keyword\">add</span> cultofcoders:apollo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optional but highly recommended (so you can import .gql/.graphql files)</span></span><br><span class=\"line\">meteor <span class=\"keyword\">add</span> swydo:graphql</span><br></pre></td></tr></table></figure>\n<p>Now let’s initialize our GraphQL server:</p>\n<p>Add the following to <code>package.json</code>, it will allow us to specify the entry points for our app:</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"meteor\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"mainModule\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"client\"</span>: <span class=\"string\">\"src/startup/client/index.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>: <span class=\"string\">\"src/startup/server/index.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"testModule\"</span>: <span class=\"string\">\"tests/main.js\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p src/startup<span class=\"built_in\">/client </span>src/startup<span class=\"built_in\">/server </span>src/api</span><br><span class=\"line\">touch src/startup/client/index.js src/startup/server/index.js src/api/index.js</span><br></pre></td></tr></table></figure>\n<p>Now go to <code>src/startup/server/index.js</code> and add this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/startup/server/apollo.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initialize &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; server &#125; = initialize();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; server &#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; load &#125; <span class=\"keyword\">from</span> <span class=\"string\">'graphql-load'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">load(&#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">      sayHello: String</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">      sayHello: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">'Hello world!'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../../api'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./apollo'</span>;</span><br></pre></td></tr></table></figure>\n<p>Note: the initialize() function needs to run after everything has been loaded, loading anything after <code>initialize()</code> will have no effect on your Schema.</p>\n<p>Now you can start Meteor via:</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor <span class=\"built_in\">npm</span> start</span><br></pre></td></tr></table></figure>\n<p>Now get on your browser and go to: <a href=\"http://localhost:3000/graphql\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/graphql</a> and give your first query a spin:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query &#123;</span><br><span class=\"line\">  sayHello</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Module-Aliases\"><a href=\"#Module-Aliases\" class=\"headerlink\" title=\"Module Aliases\"></a>Module Aliases</h2><p>In addition to what we just described, you can also create module aliases so:</p>\n<p><code>npm i --save-dev babel-plugin-module-resolver</code></p>\n<p>In <code>.babelrc</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"meteor\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"module-resolver\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"root\"</span>: [<span class=\"string\">\".\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"alias\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"api\"</span>: <span class=\"string\">\"./src/api\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"ui\"</span>: <span class=\"string\">\"./src/ui\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"db\"</span>: <span class=\"string\">\"./src/db\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This allows you to do nice things such as <code>import Page from &#39;ui/pages/Page&#39;;</code>, for example in the <code>startup/server</code> you could have done <code>import &#39;api&#39;</code> instead of <code>import &#39;../../api</code> or worse <code>import &#39;/src/api</code></p>\n<p>Congratulations, you have succesfully setup a GraphQL Server that is extremely powerful and feature-rich.</p>\n"},{"title":"Services","description":"Using services to decouple your code","disqusPage":"Chapter 3: Services","_content":"\n## What is a service?\n\nA service is a unit of work (a function) or a group of very related functionality (a class)\n\nUsing services is linked to the [Single responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle)\n\n```simple-text\nQ: So when do we need to use services?\nA: Everytime!\nQ: Where do we use services?\nA: Everywhere!\n```\n\nOk we're done here, everything is clear now, right?\n\nJokes aside, you should treat every functionality in your app as a service, for example:\nYou want to send an email, and ofcourse, you know how to do this, you use _Email.send_. Well, _Email_ is actually a service, but now how you send it in your app ?\n\nLet's say you create a Post, and you need to notify the Admin to approve it.\nWhere do you store that unit of logic ? Inside a resolver ? Inside a function ? Inside a class ?\n\nThe answer is: **NOT inside the resolver**\n\nUsually, you tend to couple logic in your resolver which is a very very bad terrible thing, because the resolver is a `Controller` it should not know implementation details.\n\nIt is also bad because resolvers are a proxy layer between the client and the server, they shouldn't store business logic, or logic of any kind.\n\nLet's start focusing about services in depth, and understand some nice principles about\ncrafting them in a nice way.\n\nDon't forget to read: https://github.com/ryanmcdermott/clean-code-javascript\n\n## Sample\n\n```js\nclass ItemService {\n  static createItem() {\n    // put logic here for item creation\n  }\n\n  static updateItem(id, data) {\n    const item = this._getItem(id);\n    // do something with it\n  }\n\n  static getItem(itemId) {\n    // returns the item from database or throws an exception\n  }\n}\n\nexport default ItemService;\n```\n\nIn most cases, you want your services to be a class with static methods, and not an instance of that class `new ItemService()`, however\nwe'll see below why in some cases using the instance makes more sense.\n\n## Structuring\n\nBy default we are going to put them inside:\n`/src/api/{module}/services`\n\nUsually {module} represents the collection name it handles it, but this is not always the case, it can represent something that is handling multiple collections to achieve its goal.\n\nIf your services need more decoupling feel free to nest them:\n`/src/api/{module}/services/{submodule}`\n\nName your services with uppercase if classes (ItemService), or lowercase if functions (doSomething).\nIf your service is a class, suffix it with service, if it's a function, make the sure the filename is a verb.\n\nInside a function service module, you can create additional functions, but you must export only one, if you need to\nexport multiple functions, it will become a service class.\n\n## Creating Services\n\nGo API first. Don't try to think about the logic, try to think about how you are going to use it. This is why [**TDD**](https://technologyconversations.com/2013/12/20/test-driven-development-tdd-example-walkthrough/) works so well, because\nit lets you think about the API and you also write a test, and passing tests means you finished implementation.\n\nSo, instead of patterns, try to think about how you would use it, and just write a test for it first. You will notice that your development speed will increase dramatically (after first tries). No kidding!\n\n#### Helpful questions:\n\n1. What would be the cleanest, easiest way to use this Service?\n2. How can I make it so it's easier to understand by others?\n3. What comments can I leave so the next developer that comes in understands this?\n4. Does my service have a single responsability?\n5. Is there any functionality in my service that is outside its scope so I can decouple it?\n\n## Conventions\n\nAgain, don't forget to read: https://github.com/ryanmcdermott/clean-code-javascript. I'm not joking, read it, daily, until it's in your bloodstream.\n\n#### Functions should be actions or interrogations\n\nPlease favor longer names for small scope, lower names for large scopes.\n\n```js\n// BAD\nobject.author();\nobject.veryBad();\nobject.closing();\nobject.mkSmtGdAbtIt();\n```\n\n```js\n// GOOD\nobject.getAuthor();\nobject.isGood();\nobject.close();\nobject.makeSomethingGoodAboutIt();\n```\n\n#### Variable names should be substantives or interrogations\n\n```js\n// BAD\nlet making;\nlet made;\n```\n\n```js\n// GOOD\nlet isMaking;\nlet isMade;\n```\n\n#### Functions should be small\n\nA function should not be larger than 10 lines. Honestly, if you have that, then it must be refactored. Exceptions being, large switch cases, Pure Components and render() functions from React.\n\n#### Classes hide in large functions\n\nThere are cases where you have a single function as service, and that function begins to grow,\nand you find that decoupling it in multiple functions gets tedious because you will need to pass\nmany variables along, and you realize that those variables are strings or numbers and can't be properly modified,\nso you need to return them, and even if your intentions are pure, your code will become\nmore messy.\n\nThe rule is simple: when it's difficult to decouple a function, create a class. Because inside a class, each method\nhas access to `this` context, so you no longer need to pass variables along.\n\n#### Don't extend classes\n\nAnother opinionated advice, just don't use extend. The only exception is if the class you extend\nis abstract (you don't instantiate/use it stand-alone).\n\n#### Provide JSDoc and Comments\n\nWhenever you feel like you are doing something that is not verbose, leave a comment, and also leave JSDoc, especially for\nvariables. It becomes truly helpful when you are using an API written by someone else and the IDE shows you which variables it needs and a description for them.\n\nIf you find a snippet, or something that describes a certain thing, don't be afraid to leave links,\nespecially if you're writing an facade to an external API, leave link to the docs, it will save you and other devs\ntime.\n\nLeave as much comments as you can, but don't go off the grid, stay to the point. And only leave comments when necessary:\n\n```js\n// BAD (The code already tells you what you do)\n// We are iterating through users\nusers.forEach(user => {});\n```\n\n```js\n// GOOD (Even if you can read it nicely, you need to understand the intention fast)\n// We are calculating the total cost of all products so we can use it in total calculation cost.\nlet totalCost = 0;\nproducts.forEach(product => {\n  totalCost += product.cost;\n});\n```\n\n## Dependency Injection\n\nInversion principle is simple, let the service decide what dependencies it has. We are kinda doing this already\nbecause each module imports what it needs in order to execute properly.\n\nThe reason for changing it a bit is the fact that it will allow easy testing. For example, we want to test that `PaymentService.charge` is been called when something happens.\n\n```js\nimport PaymentService from 'somewhere';\n\nclass ItemService {\n  static createItem(item) {\n    Items.insert(item);\n    PaymentService.charge(item.userId, 20.0);\n  }\n}\n\nexport default ItemService;\n```\n\nNow in my test how would I be sure that `PaymentService.charge` is called without actually altering `PaymentService`?\nThis requires a change in strategy, by injecting dependencies in the constructor:\n\n```js\nimport PaymentService from 'somewhere';\n\nclass ItemService {\n  constructor({ paymentService }) {\n    this.paymentService = paymentService;\n  }\n\n  createItem(item) {\n    Items.insert(item);\n    this.paymentService.charge(item.userId, 20.0);\n  }\n}\n\nexport default new ItemService({\n  paymentService: PaymentService,\n});\n\nexport { ItemService };\n```\n\nOk now if we would like to test it, we have access to the exported variable: `ItemService` and we can pass-in a [stub](http://sinonjs.org/releases/v4.0.1/stubs/) for `PaymentService` in its constructor.\n\nThe only problem with this pattern is the fact that it creates an instance without you wanting to,\ntherefore you can create a separate `ServiceModel` file (ItemServiceModel.js) and instantiate (and export) it inside `ItemService.js`, and when you test you only need to play with `ItemServiceModel`, or you can have a `container.js` file that instantiates all services and exports them.\n","source":"starterpack/services.md","raw":"---\ntitle: 'Services'\ndescription: Using services to decouple your code\ndisqusPage: 'Chapter 3: Services'\n---\n\n## What is a service?\n\nA service is a unit of work (a function) or a group of very related functionality (a class)\n\nUsing services is linked to the [Single responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle)\n\n```simple-text\nQ: So when do we need to use services?\nA: Everytime!\nQ: Where do we use services?\nA: Everywhere!\n```\n\nOk we're done here, everything is clear now, right?\n\nJokes aside, you should treat every functionality in your app as a service, for example:\nYou want to send an email, and ofcourse, you know how to do this, you use _Email.send_. Well, _Email_ is actually a service, but now how you send it in your app ?\n\nLet's say you create a Post, and you need to notify the Admin to approve it.\nWhere do you store that unit of logic ? Inside a resolver ? Inside a function ? Inside a class ?\n\nThe answer is: **NOT inside the resolver**\n\nUsually, you tend to couple logic in your resolver which is a very very bad terrible thing, because the resolver is a `Controller` it should not know implementation details.\n\nIt is also bad because resolvers are a proxy layer between the client and the server, they shouldn't store business logic, or logic of any kind.\n\nLet's start focusing about services in depth, and understand some nice principles about\ncrafting them in a nice way.\n\nDon't forget to read: https://github.com/ryanmcdermott/clean-code-javascript\n\n## Sample\n\n```js\nclass ItemService {\n  static createItem() {\n    // put logic here for item creation\n  }\n\n  static updateItem(id, data) {\n    const item = this._getItem(id);\n    // do something with it\n  }\n\n  static getItem(itemId) {\n    // returns the item from database or throws an exception\n  }\n}\n\nexport default ItemService;\n```\n\nIn most cases, you want your services to be a class with static methods, and not an instance of that class `new ItemService()`, however\nwe'll see below why in some cases using the instance makes more sense.\n\n## Structuring\n\nBy default we are going to put them inside:\n`/src/api/{module}/services`\n\nUsually {module} represents the collection name it handles it, but this is not always the case, it can represent something that is handling multiple collections to achieve its goal.\n\nIf your services need more decoupling feel free to nest them:\n`/src/api/{module}/services/{submodule}`\n\nName your services with uppercase if classes (ItemService), or lowercase if functions (doSomething).\nIf your service is a class, suffix it with service, if it's a function, make the sure the filename is a verb.\n\nInside a function service module, you can create additional functions, but you must export only one, if you need to\nexport multiple functions, it will become a service class.\n\n## Creating Services\n\nGo API first. Don't try to think about the logic, try to think about how you are going to use it. This is why [**TDD**](https://technologyconversations.com/2013/12/20/test-driven-development-tdd-example-walkthrough/) works so well, because\nit lets you think about the API and you also write a test, and passing tests means you finished implementation.\n\nSo, instead of patterns, try to think about how you would use it, and just write a test for it first. You will notice that your development speed will increase dramatically (after first tries). No kidding!\n\n#### Helpful questions:\n\n1. What would be the cleanest, easiest way to use this Service?\n2. How can I make it so it's easier to understand by others?\n3. What comments can I leave so the next developer that comes in understands this?\n4. Does my service have a single responsability?\n5. Is there any functionality in my service that is outside its scope so I can decouple it?\n\n## Conventions\n\nAgain, don't forget to read: https://github.com/ryanmcdermott/clean-code-javascript. I'm not joking, read it, daily, until it's in your bloodstream.\n\n#### Functions should be actions or interrogations\n\nPlease favor longer names for small scope, lower names for large scopes.\n\n```js\n// BAD\nobject.author();\nobject.veryBad();\nobject.closing();\nobject.mkSmtGdAbtIt();\n```\n\n```js\n// GOOD\nobject.getAuthor();\nobject.isGood();\nobject.close();\nobject.makeSomethingGoodAboutIt();\n```\n\n#### Variable names should be substantives or interrogations\n\n```js\n// BAD\nlet making;\nlet made;\n```\n\n```js\n// GOOD\nlet isMaking;\nlet isMade;\n```\n\n#### Functions should be small\n\nA function should not be larger than 10 lines. Honestly, if you have that, then it must be refactored. Exceptions being, large switch cases, Pure Components and render() functions from React.\n\n#### Classes hide in large functions\n\nThere are cases where you have a single function as service, and that function begins to grow,\nand you find that decoupling it in multiple functions gets tedious because you will need to pass\nmany variables along, and you realize that those variables are strings or numbers and can't be properly modified,\nso you need to return them, and even if your intentions are pure, your code will become\nmore messy.\n\nThe rule is simple: when it's difficult to decouple a function, create a class. Because inside a class, each method\nhas access to `this` context, so you no longer need to pass variables along.\n\n#### Don't extend classes\n\nAnother opinionated advice, just don't use extend. The only exception is if the class you extend\nis abstract (you don't instantiate/use it stand-alone).\n\n#### Provide JSDoc and Comments\n\nWhenever you feel like you are doing something that is not verbose, leave a comment, and also leave JSDoc, especially for\nvariables. It becomes truly helpful when you are using an API written by someone else and the IDE shows you which variables it needs and a description for them.\n\nIf you find a snippet, or something that describes a certain thing, don't be afraid to leave links,\nespecially if you're writing an facade to an external API, leave link to the docs, it will save you and other devs\ntime.\n\nLeave as much comments as you can, but don't go off the grid, stay to the point. And only leave comments when necessary:\n\n```js\n// BAD (The code already tells you what you do)\n// We are iterating through users\nusers.forEach(user => {});\n```\n\n```js\n// GOOD (Even if you can read it nicely, you need to understand the intention fast)\n// We are calculating the total cost of all products so we can use it in total calculation cost.\nlet totalCost = 0;\nproducts.forEach(product => {\n  totalCost += product.cost;\n});\n```\n\n## Dependency Injection\n\nInversion principle is simple, let the service decide what dependencies it has. We are kinda doing this already\nbecause each module imports what it needs in order to execute properly.\n\nThe reason for changing it a bit is the fact that it will allow easy testing. For example, we want to test that `PaymentService.charge` is been called when something happens.\n\n```js\nimport PaymentService from 'somewhere';\n\nclass ItemService {\n  static createItem(item) {\n    Items.insert(item);\n    PaymentService.charge(item.userId, 20.0);\n  }\n}\n\nexport default ItemService;\n```\n\nNow in my test how would I be sure that `PaymentService.charge` is called without actually altering `PaymentService`?\nThis requires a change in strategy, by injecting dependencies in the constructor:\n\n```js\nimport PaymentService from 'somewhere';\n\nclass ItemService {\n  constructor({ paymentService }) {\n    this.paymentService = paymentService;\n  }\n\n  createItem(item) {\n    Items.insert(item);\n    this.paymentService.charge(item.userId, 20.0);\n  }\n}\n\nexport default new ItemService({\n  paymentService: PaymentService,\n});\n\nexport { ItemService };\n```\n\nOk now if we would like to test it, we have access to the exported variable: `ItemService` and we can pass-in a [stub](http://sinonjs.org/releases/v4.0.1/stubs/) for `PaymentService` in its constructor.\n\nThe only problem with this pattern is the fact that it creates an instance without you wanting to,\ntherefore you can create a separate `ServiceModel` file (ItemServiceModel.js) and instantiate (and export) it inside `ItemService.js`, and when you test you only need to play with `ItemServiceModel`, or you can have a `container.js` file that instantiates all services and exports them.\n","date":"2018-08-31T12:51:19.876Z","updated":"2018-08-31T12:51:19.876Z","path":"starterpack/services.html","comments":1,"layout":"page","_id":"cjqqmfrhj000es9a4jm7yk1d9","content":"<h2 id=\"What-is-a-service\"><a href=\"#What-is-a-service\" class=\"headerlink\" title=\"What is a service?\"></a>What is a service?</h2><p>A service is a unit of work (a function) or a group of very related functionality (a class)</p>\n<p>Using services is linked to the <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\" target=\"_blank\" rel=\"noopener\">Single responsibility principle</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Q: So when do we need to use services?</span><br><span class=\"line\">A: Everytime!</span><br><span class=\"line\">Q: Where do we use services?</span><br><span class=\"line\">A: Everywhere!</span><br></pre></td></tr></table></figure>\n<p>Ok we’re done here, everything is clear now, right?</p>\n<p>Jokes aside, you should treat every functionality in your app as a service, for example:\nYou want to send an email, and ofcourse, you know how to do this, you use <em>Email.send</em>. Well, <em>Email</em> is actually a service, but now how you send it in your app ?</p>\n<p>Let’s say you create a Post, and you need to notify the Admin to approve it.\nWhere do you store that unit of logic ? Inside a resolver ? Inside a function ? Inside a class ?</p>\n<p>The answer is: <strong>NOT inside the resolver</strong></p>\n<p>Usually, you tend to couple logic in your resolver which is a very very bad terrible thing, because the resolver is a <code>Controller</code> it should not know implementation details.</p>\n<p>It is also bad because resolvers are a proxy layer between the client and the server, they shouldn’t store business logic, or logic of any kind.</p>\n<p>Let’s start focusing about services in depth, and understand some nice principles about\ncrafting them in a nice way.</p>\n<p>Don’t forget to read: <a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/ryanmcdermott/clean-code-javascript</a></p>\n<h2 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> createItem() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// put logic here for item creation</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> updateItem(id, data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = <span class=\"keyword\">this</span>._getItem(id);</span><br><span class=\"line\">    <span class=\"comment\">// do something with it</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> getItem(itemId) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// returns the item from database or throws an exception</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ItemService;</span><br></pre></td></tr></table></figure>\n<p>In most cases, you want your services to be a class with static methods, and not an instance of that class <code>new ItemService()</code>, however\nwe’ll see below why in some cases using the instance makes more sense.</p>\n<h2 id=\"Structuring\"><a href=\"#Structuring\" class=\"headerlink\" title=\"Structuring\"></a>Structuring</h2><p>By default we are going to put them inside:\n<code>/src/api/{module}/services</code></p>\n<p>Usually {module} represents the collection name it handles it, but this is not always the case, it can represent something that is handling multiple collections to achieve its goal.</p>\n<p>If your services need more decoupling feel free to nest them:\n<code>/src/api/{module}/services/{submodule}</code></p>\n<p>Name your services with uppercase if classes (ItemService), or lowercase if functions (doSomething).\nIf your service is a class, suffix it with service, if it’s a function, make the sure the filename is a verb.</p>\n<p>Inside a function service module, you can create additional functions, but you must export only one, if you need to\nexport multiple functions, it will become a service class.</p>\n<h2 id=\"Creating-Services\"><a href=\"#Creating-Services\" class=\"headerlink\" title=\"Creating Services\"></a>Creating Services</h2><p>Go API first. Don’t try to think about the logic, try to think about how you are going to use it. This is why <a href=\"https://technologyconversations.com/2013/12/20/test-driven-development-tdd-example-walkthrough/\" target=\"_blank\" rel=\"noopener\"><strong>TDD</strong></a> works so well, because\nit lets you think about the API and you also write a test, and passing tests means you finished implementation.</p>\n<p>So, instead of patterns, try to think about how you would use it, and just write a test for it first. You will notice that your development speed will increase dramatically (after first tries). No kidding!</p>\n<h4 id=\"Helpful-questions\"><a href=\"#Helpful-questions\" class=\"headerlink\" title=\"Helpful questions:\"></a>Helpful questions:</h4><ol>\n<li>What would be the cleanest, easiest way to use this Service?</li>\n<li>How can I make it so it’s easier to understand by others?</li>\n<li>What comments can I leave so the next developer that comes in understands this?</li>\n<li>Does my service have a single responsability?</li>\n<li>Is there any functionality in my service that is outside its scope so I can decouple it?</li>\n</ol>\n<h2 id=\"Conventions\"><a href=\"#Conventions\" class=\"headerlink\" title=\"Conventions\"></a>Conventions</h2><p>Again, don’t forget to read: <a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/ryanmcdermott/clean-code-javascript</a>. I’m not joking, read it, daily, until it’s in your bloodstream.</p>\n<h4 id=\"Functions-should-be-actions-or-interrogations\"><a href=\"#Functions-should-be-actions-or-interrogations\" class=\"headerlink\" title=\"Functions should be actions or interrogations\"></a>Functions should be actions or interrogations</h4><p>Please favor longer names for small scope, lower names for large scopes.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BAD</span></span><br><span class=\"line\">object.author();</span><br><span class=\"line\">object.veryBad();</span><br><span class=\"line\">object.closing();</span><br><span class=\"line\">object.mkSmtGdAbtIt();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GOOD</span></span><br><span class=\"line\">object.getAuthor();</span><br><span class=\"line\">object.isGood();</span><br><span class=\"line\">object.close();</span><br><span class=\"line\">object.makeSomethingGoodAboutIt();</span><br></pre></td></tr></table></figure>\n<h4 id=\"Variable-names-should-be-substantives-or-interrogations\"><a href=\"#Variable-names-should-be-substantives-or-interrogations\" class=\"headerlink\" title=\"Variable names should be substantives or interrogations\"></a>Variable names should be substantives or interrogations</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BAD</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> making;</span><br><span class=\"line\"><span class=\"keyword\">let</span> made;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GOOD</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isMaking;</span><br><span class=\"line\"><span class=\"keyword\">let</span> isMade;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Functions-should-be-small\"><a href=\"#Functions-should-be-small\" class=\"headerlink\" title=\"Functions should be small\"></a>Functions should be small</h4><p>A function should not be larger than 10 lines. Honestly, if you have that, then it must be refactored. Exceptions being, large switch cases, Pure Components and render() functions from React.</p>\n<h4 id=\"Classes-hide-in-large-functions\"><a href=\"#Classes-hide-in-large-functions\" class=\"headerlink\" title=\"Classes hide in large functions\"></a>Classes hide in large functions</h4><p>There are cases where you have a single function as service, and that function begins to grow,\nand you find that decoupling it in multiple functions gets tedious because you will need to pass\nmany variables along, and you realize that those variables are strings or numbers and can’t be properly modified,\nso you need to return them, and even if your intentions are pure, your code will become\nmore messy.</p>\n<p>The rule is simple: when it’s difficult to decouple a function, create a class. Because inside a class, each method\nhas access to <code>this</code> context, so you no longer need to pass variables along.</p>\n<h4 id=\"Don’t-extend-classes\"><a href=\"#Don’t-extend-classes\" class=\"headerlink\" title=\"Don’t extend classes\"></a>Don’t extend classes</h4><p>Another opinionated advice, just don’t use extend. The only exception is if the class you extend\nis abstract (you don’t instantiate/use it stand-alone).</p>\n<h4 id=\"Provide-JSDoc-and-Comments\"><a href=\"#Provide-JSDoc-and-Comments\" class=\"headerlink\" title=\"Provide JSDoc and Comments\"></a>Provide JSDoc and Comments</h4><p>Whenever you feel like you are doing something that is not verbose, leave a comment, and also leave JSDoc, especially for\nvariables. It becomes truly helpful when you are using an API written by someone else and the IDE shows you which variables it needs and a description for them.</p>\n<p>If you find a snippet, or something that describes a certain thing, don’t be afraid to leave links,\nespecially if you’re writing an facade to an external API, leave link to the docs, it will save you and other devs\ntime.</p>\n<p>Leave as much comments as you can, but don’t go off the grid, stay to the point. And only leave comments when necessary:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BAD (The code already tells you what you do)</span></span><br><span class=\"line\"><span class=\"comment\">// We are iterating through users</span></span><br><span class=\"line\">users.forEach(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GOOD (Even if you can read it nicely, you need to understand the intention fast)</span></span><br><span class=\"line\"><span class=\"comment\">// We are calculating the total cost of all products so we can use it in total calculation cost.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> totalCost = <span class=\"number\">0</span>;</span><br><span class=\"line\">products.forEach(<span class=\"function\"><span class=\"params\">product</span> =&gt;</span> &#123;</span><br><span class=\"line\">  totalCost += product.cost;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection\"></a>Dependency Injection</h2><p>Inversion principle is simple, let the service decide what dependencies it has. We are kinda doing this already\nbecause each module imports what it needs in order to execute properly.</p>\n<p>The reason for changing it a bit is the fact that it will allow easy testing. For example, we want to test that <code>PaymentService.charge</code> is been called when something happens.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> PaymentService <span class=\"keyword\">from</span> <span class=\"string\">'somewhere'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> createItem(item) &#123;</span><br><span class=\"line\">    Items.insert(item);</span><br><span class=\"line\">    PaymentService.charge(item.userId, <span class=\"number\">20.0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ItemService;</span><br></pre></td></tr></table></figure>\n<p>Now in my test how would I be sure that <code>PaymentService.charge</code> is called without actually altering <code>PaymentService</code>?\nThis requires a change in strategy, by injecting dependencies in the constructor:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> PaymentService <span class=\"keyword\">from</span> <span class=\"string\">'somewhere'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123; paymentService &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.paymentService = paymentService;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  createItem(item) &#123;</span><br><span class=\"line\">    Items.insert(item);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.paymentService.charge(item.userId, <span class=\"number\">20.0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> ItemService(&#123;</span><br><span class=\"line\">  paymentService: PaymentService,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; ItemService &#125;;</span><br></pre></td></tr></table></figure>\n<p>Ok now if we would like to test it, we have access to the exported variable: <code>ItemService</code> and we can pass-in a <a href=\"http://sinonjs.org/releases/v4.0.1/stubs/\" target=\"_blank\" rel=\"noopener\">stub</a> for <code>PaymentService</code> in its constructor.</p>\n<p>The only problem with this pattern is the fact that it creates an instance without you wanting to,\ntherefore you can create a separate <code>ServiceModel</code> file (ItemServiceModel.js) and instantiate (and export) it inside <code>ItemService.js</code>, and when you test you only need to play with <code>ItemServiceModel</code>, or you can have a <code>container.js</code> file that instantiates all services and exports them.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"What-is-a-service\"><a href=\"#What-is-a-service\" class=\"headerlink\" title=\"What is a service?\"></a>What is a service?</h2><p>A service is a unit of work (a function) or a group of very related functionality (a class)</p>\n<p>Using services is linked to the <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\" target=\"_blank\" rel=\"noopener\">Single responsibility principle</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Q: So when do we need to use services?</span><br><span class=\"line\">A: Everytime!</span><br><span class=\"line\">Q: Where do we use services?</span><br><span class=\"line\">A: Everywhere!</span><br></pre></td></tr></table></figure>\n<p>Ok we’re done here, everything is clear now, right?</p>\n<p>Jokes aside, you should treat every functionality in your app as a service, for example:\nYou want to send an email, and ofcourse, you know how to do this, you use <em>Email.send</em>. Well, <em>Email</em> is actually a service, but now how you send it in your app ?</p>\n<p>Let’s say you create a Post, and you need to notify the Admin to approve it.\nWhere do you store that unit of logic ? Inside a resolver ? Inside a function ? Inside a class ?</p>\n<p>The answer is: <strong>NOT inside the resolver</strong></p>\n<p>Usually, you tend to couple logic in your resolver which is a very very bad terrible thing, because the resolver is a <code>Controller</code> it should not know implementation details.</p>\n<p>It is also bad because resolvers are a proxy layer between the client and the server, they shouldn’t store business logic, or logic of any kind.</p>\n<p>Let’s start focusing about services in depth, and understand some nice principles about\ncrafting them in a nice way.</p>\n<p>Don’t forget to read: <a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/ryanmcdermott/clean-code-javascript</a></p>\n<h2 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> createItem() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// put logic here for item creation</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> updateItem(id, data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = <span class=\"keyword\">this</span>._getItem(id);</span><br><span class=\"line\">    <span class=\"comment\">// do something with it</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> getItem(itemId) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// returns the item from database or throws an exception</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ItemService;</span><br></pre></td></tr></table></figure>\n<p>In most cases, you want your services to be a class with static methods, and not an instance of that class <code>new ItemService()</code>, however\nwe’ll see below why in some cases using the instance makes more sense.</p>\n<h2 id=\"Structuring\"><a href=\"#Structuring\" class=\"headerlink\" title=\"Structuring\"></a>Structuring</h2><p>By default we are going to put them inside:\n<code>/src/api/{module}/services</code></p>\n<p>Usually {module} represents the collection name it handles it, but this is not always the case, it can represent something that is handling multiple collections to achieve its goal.</p>\n<p>If your services need more decoupling feel free to nest them:\n<code>/src/api/{module}/services/{submodule}</code></p>\n<p>Name your services with uppercase if classes (ItemService), or lowercase if functions (doSomething).\nIf your service is a class, suffix it with service, if it’s a function, make the sure the filename is a verb.</p>\n<p>Inside a function service module, you can create additional functions, but you must export only one, if you need to\nexport multiple functions, it will become a service class.</p>\n<h2 id=\"Creating-Services\"><a href=\"#Creating-Services\" class=\"headerlink\" title=\"Creating Services\"></a>Creating Services</h2><p>Go API first. Don’t try to think about the logic, try to think about how you are going to use it. This is why <a href=\"https://technologyconversations.com/2013/12/20/test-driven-development-tdd-example-walkthrough/\" target=\"_blank\" rel=\"noopener\"><strong>TDD</strong></a> works so well, because\nit lets you think about the API and you also write a test, and passing tests means you finished implementation.</p>\n<p>So, instead of patterns, try to think about how you would use it, and just write a test for it first. You will notice that your development speed will increase dramatically (after first tries). No kidding!</p>\n<h4 id=\"Helpful-questions\"><a href=\"#Helpful-questions\" class=\"headerlink\" title=\"Helpful questions:\"></a>Helpful questions:</h4><ol>\n<li>What would be the cleanest, easiest way to use this Service?</li>\n<li>How can I make it so it’s easier to understand by others?</li>\n<li>What comments can I leave so the next developer that comes in understands this?</li>\n<li>Does my service have a single responsability?</li>\n<li>Is there any functionality in my service that is outside its scope so I can decouple it?</li>\n</ol>\n<h2 id=\"Conventions\"><a href=\"#Conventions\" class=\"headerlink\" title=\"Conventions\"></a>Conventions</h2><p>Again, don’t forget to read: <a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/ryanmcdermott/clean-code-javascript</a>. I’m not joking, read it, daily, until it’s in your bloodstream.</p>\n<h4 id=\"Functions-should-be-actions-or-interrogations\"><a href=\"#Functions-should-be-actions-or-interrogations\" class=\"headerlink\" title=\"Functions should be actions or interrogations\"></a>Functions should be actions or interrogations</h4><p>Please favor longer names for small scope, lower names for large scopes.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BAD</span></span><br><span class=\"line\">object.author();</span><br><span class=\"line\">object.veryBad();</span><br><span class=\"line\">object.closing();</span><br><span class=\"line\">object.mkSmtGdAbtIt();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GOOD</span></span><br><span class=\"line\">object.getAuthor();</span><br><span class=\"line\">object.isGood();</span><br><span class=\"line\">object.close();</span><br><span class=\"line\">object.makeSomethingGoodAboutIt();</span><br></pre></td></tr></table></figure>\n<h4 id=\"Variable-names-should-be-substantives-or-interrogations\"><a href=\"#Variable-names-should-be-substantives-or-interrogations\" class=\"headerlink\" title=\"Variable names should be substantives or interrogations\"></a>Variable names should be substantives or interrogations</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BAD</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> making;</span><br><span class=\"line\"><span class=\"keyword\">let</span> made;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GOOD</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isMaking;</span><br><span class=\"line\"><span class=\"keyword\">let</span> isMade;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Functions-should-be-small\"><a href=\"#Functions-should-be-small\" class=\"headerlink\" title=\"Functions should be small\"></a>Functions should be small</h4><p>A function should not be larger than 10 lines. Honestly, if you have that, then it must be refactored. Exceptions being, large switch cases, Pure Components and render() functions from React.</p>\n<h4 id=\"Classes-hide-in-large-functions\"><a href=\"#Classes-hide-in-large-functions\" class=\"headerlink\" title=\"Classes hide in large functions\"></a>Classes hide in large functions</h4><p>There are cases where you have a single function as service, and that function begins to grow,\nand you find that decoupling it in multiple functions gets tedious because you will need to pass\nmany variables along, and you realize that those variables are strings or numbers and can’t be properly modified,\nso you need to return them, and even if your intentions are pure, your code will become\nmore messy.</p>\n<p>The rule is simple: when it’s difficult to decouple a function, create a class. Because inside a class, each method\nhas access to <code>this</code> context, so you no longer need to pass variables along.</p>\n<h4 id=\"Don’t-extend-classes\"><a href=\"#Don’t-extend-classes\" class=\"headerlink\" title=\"Don’t extend classes\"></a>Don’t extend classes</h4><p>Another opinionated advice, just don’t use extend. The only exception is if the class you extend\nis abstract (you don’t instantiate/use it stand-alone).</p>\n<h4 id=\"Provide-JSDoc-and-Comments\"><a href=\"#Provide-JSDoc-and-Comments\" class=\"headerlink\" title=\"Provide JSDoc and Comments\"></a>Provide JSDoc and Comments</h4><p>Whenever you feel like you are doing something that is not verbose, leave a comment, and also leave JSDoc, especially for\nvariables. It becomes truly helpful when you are using an API written by someone else and the IDE shows you which variables it needs and a description for them.</p>\n<p>If you find a snippet, or something that describes a certain thing, don’t be afraid to leave links,\nespecially if you’re writing an facade to an external API, leave link to the docs, it will save you and other devs\ntime.</p>\n<p>Leave as much comments as you can, but don’t go off the grid, stay to the point. And only leave comments when necessary:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BAD (The code already tells you what you do)</span></span><br><span class=\"line\"><span class=\"comment\">// We are iterating through users</span></span><br><span class=\"line\">users.forEach(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GOOD (Even if you can read it nicely, you need to understand the intention fast)</span></span><br><span class=\"line\"><span class=\"comment\">// We are calculating the total cost of all products so we can use it in total calculation cost.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> totalCost = <span class=\"number\">0</span>;</span><br><span class=\"line\">products.forEach(<span class=\"function\"><span class=\"params\">product</span> =&gt;</span> &#123;</span><br><span class=\"line\">  totalCost += product.cost;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection\"></a>Dependency Injection</h2><p>Inversion principle is simple, let the service decide what dependencies it has. We are kinda doing this already\nbecause each module imports what it needs in order to execute properly.</p>\n<p>The reason for changing it a bit is the fact that it will allow easy testing. For example, we want to test that <code>PaymentService.charge</code> is been called when something happens.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> PaymentService <span class=\"keyword\">from</span> <span class=\"string\">'somewhere'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> createItem(item) &#123;</span><br><span class=\"line\">    Items.insert(item);</span><br><span class=\"line\">    PaymentService.charge(item.userId, <span class=\"number\">20.0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ItemService;</span><br></pre></td></tr></table></figure>\n<p>Now in my test how would I be sure that <code>PaymentService.charge</code> is called without actually altering <code>PaymentService</code>?\nThis requires a change in strategy, by injecting dependencies in the constructor:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> PaymentService <span class=\"keyword\">from</span> <span class=\"string\">'somewhere'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123; paymentService &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.paymentService = paymentService;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  createItem(item) &#123;</span><br><span class=\"line\">    Items.insert(item);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.paymentService.charge(item.userId, <span class=\"number\">20.0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> ItemService(&#123;</span><br><span class=\"line\">  paymentService: PaymentService,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; ItemService &#125;;</span><br></pre></td></tr></table></figure>\n<p>Ok now if we would like to test it, we have access to the exported variable: <code>ItemService</code> and we can pass-in a <a href=\"http://sinonjs.org/releases/v4.0.1/stubs/\" target=\"_blank\" rel=\"noopener\">stub</a> for <code>PaymentService</code> in its constructor.</p>\n<p>The only problem with this pattern is the fact that it creates an instance without you wanting to,\ntherefore you can create a separate <code>ServiceModel</code> file (ItemServiceModel.js) and instantiate (and export) it inside <code>ItemService.js</code>, and when you test you only need to play with <code>ItemServiceModel</code>, or you can have a <code>container.js</code> file that instantiates all services and exports them.</p>\n"},{"title":"Folder Structure","description":"Learn how to organize your GraphQL code","disqusPage":"Starterpack:Structure","_content":"\nIn this chapter we'll explore an opinionated way of organising our code. The milky way.\n\nAll of our source code lies in `./src` folder.\n\nWe have two folders `startup/client` and `startup/server` those are the places where we perform system level configurations for their respective environment, where you initialize maybe different packages and so on.\n\nSo, in there lies configuration, not implementation. For example, it would make sense in there, to initialize the GraphQL server with a certain config, but it would not make sense to add any Query or resolver logic.\n\nWe will introduce to following folders:\n\n- src/db - Here is where we define database schema and logic\n- src/api - Here is where we define our API implement any kind of logic and operations on the database\n- src/ui - Here lie all of our UI components\n\n## Entities\n\nOur GraphQL schema will exist in: `src/api` and it is composed of `entities` and `modules`. An entity is a type, but since type is such a generic word in JS world, we are going to refer to them as entities.\n\n```gql\n# entities/User.gql\ntype User {\n  _id: ID!\n  firstName: String\n  lastName: String\n  fullName: String\n}\n```\n\n```js\n// entites/User.resolvers.js\nexport default {\n  User: {\n    fullName: user => `${user.firstName} ${user.lastName}`,\n  },\n};\n```\n\nAnd the place where we aggregate them all:\n\n```js\n// entities/index.js\n\nimport UserType from './User.gql';\nimport UserResolvers from './User.resolvers.js';\nimport PostType from './Post.gql';\nimport PostResolvers from './Post.resolvers.js';\n\nexport default {\n  typeDefs: [UserType, PostType],\n  UserResolvers: [UserResolvers, PostResolvers],\n};\n```\n\n## GraphQL Modules\n\nWe regard as a GraphQL module an object that contains typeDefs and/or resolvers. Using the `graphql-load` package this allows us to work with these modules and allows us to think about them logically separated.\n\nIn our case inside `entities/index.js` what we export is a GraphQL Module.\n\nSo to aggregate and use that, we'll create our entry point for loading inside:\n\n```js\n// file: src/api/index.js\nimport { load } from 'graphql-load';\n\nimport EntitiesModule from './entities';\nimport UserModule from './modules/user';\nimport PostModule from './modules/post';\n\nload([EntitiesModule, UserModule, PostModule]);\n```\n\nA sample implementation of the `post` module inside `src/api/modules/post`:\n\n```\n# ./typeDefs.gql\ntype Query {\n  posts: [Post]\n}\n\ntype Mutation {\n  postCreate(title: String!): Post\n}\n```\n\n```js\n// ./resolvers.js\nexport default {\n  Query: {\n    posts: () => {\n      return Posts.find().fetch();\n    },\n  },\n  Mutation: {\n    postCreate: (_, args, context) => {\n      const title = args.title;\n      // Logic to create the Post and you have to return the Post\n    },\n  },\n};\n```\n\n```js\n// ./index.js\nimport typeDefs from './typeDefs.gql';\nimport resolvers from './resolvers';\n\nexport default {\n  typeDefs,\n  resolvers,\n};\n```\n\nAlternatively, for simplicity, you can also do something like this, without the need of `typeDefs.gql` or `resolvers.js`\n\n```js\n// src/api/modules/post/index.js\nexport default {\n  typeDefs: `\n    type Query {\n      posts: [Post]\n    }\n\n    type Mutation {\n      postCreate(title: String!): Post\n    }\n  `,\n  resolvers: {\n    Query: {\n      posts: (_, args, context) => {\n        return Posts.find().fetch();\n      },\n    },\n    Mutation: {\n      postCreate: (_, args, context) => {\n        const title = args.title;\n        // Logic to create the Post and you have to return the Post\n      },\n    },\n  },\n};\n```\n\nAnd ofcourse now what we have exported here is the `PostModule`.\n\n## Services\n\nYou should not store logic inside your `resolvers`, even if that is the place you're gonna store it and it makes a lot of sense!\n\nThere is a lot to talk about here, so we're only going to scratch the surface, but keep in mind that you want your mutations and queries to be easily testable, and you may not want to rely on the full GraphQL API to test them.\n\nProposal, decouple logic into services like this:\n\n```js\n// src/api/modules/post/services/PostService.js\n\nexport default class PostService {\n  static createPost(title) {\n    // ... logic here ...\n  }\n}\n```\n\n```js\n// src/api/modules/post/resolvers.js\nimport PostService from './services/PostService';\n\nexport default {\n  Mutation: {\n    createPost(_, args, context) {\n      PostService.createPost(args.title);\n    },\n  },\n};\n```\n\nThe objective of mutation resolver is not just to delegate, it acts as `Controller` (contains the flow control logic) so it can also perform security checks (eg: if the user is logged in) or consistency checks (if the data passed is aligned to what the service needs) and handle exceptions correctly.\n\n## Database\n\nThe database is not your API, you should treat them completely separated. However, in the beginning it's very likely that you would want to just prototype quickly without thinking too much about it.\n\nThis is why you can define the database collections inside the type:\n\n```js\ntype Post @mongo(name: \"posts\") {\n  _id: ID!\n  createdAt: Date\n  title: String\n}\n```\n\nAnd you can access `posts` collection from `context.db.posts` inside your resolvers. This is how you should prototype, below is how you should grow:\n\nWe recommend the following structure inside `src/db`:\n\n```js\n// src/db/posts/collection.js\nimport { Mongo } from 'meteor/mongo';\n\nconst Posts = new Mongo.Collection('posts');\n\nexport default Posts;\n```\n\nThe API for Mongo.Collection can be found here:\nhttps://docs.meteor.com/api/collections.html\n\nIf you want to enforce a schema:\nhttps://github.com/aldeed/meteor-collection2\n\n```js\n// src/db/posts/schema.js\nimport SimpleSchema from 'simpl-schema';\n\nexport default new SimpleSchema({\n  title: {\n    type: String,\n  },\n});\n```\n\n```js\n// src/db/posts/collection.js\nimport PostSchema from './schema';\n\n// ...\nPosts.attachSchema(PostSchema);\n```\n\n```js\n// src/db/posts/index.js\nimport Posts from './posts/collection';\n\nexport { Posts };\n```\n","source":"starterpack/structure.md","raw":"---\ntitle: Folder Structure\ndescription: 'Learn how to organize your GraphQL code'\ndisqusPage: 'Starterpack:Structure'\n---\n\nIn this chapter we'll explore an opinionated way of organising our code. The milky way.\n\nAll of our source code lies in `./src` folder.\n\nWe have two folders `startup/client` and `startup/server` those are the places where we perform system level configurations for their respective environment, where you initialize maybe different packages and so on.\n\nSo, in there lies configuration, not implementation. For example, it would make sense in there, to initialize the GraphQL server with a certain config, but it would not make sense to add any Query or resolver logic.\n\nWe will introduce to following folders:\n\n- src/db - Here is where we define database schema and logic\n- src/api - Here is where we define our API implement any kind of logic and operations on the database\n- src/ui - Here lie all of our UI components\n\n## Entities\n\nOur GraphQL schema will exist in: `src/api` and it is composed of `entities` and `modules`. An entity is a type, but since type is such a generic word in JS world, we are going to refer to them as entities.\n\n```gql\n# entities/User.gql\ntype User {\n  _id: ID!\n  firstName: String\n  lastName: String\n  fullName: String\n}\n```\n\n```js\n// entites/User.resolvers.js\nexport default {\n  User: {\n    fullName: user => `${user.firstName} ${user.lastName}`,\n  },\n};\n```\n\nAnd the place where we aggregate them all:\n\n```js\n// entities/index.js\n\nimport UserType from './User.gql';\nimport UserResolvers from './User.resolvers.js';\nimport PostType from './Post.gql';\nimport PostResolvers from './Post.resolvers.js';\n\nexport default {\n  typeDefs: [UserType, PostType],\n  UserResolvers: [UserResolvers, PostResolvers],\n};\n```\n\n## GraphQL Modules\n\nWe regard as a GraphQL module an object that contains typeDefs and/or resolvers. Using the `graphql-load` package this allows us to work with these modules and allows us to think about them logically separated.\n\nIn our case inside `entities/index.js` what we export is a GraphQL Module.\n\nSo to aggregate and use that, we'll create our entry point for loading inside:\n\n```js\n// file: src/api/index.js\nimport { load } from 'graphql-load';\n\nimport EntitiesModule from './entities';\nimport UserModule from './modules/user';\nimport PostModule from './modules/post';\n\nload([EntitiesModule, UserModule, PostModule]);\n```\n\nA sample implementation of the `post` module inside `src/api/modules/post`:\n\n```\n# ./typeDefs.gql\ntype Query {\n  posts: [Post]\n}\n\ntype Mutation {\n  postCreate(title: String!): Post\n}\n```\n\n```js\n// ./resolvers.js\nexport default {\n  Query: {\n    posts: () => {\n      return Posts.find().fetch();\n    },\n  },\n  Mutation: {\n    postCreate: (_, args, context) => {\n      const title = args.title;\n      // Logic to create the Post and you have to return the Post\n    },\n  },\n};\n```\n\n```js\n// ./index.js\nimport typeDefs from './typeDefs.gql';\nimport resolvers from './resolvers';\n\nexport default {\n  typeDefs,\n  resolvers,\n};\n```\n\nAlternatively, for simplicity, you can also do something like this, without the need of `typeDefs.gql` or `resolvers.js`\n\n```js\n// src/api/modules/post/index.js\nexport default {\n  typeDefs: `\n    type Query {\n      posts: [Post]\n    }\n\n    type Mutation {\n      postCreate(title: String!): Post\n    }\n  `,\n  resolvers: {\n    Query: {\n      posts: (_, args, context) => {\n        return Posts.find().fetch();\n      },\n    },\n    Mutation: {\n      postCreate: (_, args, context) => {\n        const title = args.title;\n        // Logic to create the Post and you have to return the Post\n      },\n    },\n  },\n};\n```\n\nAnd ofcourse now what we have exported here is the `PostModule`.\n\n## Services\n\nYou should not store logic inside your `resolvers`, even if that is the place you're gonna store it and it makes a lot of sense!\n\nThere is a lot to talk about here, so we're only going to scratch the surface, but keep in mind that you want your mutations and queries to be easily testable, and you may not want to rely on the full GraphQL API to test them.\n\nProposal, decouple logic into services like this:\n\n```js\n// src/api/modules/post/services/PostService.js\n\nexport default class PostService {\n  static createPost(title) {\n    // ... logic here ...\n  }\n}\n```\n\n```js\n// src/api/modules/post/resolvers.js\nimport PostService from './services/PostService';\n\nexport default {\n  Mutation: {\n    createPost(_, args, context) {\n      PostService.createPost(args.title);\n    },\n  },\n};\n```\n\nThe objective of mutation resolver is not just to delegate, it acts as `Controller` (contains the flow control logic) so it can also perform security checks (eg: if the user is logged in) or consistency checks (if the data passed is aligned to what the service needs) and handle exceptions correctly.\n\n## Database\n\nThe database is not your API, you should treat them completely separated. However, in the beginning it's very likely that you would want to just prototype quickly without thinking too much about it.\n\nThis is why you can define the database collections inside the type:\n\n```js\ntype Post @mongo(name: \"posts\") {\n  _id: ID!\n  createdAt: Date\n  title: String\n}\n```\n\nAnd you can access `posts` collection from `context.db.posts` inside your resolvers. This is how you should prototype, below is how you should grow:\n\nWe recommend the following structure inside `src/db`:\n\n```js\n// src/db/posts/collection.js\nimport { Mongo } from 'meteor/mongo';\n\nconst Posts = new Mongo.Collection('posts');\n\nexport default Posts;\n```\n\nThe API for Mongo.Collection can be found here:\nhttps://docs.meteor.com/api/collections.html\n\nIf you want to enforce a schema:\nhttps://github.com/aldeed/meteor-collection2\n\n```js\n// src/db/posts/schema.js\nimport SimpleSchema from 'simpl-schema';\n\nexport default new SimpleSchema({\n  title: {\n    type: String,\n  },\n});\n```\n\n```js\n// src/db/posts/collection.js\nimport PostSchema from './schema';\n\n// ...\nPosts.attachSchema(PostSchema);\n```\n\n```js\n// src/db/posts/index.js\nimport Posts from './posts/collection';\n\nexport { Posts };\n```\n","date":"2018-08-31T12:51:19.871Z","updated":"2018-08-31T12:51:19.871Z","path":"starterpack/structure.html","comments":1,"layout":"page","_id":"cjqqmfrhm000fs9a4c4k8br86","content":"<p>In this chapter we’ll explore an opinionated way of organising our code. The milky way.</p>\n<p>All of our source code lies in <code>./src</code> folder.</p>\n<p>We have two folders <code>startup/client</code> and <code>startup/server</code> those are the places where we perform system level configurations for their respective environment, where you initialize maybe different packages and so on.</p>\n<p>So, in there lies configuration, not implementation. For example, it would make sense in there, to initialize the GraphQL server with a certain config, but it would not make sense to add any Query or resolver logic.</p>\n<p>We will introduce to following folders:</p>\n<ul>\n<li>src/db - Here is where we define database schema and logic</li>\n<li>src/api - Here is where we define our API implement any kind of logic and operations on the database</li>\n<li>src/ui - Here lie all of our UI components</li>\n</ul>\n<h2 id=\"Entities\"><a href=\"#Entities\" class=\"headerlink\" title=\"Entities\"></a>Entities</h2><p>Our GraphQL schema will exist in: <code>src/api</code> and it is composed of <code>entities</code> and <code>modules</code>. An entity is a type, but since type is such a generic word in JS world, we are going to refer to them as entities.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># entities/User.gql</span><br><span class=\"line\">type User &#123;</span><br><span class=\"line\">  _id: ID!</span><br><span class=\"line\">  firstName: String</span><br><span class=\"line\">  lastName: String</span><br><span class=\"line\">  fullName: String</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entites/User.resolvers.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  User: &#123;</span><br><span class=\"line\">    fullName: <span class=\"function\"><span class=\"params\">user</span> =&gt;</span> <span class=\"string\">`<span class=\"subst\">$&#123;user.firstName&#125;</span> <span class=\"subst\">$&#123;user.lastName&#125;</span>`</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>And the place where we aggregate them all:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entities/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UserType <span class=\"keyword\">from</span> <span class=\"string\">'./User.gql'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UserResolvers <span class=\"keyword\">from</span> <span class=\"string\">'./User.resolvers.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PostType <span class=\"keyword\">from</span> <span class=\"string\">'./Post.gql'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PostResolvers <span class=\"keyword\">from</span> <span class=\"string\">'./Post.resolvers.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: [UserType, PostType],</span><br><span class=\"line\">  UserResolvers: [UserResolvers, PostResolvers],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"GraphQL-Modules\"><a href=\"#GraphQL-Modules\" class=\"headerlink\" title=\"GraphQL Modules\"></a>GraphQL Modules</h2><p>We regard as a GraphQL module an object that contains typeDefs and/or resolvers. Using the <code>graphql-load</code> package this allows us to work with these modules and allows us to think about them logically separated.</p>\n<p>In our case inside <code>entities/index.js</code> what we export is a GraphQL Module.</p>\n<p>So to aggregate and use that, we’ll create our entry point for loading inside:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: src/api/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; load &#125; <span class=\"keyword\">from</span> <span class=\"string\">'graphql-load'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> EntitiesModule <span class=\"keyword\">from</span> <span class=\"string\">'./entities'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UserModule <span class=\"keyword\">from</span> <span class=\"string\">'./modules/user'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PostModule <span class=\"keyword\">from</span> <span class=\"string\">'./modules/post'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">load([EntitiesModule, UserModule, PostModule]);</span><br></pre></td></tr></table></figure>\n<p>A sample implementation of the <code>post</code> module inside <code>src/api/modules/post</code>:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ./typeDefs.gql</span></span><br><span class=\"line\">type Query &#123;</span><br><span class=\"line\">  posts: [Post]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Mutation &#123;</span><br><span class=\"line\">  postCreate(title: String!): Post</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./resolvers.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  Query: &#123;</span><br><span class=\"line\">    posts: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Posts.find().fetch();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Mutation: &#123;</span><br><span class=\"line\">    postCreate: <span class=\"function\">(<span class=\"params\">_, args, context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> title = args.title;</span><br><span class=\"line\">      <span class=\"comment\">// Logic to create the Post and you have to return the Post</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> typeDefs <span class=\"keyword\">from</span> <span class=\"string\">'./typeDefs.gql'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> resolvers <span class=\"keyword\">from</span> <span class=\"string\">'./resolvers'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs,</span><br><span class=\"line\">  resolvers,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Alternatively, for simplicity, you can also do something like this, without the need of <code>typeDefs.gql</code> or <code>resolvers.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/post/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">      posts: [Post]</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    type Mutation &#123;</span></span><br><span class=\"line\"><span class=\"string\">      postCreate(title: String!): Post</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">      posts: <span class=\"function\">(<span class=\"params\">_, args, context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Posts.find().fetch();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Mutation: &#123;</span><br><span class=\"line\">      postCreate: <span class=\"function\">(<span class=\"params\">_, args, context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> title = args.title;</span><br><span class=\"line\">        <span class=\"comment\">// Logic to create the Post and you have to return the Post</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>And ofcourse now what we have exported here is the <code>PostModule</code>.</p>\n<h2 id=\"Services\"><a href=\"#Services\" class=\"headerlink\" title=\"Services\"></a>Services</h2><p>You should not store logic inside your <code>resolvers</code>, even if that is the place you’re gonna store it and it makes a lot of sense!</p>\n<p>There is a lot to talk about here, so we’re only going to scratch the surface, but keep in mind that you want your mutations and queries to be easily testable, and you may not want to rely on the full GraphQL API to test them.</p>\n<p>Proposal, decouple logic into services like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/post/services/PostService.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> createPost(title) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ... logic here ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/post/resolvers.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> PostService <span class=\"keyword\">from</span> <span class=\"string\">'./services/PostService'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  Mutation: &#123;</span><br><span class=\"line\">    createPost(_, args, context) &#123;</span><br><span class=\"line\">      PostService.createPost(args.title);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>The objective of mutation resolver is not just to delegate, it acts as <code>Controller</code> (contains the flow control logic) so it can also perform security checks (eg: if the user is logged in) or consistency checks (if the data passed is aligned to what the service needs) and handle exceptions correctly.</p>\n<h2 id=\"Database\"><a href=\"#Database\" class=\"headerlink\" title=\"Database\"></a>Database</h2><p>The database is not your API, you should treat them completely separated. However, in the beginning it’s very likely that you would want to just prototype quickly without thinking too much about it.</p>\n<p>This is why you can define the database collections inside the type:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Post @mongo(name: <span class=\"string\">\"posts\"</span>) &#123;</span><br><span class=\"line\">  _id: ID!</span><br><span class=\"line\">  createdAt: <span class=\"built_in\">Date</span></span><br><span class=\"line\">  title: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And you can access <code>posts</code> collection from <code>context.db.posts</code> inside your resolvers. This is how you should prototype, below is how you should grow:</p>\n<p>We recommend the following structure inside <code>src/db</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/posts/collection.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Mongo &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/mongo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Posts = <span class=\"keyword\">new</span> Mongo.Collection(<span class=\"string\">'posts'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Posts;</span><br></pre></td></tr></table></figure>\n<p>The API for Mongo.Collection can be found here:\n<a href=\"https://docs.meteor.com/api/collections.html\" target=\"_blank\" rel=\"noopener\">https://docs.meteor.com/api/collections.html</a></p>\n<p>If you want to enforce a schema:\n<a href=\"https://github.com/aldeed/meteor-collection2\" target=\"_blank\" rel=\"noopener\">https://github.com/aldeed/meteor-collection2</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/posts/schema.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleSchema <span class=\"keyword\">from</span> <span class=\"string\">'simpl-schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> SimpleSchema(&#123;</span><br><span class=\"line\">  title: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/posts/collection.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> PostSchema <span class=\"keyword\">from</span> <span class=\"string\">'./schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">Posts.attachSchema(PostSchema);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/posts/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Posts <span class=\"keyword\">from</span> <span class=\"string\">'./posts/collection'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; Posts &#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>In this chapter we’ll explore an opinionated way of organising our code. The milky way.</p>\n<p>All of our source code lies in <code>./src</code> folder.</p>\n<p>We have two folders <code>startup/client</code> and <code>startup/server</code> those are the places where we perform system level configurations for their respective environment, where you initialize maybe different packages and so on.</p>\n<p>So, in there lies configuration, not implementation. For example, it would make sense in there, to initialize the GraphQL server with a certain config, but it would not make sense to add any Query or resolver logic.</p>\n<p>We will introduce to following folders:</p>\n<ul>\n<li>src/db - Here is where we define database schema and logic</li>\n<li>src/api - Here is where we define our API implement any kind of logic and operations on the database</li>\n<li>src/ui - Here lie all of our UI components</li>\n</ul>\n<h2 id=\"Entities\"><a href=\"#Entities\" class=\"headerlink\" title=\"Entities\"></a>Entities</h2><p>Our GraphQL schema will exist in: <code>src/api</code> and it is composed of <code>entities</code> and <code>modules</code>. An entity is a type, but since type is such a generic word in JS world, we are going to refer to them as entities.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># entities/User.gql</span><br><span class=\"line\">type User &#123;</span><br><span class=\"line\">  _id: ID!</span><br><span class=\"line\">  firstName: String</span><br><span class=\"line\">  lastName: String</span><br><span class=\"line\">  fullName: String</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entites/User.resolvers.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  User: &#123;</span><br><span class=\"line\">    fullName: <span class=\"function\"><span class=\"params\">user</span> =&gt;</span> <span class=\"string\">`<span class=\"subst\">$&#123;user.firstName&#125;</span> <span class=\"subst\">$&#123;user.lastName&#125;</span>`</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>And the place where we aggregate them all:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entities/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UserType <span class=\"keyword\">from</span> <span class=\"string\">'./User.gql'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UserResolvers <span class=\"keyword\">from</span> <span class=\"string\">'./User.resolvers.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PostType <span class=\"keyword\">from</span> <span class=\"string\">'./Post.gql'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PostResolvers <span class=\"keyword\">from</span> <span class=\"string\">'./Post.resolvers.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: [UserType, PostType],</span><br><span class=\"line\">  UserResolvers: [UserResolvers, PostResolvers],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"GraphQL-Modules\"><a href=\"#GraphQL-Modules\" class=\"headerlink\" title=\"GraphQL Modules\"></a>GraphQL Modules</h2><p>We regard as a GraphQL module an object that contains typeDefs and/or resolvers. Using the <code>graphql-load</code> package this allows us to work with these modules and allows us to think about them logically separated.</p>\n<p>In our case inside <code>entities/index.js</code> what we export is a GraphQL Module.</p>\n<p>So to aggregate and use that, we’ll create our entry point for loading inside:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: src/api/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; load &#125; <span class=\"keyword\">from</span> <span class=\"string\">'graphql-load'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> EntitiesModule <span class=\"keyword\">from</span> <span class=\"string\">'./entities'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UserModule <span class=\"keyword\">from</span> <span class=\"string\">'./modules/user'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PostModule <span class=\"keyword\">from</span> <span class=\"string\">'./modules/post'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">load([EntitiesModule, UserModule, PostModule]);</span><br></pre></td></tr></table></figure>\n<p>A sample implementation of the <code>post</code> module inside <code>src/api/modules/post</code>:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ./typeDefs.gql</span></span><br><span class=\"line\">type Query &#123;</span><br><span class=\"line\">  posts: [Post]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Mutation &#123;</span><br><span class=\"line\">  postCreate(title: String!): Post</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./resolvers.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  Query: &#123;</span><br><span class=\"line\">    posts: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Posts.find().fetch();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Mutation: &#123;</span><br><span class=\"line\">    postCreate: <span class=\"function\">(<span class=\"params\">_, args, context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> title = args.title;</span><br><span class=\"line\">      <span class=\"comment\">// Logic to create the Post and you have to return the Post</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> typeDefs <span class=\"keyword\">from</span> <span class=\"string\">'./typeDefs.gql'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> resolvers <span class=\"keyword\">from</span> <span class=\"string\">'./resolvers'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs,</span><br><span class=\"line\">  resolvers,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Alternatively, for simplicity, you can also do something like this, without the need of <code>typeDefs.gql</code> or <code>resolvers.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/post/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  typeDefs: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">      posts: [Post]</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    type Mutation &#123;</span></span><br><span class=\"line\"><span class=\"string\">      postCreate(title: String!): Post</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  resolvers: &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">      posts: <span class=\"function\">(<span class=\"params\">_, args, context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Posts.find().fetch();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Mutation: &#123;</span><br><span class=\"line\">      postCreate: <span class=\"function\">(<span class=\"params\">_, args, context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> title = args.title;</span><br><span class=\"line\">        <span class=\"comment\">// Logic to create the Post and you have to return the Post</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>And ofcourse now what we have exported here is the <code>PostModule</code>.</p>\n<h2 id=\"Services\"><a href=\"#Services\" class=\"headerlink\" title=\"Services\"></a>Services</h2><p>You should not store logic inside your <code>resolvers</code>, even if that is the place you’re gonna store it and it makes a lot of sense!</p>\n<p>There is a lot to talk about here, so we’re only going to scratch the surface, but keep in mind that you want your mutations and queries to be easily testable, and you may not want to rely on the full GraphQL API to test them.</p>\n<p>Proposal, decouple logic into services like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/post/services/PostService.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> createPost(title) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ... logic here ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/post/resolvers.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> PostService <span class=\"keyword\">from</span> <span class=\"string\">'./services/PostService'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  Mutation: &#123;</span><br><span class=\"line\">    createPost(_, args, context) &#123;</span><br><span class=\"line\">      PostService.createPost(args.title);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>The objective of mutation resolver is not just to delegate, it acts as <code>Controller</code> (contains the flow control logic) so it can also perform security checks (eg: if the user is logged in) or consistency checks (if the data passed is aligned to what the service needs) and handle exceptions correctly.</p>\n<h2 id=\"Database\"><a href=\"#Database\" class=\"headerlink\" title=\"Database\"></a>Database</h2><p>The database is not your API, you should treat them completely separated. However, in the beginning it’s very likely that you would want to just prototype quickly without thinking too much about it.</p>\n<p>This is why you can define the database collections inside the type:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Post @mongo(name: <span class=\"string\">\"posts\"</span>) &#123;</span><br><span class=\"line\">  _id: ID!</span><br><span class=\"line\">  createdAt: <span class=\"built_in\">Date</span></span><br><span class=\"line\">  title: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And you can access <code>posts</code> collection from <code>context.db.posts</code> inside your resolvers. This is how you should prototype, below is how you should grow:</p>\n<p>We recommend the following structure inside <code>src/db</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/posts/collection.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Mongo &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/mongo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Posts = <span class=\"keyword\">new</span> Mongo.Collection(<span class=\"string\">'posts'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Posts;</span><br></pre></td></tr></table></figure>\n<p>The API for Mongo.Collection can be found here:\n<a href=\"https://docs.meteor.com/api/collections.html\" target=\"_blank\" rel=\"noopener\">https://docs.meteor.com/api/collections.html</a></p>\n<p>If you want to enforce a schema:\n<a href=\"https://github.com/aldeed/meteor-collection2\" target=\"_blank\" rel=\"noopener\">https://github.com/aldeed/meteor-collection2</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/posts/schema.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleSchema <span class=\"keyword\">from</span> <span class=\"string\">'simpl-schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> SimpleSchema(&#123;</span><br><span class=\"line\">  title: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/posts/collection.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> PostSchema <span class=\"keyword\">from</span> <span class=\"string\">'./schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">Posts.attachSchema(PostSchema);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/db/posts/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Posts <span class=\"keyword\">from</span> <span class=\"string\">'./posts/collection'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; Posts &#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"Testing","description":"Testing server-side logic","disqusPage":"Starterpack:Testing","_content":"\n# Testing\n\nTesting your app is not something `extra`, it's not something that should be done, it's something that must be done.\n\nIn the prototyping phase you may be inclined to skip this part, and that may be ok, but as a principles, writing tests can help you code faster, therefore prototype faster, and if you use the principles stated before separating logic in services, it can make testing a breeze.\n\nMake sure your package.json looks like this:\n\n```\n  \"meteor\": {\n    \"mainModule\": {\n      \"client\": \"src/startup/client/index.js\",\n      \"server\": \"src/startup/server/index.js\"\n    },\n    \"testModule\": {\n      \"client\": \"src/__tests__/client.js\",\n      \"server\": \"src/__tests__/server.js\"\n    }\n  },\n```\n\nInside client.js and respectively server.js you are going to import the tests. You will not write any tests in there.\n\nThere is another alternative, to completely remove `testModule` and all files `*.test.js` are going to be eagerly loaded. However we strongly recommend the `testModule` approach:\n\nAdd the following to your `package.json` file:\n\n```\n\"scripts\": {\n  \"test\": \"meteor test --driver-package decaffed:mocha --port 3050\",\n  \"test-console\": \"TEST_WATCH=1 meteor test --driver-package meteortesting:mocha --port 3050\",\n  \"test-chrome\": \"TEST_WATCH=1 TEST_BROWSER_DRIVER=chrome meteor test --driver-package meteortesting:mocha --port 3050\",\n  \"test-chrome-watch\": \"TEST_WATCH=1 TEST_BROWSER_DRIVER=chrome meteor test --once --driver-package meteortesting:mocha --port 3050\"\n}\n```\n\nNote that if you want to run tests with `chromedriver` (meaning you want the browser test results in your console) you'll have to install the npm package. However this will come with a performance expense to your rebuilds, and it's not recommended for development mode. However it's a must for your CI, this is why when you're running your test for CI before run a `meteor npm i -S chromedriver`\n\nLet's write a service and a test:\n\n```\nmeteor npm i --save-dev chai\nmeteor npm test\n```\n\n```js\n// src/api/modules/item/services/ItemService.js\nexport default class ItemService {\n  constructor({ db }) {\n    this.db = db;\n  }\n\n  insertItem(name) {\n    return this.db.items.insert({\n      name,\n    });\n  }\n}\n```\n\n```js\n// src/api/modules/item/services/ItemService.test.js\nimport ItemServiceModel from './ItemServiceModel';\nimport { assert } from 'chai';\n\ndescribe('ItemServiceModel', function() {\n  it('should be able to create an item', function() {\n    const service = new ItemServiceModel({\n      db: {\n        items: {\n          insert: () => 'ok',\n        },\n      },\n    });\n\n    const response = service.insertItem('Johnas');\n\n    assert.equal(response, 'ok');\n  });\n});\n```\n\n```js\n// src/__tests__/server.js\nimport '../api/modules/item/services/ItemService.test';\n```\n\nNow open your browser http://localhost:3050 and you'll have a nice interface to see your tests, and you can click on any individual test or group of tests to run them in isolation. (This is good when you have a large-suite and just one failing test)\n\nIt's strongly recommended that you give this a read: https://guide.meteor.com/testing.html, it will give you a better understanding how to test the full app or just some unit-tests, and also hints to some great utility belts:\n\n- Resetting the database: https://atmospherejs.com/xolvio/cleaner\n- Mocking the database: https://atmospherejs.com/hwillson/stub-collections\n- Generate fake data: https://atmospherejs.com/dburles/factory\n\n## Testing the GraphQL server\n\nWhat if we want to test the GraphQL server, but on the server-side ?\n\n```js\nimport { intialize } from 'meteor/cultofcoders:apollo';\nimport { SchemaLink } from 'apollo-link-schema';\n\nconst { server } = initialize({});\n\nfunction getClient(context = {}) {\n  const link = new SchemaLink({\n    schema: server.schema,\n    context,\n  });\n\n  const client = new ApolloClient({\n    link,\n    cache: new InMemoryCache(),\n  });\n}\n```\n\nNow feel free to test your schema using as `client` the client from `getClient()` function.\n","source":"starterpack/testing.md","raw":"---\ntitle: 'Testing'\ndescription: Testing server-side logic\ndisqusPage: 'Starterpack:Testing'\n---\n\n# Testing\n\nTesting your app is not something `extra`, it's not something that should be done, it's something that must be done.\n\nIn the prototyping phase you may be inclined to skip this part, and that may be ok, but as a principles, writing tests can help you code faster, therefore prototype faster, and if you use the principles stated before separating logic in services, it can make testing a breeze.\n\nMake sure your package.json looks like this:\n\n```\n  \"meteor\": {\n    \"mainModule\": {\n      \"client\": \"src/startup/client/index.js\",\n      \"server\": \"src/startup/server/index.js\"\n    },\n    \"testModule\": {\n      \"client\": \"src/__tests__/client.js\",\n      \"server\": \"src/__tests__/server.js\"\n    }\n  },\n```\n\nInside client.js and respectively server.js you are going to import the tests. You will not write any tests in there.\n\nThere is another alternative, to completely remove `testModule` and all files `*.test.js` are going to be eagerly loaded. However we strongly recommend the `testModule` approach:\n\nAdd the following to your `package.json` file:\n\n```\n\"scripts\": {\n  \"test\": \"meteor test --driver-package decaffed:mocha --port 3050\",\n  \"test-console\": \"TEST_WATCH=1 meteor test --driver-package meteortesting:mocha --port 3050\",\n  \"test-chrome\": \"TEST_WATCH=1 TEST_BROWSER_DRIVER=chrome meteor test --driver-package meteortesting:mocha --port 3050\",\n  \"test-chrome-watch\": \"TEST_WATCH=1 TEST_BROWSER_DRIVER=chrome meteor test --once --driver-package meteortesting:mocha --port 3050\"\n}\n```\n\nNote that if you want to run tests with `chromedriver` (meaning you want the browser test results in your console) you'll have to install the npm package. However this will come with a performance expense to your rebuilds, and it's not recommended for development mode. However it's a must for your CI, this is why when you're running your test for CI before run a `meteor npm i -S chromedriver`\n\nLet's write a service and a test:\n\n```\nmeteor npm i --save-dev chai\nmeteor npm test\n```\n\n```js\n// src/api/modules/item/services/ItemService.js\nexport default class ItemService {\n  constructor({ db }) {\n    this.db = db;\n  }\n\n  insertItem(name) {\n    return this.db.items.insert({\n      name,\n    });\n  }\n}\n```\n\n```js\n// src/api/modules/item/services/ItemService.test.js\nimport ItemServiceModel from './ItemServiceModel';\nimport { assert } from 'chai';\n\ndescribe('ItemServiceModel', function() {\n  it('should be able to create an item', function() {\n    const service = new ItemServiceModel({\n      db: {\n        items: {\n          insert: () => 'ok',\n        },\n      },\n    });\n\n    const response = service.insertItem('Johnas');\n\n    assert.equal(response, 'ok');\n  });\n});\n```\n\n```js\n// src/__tests__/server.js\nimport '../api/modules/item/services/ItemService.test';\n```\n\nNow open your browser http://localhost:3050 and you'll have a nice interface to see your tests, and you can click on any individual test or group of tests to run them in isolation. (This is good when you have a large-suite and just one failing test)\n\nIt's strongly recommended that you give this a read: https://guide.meteor.com/testing.html, it will give you a better understanding how to test the full app or just some unit-tests, and also hints to some great utility belts:\n\n- Resetting the database: https://atmospherejs.com/xolvio/cleaner\n- Mocking the database: https://atmospherejs.com/hwillson/stub-collections\n- Generate fake data: https://atmospherejs.com/dburles/factory\n\n## Testing the GraphQL server\n\nWhat if we want to test the GraphQL server, but on the server-side ?\n\n```js\nimport { intialize } from 'meteor/cultofcoders:apollo';\nimport { SchemaLink } from 'apollo-link-schema';\n\nconst { server } = initialize({});\n\nfunction getClient(context = {}) {\n  const link = new SchemaLink({\n    schema: server.schema,\n    context,\n  });\n\n  const client = new ApolloClient({\n    link,\n    cache: new InMemoryCache(),\n  });\n}\n```\n\nNow feel free to test your schema using as `client` the client from `getClient()` function.\n","date":"2018-08-31T12:51:19.871Z","updated":"2018-08-31T12:51:19.871Z","path":"starterpack/testing.html","comments":1,"layout":"page","_id":"cjqqmfrhn000gs9a4rv3xtyqv","content":"<h1 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h1><p>Testing your app is not something <code>extra</code>, it’s not something that should be done, it’s something that must be done.</p>\n<p>In the prototyping phase you may be inclined to skip this part, and that may be ok, but as a principles, writing tests can help you code faster, therefore prototype faster, and if you use the principles stated before separating logic in services, it can make testing a breeze.</p>\n<p>Make sure your package.json looks like this:</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"meteor\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"mainModule\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"client\"</span>: <span class=\"string\">\"src/startup/client/index.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>: <span class=\"string\">\"src/startup/server/index.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"testModule\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"client\"</span>: <span class=\"string\">\"src/__tests__/client.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>: <span class=\"string\">\"src/__tests__/server.js\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>Inside client.js and respectively server.js you are going to import the tests. You will not write any tests in there.</p>\n<p>There is another alternative, to completely remove <code>testModule</code> and all files <code>*.test.js</code> are going to be eagerly loaded. However we strongly recommend the <code>testModule</code> approach:</p>\n<p>Add the following to your <code>package.json</code> file:</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"test\"</span>: <span class=\"string\">\"meteor test --driver-package decaffed:mocha --port 3050\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"test-console\"</span>: <span class=\"string\">\"TEST_WATCH=1 meteor test --driver-package meteortesting:mocha --port 3050\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"test-chrome\"</span>: <span class=\"string\">\"TEST_WATCH=1 TEST_BROWSER_DRIVER=chrome meteor test --driver-package meteortesting:mocha --port 3050\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"test-chrome-watch\"</span>: <span class=\"string\">\"TEST_WATCH=1 TEST_BROWSER_DRIVER=chrome meteor test --once --driver-package meteortesting:mocha --port 3050\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Note that if you want to run tests with <code>chromedriver</code> (meaning you want the browser test results in your console) you’ll have to install the npm package. However this will come with a performance expense to your rebuilds, and it’s not recommended for development mode. However it’s a must for your CI, this is why when you’re running your test for CI before run a <code>meteor npm i -S chromedriver</code></p>\n<p>Let’s write a service and a test:</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor <span class=\"built_in\">npm</span> i --save-dev chai</span><br><span class=\"line\">meteor <span class=\"built_in\">npm</span> test</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/item/services/ItemService.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123; db &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.db = db;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  insertItem(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.db.items.insert(&#123;</span><br><span class=\"line\">      name,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/item/services/ItemService.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ItemServiceModel <span class=\"keyword\">from</span> <span class=\"string\">'./ItemServiceModel'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; assert &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'ItemServiceModel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should be able to create an item'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> service = <span class=\"keyword\">new</span> ItemServiceModel(&#123;</span><br><span class=\"line\">      db: &#123;</span><br><span class=\"line\">        items: &#123;</span><br><span class=\"line\">          insert: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">'ok'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = service.insertItem(<span class=\"string\">'Johnas'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    assert.equal(response, <span class=\"string\">'ok'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/__tests__/server.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../api/modules/item/services/ItemService.test'</span>;</span><br></pre></td></tr></table></figure>\n<p>Now open your browser <a href=\"http://localhost:3050\" target=\"_blank\" rel=\"noopener\">http://localhost:3050</a> and you’ll have a nice interface to see your tests, and you can click on any individual test or group of tests to run them in isolation. (This is good when you have a large-suite and just one failing test)</p>\n<p>It’s strongly recommended that you give this a read: <a href=\"https://guide.meteor.com/testing.html\" target=\"_blank\" rel=\"noopener\">https://guide.meteor.com/testing.html</a>, it will give you a better understanding how to test the full app or just some unit-tests, and also hints to some great utility belts:</p>\n<ul>\n<li>Resetting the database: <a href=\"https://atmospherejs.com/xolvio/cleaner\" target=\"_blank\" rel=\"noopener\">https://atmospherejs.com/xolvio/cleaner</a></li>\n<li>Mocking the database: <a href=\"https://atmospherejs.com/hwillson/stub-collections\" target=\"_blank\" rel=\"noopener\">https://atmospherejs.com/hwillson/stub-collections</a></li>\n<li>Generate fake data: <a href=\"https://atmospherejs.com/dburles/factory\" target=\"_blank\" rel=\"noopener\">https://atmospherejs.com/dburles/factory</a></li>\n</ul>\n<h2 id=\"Testing-the-GraphQL-server\"><a href=\"#Testing-the-GraphQL-server\" class=\"headerlink\" title=\"Testing the GraphQL server\"></a>Testing the GraphQL server</h2><p>What if we want to test the GraphQL server, but on the server-side ?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; intialize &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SchemaLink &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-link-schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; server &#125; = initialize(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClient</span>(<span class=\"params\">context = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> link = <span class=\"keyword\">new</span> SchemaLink(&#123;</span><br><span class=\"line\">    schema: server.schema,</span><br><span class=\"line\">    context,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> ApolloClient(&#123;</span><br><span class=\"line\">    link,</span><br><span class=\"line\">    cache: <span class=\"keyword\">new</span> InMemoryCache(),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now feel free to test your schema using as <code>client</code> the client from <code>getClient()</code> function.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h1><p>Testing your app is not something <code>extra</code>, it’s not something that should be done, it’s something that must be done.</p>\n<p>In the prototyping phase you may be inclined to skip this part, and that may be ok, but as a principles, writing tests can help you code faster, therefore prototype faster, and if you use the principles stated before separating logic in services, it can make testing a breeze.</p>\n<p>Make sure your package.json looks like this:</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"meteor\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"mainModule\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"client\"</span>: <span class=\"string\">\"src/startup/client/index.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>: <span class=\"string\">\"src/startup/server/index.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"testModule\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"client\"</span>: <span class=\"string\">\"src/__tests__/client.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>: <span class=\"string\">\"src/__tests__/server.js\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>Inside client.js and respectively server.js you are going to import the tests. You will not write any tests in there.</p>\n<p>There is another alternative, to completely remove <code>testModule</code> and all files <code>*.test.js</code> are going to be eagerly loaded. However we strongly recommend the <code>testModule</code> approach:</p>\n<p>Add the following to your <code>package.json</code> file:</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"test\"</span>: <span class=\"string\">\"meteor test --driver-package decaffed:mocha --port 3050\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"test-console\"</span>: <span class=\"string\">\"TEST_WATCH=1 meteor test --driver-package meteortesting:mocha --port 3050\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"test-chrome\"</span>: <span class=\"string\">\"TEST_WATCH=1 TEST_BROWSER_DRIVER=chrome meteor test --driver-package meteortesting:mocha --port 3050\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"test-chrome-watch\"</span>: <span class=\"string\">\"TEST_WATCH=1 TEST_BROWSER_DRIVER=chrome meteor test --once --driver-package meteortesting:mocha --port 3050\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Note that if you want to run tests with <code>chromedriver</code> (meaning you want the browser test results in your console) you’ll have to install the npm package. However this will come with a performance expense to your rebuilds, and it’s not recommended for development mode. However it’s a must for your CI, this is why when you’re running your test for CI before run a <code>meteor npm i -S chromedriver</code></p>\n<p>Let’s write a service and a test:</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor <span class=\"built_in\">npm</span> i --save-dev chai</span><br><span class=\"line\">meteor <span class=\"built_in\">npm</span> test</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/item/services/ItemService.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123; db &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.db = db;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  insertItem(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.db.items.insert(&#123;</span><br><span class=\"line\">      name,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/modules/item/services/ItemService.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ItemServiceModel <span class=\"keyword\">from</span> <span class=\"string\">'./ItemServiceModel'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; assert &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'ItemServiceModel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should be able to create an item'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> service = <span class=\"keyword\">new</span> ItemServiceModel(&#123;</span><br><span class=\"line\">      db: &#123;</span><br><span class=\"line\">        items: &#123;</span><br><span class=\"line\">          insert: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">'ok'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = service.insertItem(<span class=\"string\">'Johnas'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    assert.equal(response, <span class=\"string\">'ok'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/__tests__/server.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../api/modules/item/services/ItemService.test'</span>;</span><br></pre></td></tr></table></figure>\n<p>Now open your browser <a href=\"http://localhost:3050\" target=\"_blank\" rel=\"noopener\">http://localhost:3050</a> and you’ll have a nice interface to see your tests, and you can click on any individual test or group of tests to run them in isolation. (This is good when you have a large-suite and just one failing test)</p>\n<p>It’s strongly recommended that you give this a read: <a href=\"https://guide.meteor.com/testing.html\" target=\"_blank\" rel=\"noopener\">https://guide.meteor.com/testing.html</a>, it will give you a better understanding how to test the full app or just some unit-tests, and also hints to some great utility belts:</p>\n<ul>\n<li>Resetting the database: <a href=\"https://atmospherejs.com/xolvio/cleaner\" target=\"_blank\" rel=\"noopener\">https://atmospherejs.com/xolvio/cleaner</a></li>\n<li>Mocking the database: <a href=\"https://atmospherejs.com/hwillson/stub-collections\" target=\"_blank\" rel=\"noopener\">https://atmospherejs.com/hwillson/stub-collections</a></li>\n<li>Generate fake data: <a href=\"https://atmospherejs.com/dburles/factory\" target=\"_blank\" rel=\"noopener\">https://atmospherejs.com/dburles/factory</a></li>\n</ul>\n<h2 id=\"Testing-the-GraphQL-server\"><a href=\"#Testing-the-GraphQL-server\" class=\"headerlink\" title=\"Testing the GraphQL server\"></a>Testing the GraphQL server</h2><p>What if we want to test the GraphQL server, but on the server-side ?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; intialize &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/cultofcoders:apollo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SchemaLink &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-link-schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; server &#125; = initialize(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClient</span>(<span class=\"params\">context = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> link = <span class=\"keyword\">new</span> SchemaLink(&#123;</span><br><span class=\"line\">    schema: server.schema,</span><br><span class=\"line\">    context,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> ApolloClient(&#123;</span><br><span class=\"line\">    link,</span><br><span class=\"line\">    cache: <span class=\"keyword\">new</span> InMemoryCache(),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now feel free to test your schema using as <code>client</code> the client from <code>getClient()</code> function.</p>\n"}],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}